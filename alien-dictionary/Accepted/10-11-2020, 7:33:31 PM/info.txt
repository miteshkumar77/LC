{"id":407542006,"lang":"cpp","time":"1 year, 6 months","timestamp":1602459211,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/407542006/","is_pending":"Not Pending","title":"Alien Dictionary","memory":"10.6 MB","code":"class Solution {\npublic:\n    \n    \n    bool topsort(string& stack, unordered_set<char>& pre, unordered_set<char>& post, \n                 unordered_map<char, unordered_set<char>>& graph, char node) {\n        \n        if (pre.find(node) != pre.end()) {\n            if (post.find(node) == post.end()) {\n                return false;\n            }\n            return true;\n        }\n        \n        pre.insert(node);\n        \n        for (char c : graph[node]) {\n            if (!topsort(stack, pre, post, graph, c)) {\n                return false;\n            }\n        }\n        post.insert(node);\n        stack += node;\n        return true;\n    }\n    \n    string alienOrder(vector<string>& words) {\n        \n        unordered_map<char, unordered_set<char>> graph;\n        \n        int n = words.size();\n        for (int i = 0; i < n - 1; ++i) {\n            \n            string w1 = words[i];\n            string w2 = words[i + 1];\n            for (char c : w1) {\n                graph.insert(make_pair(c, unordered_set<char>()));\n            }\n            bool diff = false;\n            int size = min(w1.size(), w2.size());\n            for (int i = 0; i < size; ++i) {\n                if (w1[i] != w2[i]) {\n                    graph[w1[i]].insert(w2[i]);\n                    diff = true;\n                    break;\n                }\n            }\n            \n            if (!diff) {\n                if (w1.size() > w2.size()) {\n                    return \"\";\n                }\n            }\n        }\n        for (char c : words.back()) {\n            graph.insert(make_pair(c, unordered_set<char>()));\n        }\n        \n        unordered_set<char> pre; unordered_set<char> post; string ans;\n        \n        for (auto p : graph) {\n            if (!topsort(ans, pre, post, graph, p.first)) {\n                return \"\";\n            }\n        }\n        \n        reverse(ans.begin(), ans.end());\n        return ans;\n        \n\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"alien-dictionary"}