{"id":427162794,"lang":"cpp","time":"1 year, 4 months","timestamp":1607100711,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/427162794/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree IV","memory":"49.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, vector<TreeNode*> &nodes) {\n        unordered_set<TreeNode*> need(nodes.begin(), nodes.end());\n        TreeNode* result = nullptr;\n        function<bool(TreeNode*)> setTree = [&](TreeNode* cur) -> bool {\n            if (!cur) {\n                return false;\n            }  \n            \n            bool lr = setTree(cur -> left);\n            bool rr = setTree(cur -> right);\n            bool cr = need.find(cur) != need.end();\n            \n            if ((lr && rr) || cr) {\n                result = cur; \n                return true;\n            }\n            return lr || rr || cr;\n        };\n        \n        setTree(root);\n        \n        return result;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree-iv"}