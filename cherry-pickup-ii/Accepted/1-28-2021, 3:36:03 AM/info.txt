{"id":448883492,"lang":"cpp","time":"1 year, 2 months","timestamp":1611822963,"status_display":"Accepted","runtime":"260 ms","url":"/submissions/detail/448883492/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"14.5 MB","code":"class Solution {\npublic:\n    int cherryPickup(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<vector<int>>> dp(m + 1, vector<vector<int>>(n, vector<int>(n, -1))); \n        dp[1][0][n - 1] = grid[0][0] + grid[0][n - 1];\n        if (n == 1) {\n            dp[1][0][n - 1] -= grid[0][0];\n        }\n        int ans = 0;\n        for (int row = 2; row <= m; ++row) {\n            for (int r1 = 0; r1 < n; ++r1) {\n                for (int r2 = 0; r2 < n; ++r2) {\n                    \n                    \n                    for (int i = -1; i <= 1; ++i) {\n                        for (int j = -1; j <= 1; ++j) {\n                            if (r1 + i >= 0 && r1 + i < n && r2 + j >= 0 && r2 + j < n) {\n                                dp[row][r1][r2] = max(dp[row][r1][r2], dp[row - 1][r1 + i][r2 + j]); \n                            }\n                        }\n                    }\n                    if (dp[row][r1][r2] != -1) {\n                        dp[row][r1][r2] += grid[row - 1][r1] + grid[row - 1][r2];\n                        if (r1 == r2) {\n                            dp[row][r1][r2] -= grid[row - 1][r1];\n                        }\n                    }\n                    // cout << dp[row][r1][r2] << ' ';\n                    ans = max(ans, dp[row][r1][r2]); \n                }\n                // cout << endl;\n            }\n        }\n        \n        return ans;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii"}