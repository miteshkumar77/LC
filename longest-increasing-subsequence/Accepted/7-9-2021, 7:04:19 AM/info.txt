{"id":519766094,"lang":"cpp","time":"9 months, 1 week","timestamp":1625828659,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/519766094/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"10.6 MB","code":"class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        \n        if (nums.size() == 0) {\n            return 0; \n        }\n        \n        vector<int> piles(nums.size(), 0); \n        int R = 0;\n        piles[0] = nums[0]; \n\n        for (int i = 1; i < nums.size(); ++i) {\n            int pos = binSearch(piles, 0, R, nums[i]); \n            \n            if (pos == -1) {\n                piles[++R] = nums[i]; \n            } else {\n                piles[pos] = nums[i]; \n            }\n        }\n        \n        return R + 1; \n        \n    }\n    \n    int binSearch(vector<int>& data, int L, int R, int& val) {\n        int ans = -1; \n        \n        \n        while(L <= R) {\n            int mid = L + (R - L)/2; \n            if (data[mid] >= val) {\n                ans = mid; \n                R = mid - 1; \n            } else {\n                L = mid + 1; \n            }\n        }\n        return ans; \n    }\n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence"}