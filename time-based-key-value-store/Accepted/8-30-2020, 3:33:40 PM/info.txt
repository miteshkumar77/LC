{"id":388598389,"lang":"cpp","time":"1 year, 7 months","timestamp":1598816020,"status_display":"Accepted","runtime":"804 ms","url":"/submissions/detail/388598389/","is_pending":"Not Pending","title":"Time Based Key-Value Store","memory":"128.1 MB","code":"class TimeMap {\npublic:\n    /** Initialize your data structure here. */\n    TimeMap() {\n        \n    }\n    \n    void set(string key, string value, int timestamp) {\n        table[key].push_back(make_pair(timestamp, value)); \n    }\n    \n    string get(string key, int timestamp) {\n        const vector<pair<int, string>>& file = table[key]; \n        int L = 0; \n        int R = file.size() - 1; \n        int ans = -1; \n        \n        while(L <= R) {\n            int mid = L + (R - L)/2; \n            if (file[mid].first > timestamp) {\n                R = mid - 1; \n            } else {\n                ans = mid; \n                L = mid + 1; \n            }\n        }\n        if (ans == -1) {\n            return \"\"; \n        } else {\n            return file[ans].second; \n        }\n    }\n    \n    unordered_map<string, vector<pair<int, string>>> table; \n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */","compare_result":"111111111111111111111111111111111111111111111","title_slug":"time-based-key-value-store"}