{"id":386740820,"lang":"cpp","time":"1 year, 7 months","timestamp":1598464380,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/386740820/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {\n        int initk = K; \n        function<bool(vector<int>&, vector<int>&)> lte = [&] (vector<int>& a, vector<int>& b) -> bool {\n            unsigned long long int da = (long)a[0] * a[0] + (long)a[1] * a[1]; \n            unsigned long long int db = (long)b[0] * b[0] + (long)b[1] * b[1]; \n            return da <= db; \n        }; \n        \n        int L = 0; int R = points.size() - 1; \n        \n        while(L < R) {\n            swap(points[rand() % (R - L + 1) + L], points[R]); \n            \n            int i = L; \n            \n            for (int j = L; j < R; ++j) {\n                if (lte(points[j], points[R])) {\n                    swap(points[j], points[i++]); \n                }\n            }\n            swap(points[i], points[R]); \n            \n            if (i + 1 - L == K) {\n                break; \n            } else if (i + 1 - L > K) {\n                R = i - 1; \n            } else {\n                L = i + 1; \n                K = K - i - 1 + L; \n            }\n        }\n        \n        vector<vector<int>> ans; \n        for (int i = 0; i < initk; ++i) {\n            ans.push_back(points[i]); \n        }\n        return ans; \n    }\n};","compare_result":"11111111111111111111111111111111101100001110001010000000000000000000000000000000000","title_slug":"k-closest-points-to-origin"}