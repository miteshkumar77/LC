{"id":407599599,"lang":"cpp","time":"1 year, 6 months","timestamp":1602471195,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/407599599/","is_pending":"Not Pending","title":"Concatenated Words","memory":"N/A","code":"class Solution {\npublic:\n    struct TN {\n        \n        TN() {\n            letters = vector<TN*>(26, nullptr);\n        }\n        \n        vector<TN*> letters;\n        bool isEnd = false;\n    };\n    \n    void insert(TN* head, string& wd) {\n        for (char c : wd) {\n            if (!(head -> letters)[c - 'a']) {\n                (head -> letters)[c - 'a'] = new TN();\n            }\n            head = (head -> letters)[c - 'a'];\n        }\n        head -> isEnd = true;\n    }\n    \n    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {\n        TN* head = new TN();\n        for (string& wd : words) {\n            insert(head, wd);\n        }\n        \n        function<bool(string&)> isConcat = [&](string& wd) -> bool {\n            \n            string s = '#' + wd;\n            vector<int> dp(wd.length() + 1, -1);\n            dp[0] = 0;\n            \n            for (int i = 0; i < s.length(); ++i) {\n                if (dp[i] == -1) continue;\n                TN* cur = head;\n                for (int j = i + 1; j < s.length(); ++j) {\n                    cur = (cur -> letters)[s[j] - 'a'];\n                    if (!cur) break;\n                    if (cur -> isEnd) {\n                        dp[j] = max(dp[j], dp[i] + 1);\n                    }\n                }\n            }\n            \n            return dp.back() > 1;\n            \n        };\n        vector<string> ans;\n        for (string& s : words) {\n            if (isConcat(s)) {\n                ans.push_back(s);\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111110","title_slug":"concatenated-words"}