{"id":372385014,"lang":"cpp","time":"1 year, 8 months","timestamp":1595872649,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/372385014/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int n = inorder.size(); \n        unordered_set<int> seen; \n        list<TreeNode*> nodes; \n        for (int i = 0; i < n; ++i) {\n            seen.insert(inorder[i]); \n\n            if (seen.find(postorder[i]) == seen.end()) {\n                nodes.push_back(new TreeNode(postorder[i])); \n            } else {\n                TreeNode* tmp = new TreeNode(postorder[i]);\n                tmp -> right = (!(nodes.size() == 0))?nodes.back():nullptr;\n                if (nodes.size() != 0) {\n                    nodes.pop_back(); \n                }\n                tmp -> left = (!(nodes.size() == 0))?nodes.back():nullptr;\n                if (nodes.size() != 0) {\n                    nodes.pop_back(); \n                }                \n                nodes.push_back(tmp);\n            }\n\n        }\n        return nodes.back(); \n    }\n};","compare_result":"11101100010010000100000000000000100000000100000010100000000000000000000000000000000000000000100000000000000000000000000000000100000000000000000001000010000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}