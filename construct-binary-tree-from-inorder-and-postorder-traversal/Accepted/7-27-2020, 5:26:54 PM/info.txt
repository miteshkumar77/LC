{"id":372454675,"lang":"cpp","time":"1 year, 8 months","timestamp":1595885214,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/372454675/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"24.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int n = inorder.size(); \n        if (n == 0) {\n            return nullptr; \n        }\n        unordered_map<int, int> hm;  \n        for (int i = 0; i < n; ++i) {\n            hm[inorder[i]] = i; \n        }\n        \n        \n        \n        function<TreeNode*(int, int, int, int)> builder = \n            [&] (int Lp, int Rp, int Li, int Ri) -> TreeNode* {\n            \n            if (Lp > Rp) {\n                return nullptr; \n            }\n            \n            TreeNode* tmp = new TreeNode(postorder[Rp]);\n\n            // cout << Lp << ' ' << Rp << ' ' << Li << ' ' << Ri << endl; \n            int rightsize = Ri - hm[postorder[Rp]];\n            // cout << rightsize << endl; \n            tmp -> right = builder(Rp - rightsize, Rp - 1, hm[postorder[Rp]] + 1, Ri);\n            tmp -> left = builder(Lp, Rp - rightsize - 1, Li, hm[postorder[Rp]] - 1);\n            return tmp; \n        };\n        \n        return builder(0, n - 1, 0, n - 1);        \n         \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}