{"id":491381030,"lang":"cpp","time":"11 months, 1 week","timestamp":1620667091,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/491381030/","is_pending":"Not Pending","title":"Form Largest Integer With Digits That Add up to Target","memory":"10.1 MB","code":"class Solution {\npublic:\n    string largestNumber(vector<int>& cost, int target) {\n        int n = cost.size();\n        vector<int> dp(target + 1, 0);\n        vector<int> len(target + 1, 0);\n        vector<int> d(target + 1, 0);\n        dp[0] = 1;\n        for (int i = 1; i <= target; ++i) {\n            for (int j = 9; j >= 1; --j) {\n                int ip = i - cost[j-1];\n                if (ip >= 0 && dp[ip] > 0 && len[ip] + 1 > len[i]) {\n                    dp[i] = 2;\n                    d[i] = j;\n                    len[i] = len[ip]+1;\n                }\n            }\n        }\n        // for (int i : dp) cout << i << ' ';\n        // cout << endl;\n        if (dp.back() == 0) return \"0\";\n        string ans;\n        int i = target;\n        while(i > 0) {\n            \n            if (dp[i] == 2) {\n                // cout << i << endl;\n                ans.push_back(d[i] + '0');\n                i -= cost[d[i]-1];\n            } else if (dp[i] == 1) {\n                --i;\n            } else {\n                cout << i << \", \" << dp[i] << \": \" << \"ERROR\" << endl;\n                return \"0\";\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"form-largest-integer-with-digits-that-add-up-to-target"}