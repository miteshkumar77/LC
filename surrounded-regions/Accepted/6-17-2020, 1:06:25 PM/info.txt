{"id":354965517,"lang":"cpp","time":"1 year, 10 months","timestamp":1592413585,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/354965517/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"10.7 MB","code":"class Solution {\npublic:\n    \n    array<int, 5> dirs {0, 1, 0, -1, 0}; \n    void solve(vector<vector<char>>& board) {\n        \n        if (board.size() == 0 || board[0].size() == 0) {\n            return; \n        }\n        vector<vector<bool> > visited (board.size(), vector<bool>(board[0].size(), false)); \n        \n        \n        for (int i = 0; i < board.size(); ++i) {\n            if (board[i][0] == 'O') {\n                bfs_fill(board, i, 0, visited); \n            }\n            \n            if (board[i][board[i].size() - 1] == 'O') {\n                bfs_fill(board, i, board[i].size() - 1, visited); \n            }\n        }\n        \n        for (int j = 1; j < board[0].size() - 1; ++j) {\n            if (board[0][j] == 'O') {\n                bfs_fill(board, 0, j, visited); \n            }\n            \n            if (board[board.size() - 1][j] == 'O') {\n                bfs_fill(board, board.size() - 1, j, visited); \n            }\n        }\n        for (int i = 0; i < board.size(); ++i) {\n            for (int j = 0; j < board[0].size(); ++j) {\n                if (board[i][j] == 'O' && !visited[i][j]) {\n                    board[i][j] = 'X'; \n                } \n            }\n        }\n    }\n    \n    \n    \n    \n    void bfs_fill(vector<vector<char> >& board, int i, int j, vector<vector<bool> >& visited) {\n        if (visited[i][j]) {\n            return; \n        }\n        queue<array<int, 2> > q; q.push(array<int, 2>{i, j}); \n        visited[i][j] = true; \n        while(!q.empty()) {\n            \n            array<int, 2> top = q.front(); q.pop();  \n            \n            for (int x = 1; x < 5; ++x) {\n                int n_i = dirs[x - 1] + top[0]; \n                int n_j = dirs[x] + top[1]; \n                \n                if (n_i >= 0 && n_i < board.size() &&\n                    n_j >= 0 && n_j < board[0].size() && board[n_i][n_j] == 'O' && !visited[n_i][n_j]) {\n                    visited[n_i][n_j] = true; \n                    q.push(array<int, 2>{n_i, n_j}); \n                }\n                    \n            }\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}