{"id":354953970,"lang":"cpp","time":"1 year, 10 months","timestamp":1592411477,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/354953970/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"N/A","code":"class Solution {\npublic:\n    \n    array<int, 5> dirs {0, 1, 0, -1, 0}; \n    void solve(vector<vector<char>>& board) {\n        if (board.size() == 0 || board[0].size() == 0) {\n            return; \n        }\n        vector<vector<bool> > visited (board.size(), vector<bool>(board[0].size(), false)); \n        // bfs_fill(board, 1, 1); \n        for (int i = 0; i < board.size(); ++i) {\n            for (int j = 0; j < board[0].size(); ++j) {\n                if (!visited[i][j] && board[i][j] == 'O' && dfs_check(board, i, j, visited)) {\n                   \n                    bfs_fill(board, i, j); \n                    return; \n                }\n            }\n        }\n    }\n    \n    bool dfs_check(vector<vector<char>>& board, int i, int j, vector<vector<bool> >& visited) {\n        visited[i][j] = true; \n        if (board[i][j] == 'X') {\n            return true; \n        }\n        if (i == 0 || i + 1 == board.size() || j == 0 || j + 1 == board[i].size()) {\n            return false; \n        }\n        \n        for (int x = 1; x < 5; ++x) {\n            int n_i = dirs[x - 1] + i; \n            int n_j = dirs[x] + j; \n            if (n_i >= 0 && n_i < board.size() && n_j >= 0 && n_j < board[n_i].size() && !visited[n_i][n_j]) {\n                if (!dfs_check(board, n_i, n_j, visited)) {\n                    return false; \n                }\n            }\n        }\n        return true; \n    }\n    \n    \n    void bfs_fill(vector<vector<char> >& board, int i, int j) {\n        queue<array<int, 2> > q; q.push(array<int, 2>{i, j}); \n        while(!q.empty()) {\n            \n            array<int, 2> top = q.front(); q.pop();  \n            // cout << top[0] << ' ' << top[1] << endl; \n            board[top[0]][top[1]] = 'X'; \n            for (int x = 1; x < 5; ++x) {\n                // cout << dirs[x - 1] << ' ' << dirs[x] << endl; \n                int n_i = dirs[x - 1] + top[0]; \n                int n_j = dirs[x] + top[1]; \n                \n                if (board[n_i][n_j] != 'X') {\n                    \n                    q.push(array<int, 2>{n_i, n_j}); \n                    \n                }\n                    \n            }\n        }\n    }\n};","compare_result":"11111111111110011011000000000000000000000000000000000000000","title_slug":"surrounded-regions"}