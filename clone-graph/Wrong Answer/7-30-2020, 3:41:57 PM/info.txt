{"id":373737157,"lang":"cpp","time":"1 year, 8 months","timestamp":1596138117,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/373737157/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    \n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        unordered_map<Node*, unordered_set<Node*>> graph; \n        unordered_set<Node*> visited; \n        queue<Node*> q; \n        q.push(node); \n        while(!q.empty()) {\n            Node* top = q.front(); q.pop(); \n            if (visited.find(top) == visited.end()) {\n                visited.insert(top); \n                for (Node* n : top -> neighbors) {\n                    graph[top].insert(n);\n                    graph[n].insert(top); \n                    q.push(n); \n                }\n            }\n        }\n        \n        unordered_map<Node*, Node*> old2new; \n        for (auto p : graph) {\n            old2new[p.first] = new Node(p.first -> val); \n        }\n        \n        Node* ret = old2new[node]; \n        \n        for (auto p : graph) {\n            for (auto q : p.second) {\n                (old2new[p.first] -> neighbors).push_back(old2new[q]); \n            }\n        }\n        return ret; \n    }\n};","compare_result":"100000000000000000000","title_slug":"clone-graph"}