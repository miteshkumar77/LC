{"id":413399872,"lang":"cpp","time":"1 year, 5 months","timestamp":1603727210,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/413399872/","is_pending":"Not Pending","title":"Clone Graph","memory":"8.8 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    \n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        if (!node) return node;\n        unordered_map<Node*, Node*> seen;\n        function<void(Node*, Node*)> dfs = [&](Node* parent, Node* cur) -> void {\n            \n            if (seen.find(cur) == seen.end()) {\n                seen[cur] = new Node(cur -> val);\n                for (Node* neighbor : cur -> neighbors) {\n                    dfs(cur, neighbor);\n                }\n            }\n            if (parent)\n                (seen[parent] -> neighbors).push_back(seen[cur]);\n\n//             if (seen.find(cur) != seen.end()) {\n//                 (seen[parent] -> neighbors).push_back(seen[cur]);\n//             } else {\n                    \n//                 seen[cur] = new Node(cur -> val);\n                \n//                 if (parent)\n//                     (seen[parent] -> neighbors).push_back(seen[cur]);\n                \n//                 for (Node* neighbor : cur -> neighbors) {\n//                     dfs(cur, neighbor);\n//                 }\n//             }\n        };\n        dfs(nullptr, node);\n        return seen[node];\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph"}