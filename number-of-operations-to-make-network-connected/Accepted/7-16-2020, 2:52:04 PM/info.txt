{"id":367530198,"lang":"cpp","time":"1 year, 9 months","timestamp":1594925524,"status_display":"Accepted","runtime":"472 ms","url":"/submissions/detail/367530198/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"77.6 MB","code":"class Solution {\npublic:\n    typedef pair<int, int> pii; \n    int makeConnected(int n, vector<vector<int>>& connections) {\n        if (connections.size() < n - 1) {\n            return -1; \n        }\n        vector<list<int> > graph(n, list<int>()); \n        for (vector<int> c : connections) {\n            graph[c[0]].push_back(c[1]); \n            graph[c[1]].push_back(c[0]); \n        }\n        vector<bool> visited (n, false); \n        int components = 0; \n\n        for (int i = 0; i < n; ++i) {\n            if (!visited[i]) {\n                ++components;\n                bfs(i, visited, graph); \n            }\n        }\n        \n        return components - 1; \n        \n    }\n    \n    \n    \n    void bfs(int start, vector<bool>& visitedNodes, vector<list<int> >& graph) {\n        queue<int> q; \n        q.push(start); \n        while(!q.empty()) {\n            int node = q.front(); q.pop(); \n            for (int neighbor : graph[node]) {\n                if (!visitedNodes[neighbor]) {\n                    q.push(neighbor); visitedNodes[neighbor] = true; \n                }\n            }\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}