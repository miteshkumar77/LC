{"id":464073116,"lang":"cpp","time":"1 year, 1 month","timestamp":1614999901,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/464073116/","is_pending":"Not Pending","title":"Course Schedule IV","memory":"N/A","code":"class Solution {\npublic:\n    \n    bool isParent(vector<vector<int>>& graph, int node, int child, vector<vector<int>>& pars) {\n        if (pars[node][child]!= -1) {\n            return pars[node][child];\n        }\n        if (pars[child][node]!= -1) {\n            return !pars[child][node];\n        }\n        if (node == child) return true;\n        for (int neighbor : graph[node]) {\n            if (isParent(graph, neighbor, child, pars)) {\n                pars[node][child] = 1;\n                return true;\n            }\n        }\n        pars[node][child] = -1;\n        return false;\n    }\n    \n    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {\n        vector<vector<int>> graph(n);\n        for (auto& e : prerequisites) {\n            graph[e[0]].push_back(e[1]);\n        }\n        vector<vector<int>> pars(n, vector<int>(n, -1)); \n        \n        vector<bool> ans;\n        ans.reserve(queries.size()); \n        for (auto e : queries) {\n            \n            ans.push_back(isParent(graph, e[0], e[1], pars));\n        }\n        return ans;\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111100000000000000000000000000000000000","title_slug":"course-schedule-iv"}