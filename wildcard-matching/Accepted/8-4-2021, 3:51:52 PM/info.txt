{"id":533360426,"lang":"cpp","time":"8 months, 2 weeks","timestamp":1628106712,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/533360426/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"9.6 MB","code":"class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.length(); int n = p.length();\n        vector<vector<bool>> dp(n+1, vector<bool>(m+1, 0));\n        /*\n            dp[i][j]: can s[0:i] be matched with p[0:j]\n        */\n        dp[0][0] = true;\n        for (int i = 1; i <= n; ++i) {\n            dp[i][0] = p[i-1] == '*' && dp[i-1][0];\n        }\n        \n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= m; ++j) {\n                if (p[i-1] == '*') {\n                    dp[i][j] = dp[i-1][j-1] || dp[i-1][j] || dp[i][j-1];\n                } else if (p[i-1] == '?' || (p[i-1] == s[j-1])) {\n                    dp[i][j] = dp[i-1][j-1];\n                }\n            }\n        }\n        \n        return dp[n][m];\n    }\n};","compare_resulttitle_slug":"wildcard-matching"}