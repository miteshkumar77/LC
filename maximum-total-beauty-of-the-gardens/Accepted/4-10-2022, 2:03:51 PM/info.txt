{"id":677785151,"lang":"cpp","time":"1 week, 1 day","timestamp":1649613831,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/677785151/","is_pending":"Not Pending","title":"Maximum Total Beauty of the Gardens","memory":"78.6 MB","code":"class Solution {\npublic:\n    using ll = long long;\n    long long maximumBeauty(vector<int>& flowers, long long newFlowers, int target, int full, int partial) {\n        sort(flowers.begin(), flowers.end());\n        ll n = flowers.size();\n        ll needed{0};\n        ll full_ptr = n;\n        for (ll i = n-1; i >= 0; --i) {\n            needed = needed + max(0, target - flowers[i]);\n                full_ptr = i;\n        }\n        ll needed_mv{0};\n        ll pref_sum{0};\n        ll ans = 0;\n        ll partial_ptr{0};\n        for (ll mv = 0; mv < (ll)target; ++mv) {\n            while(partial_ptr < n && partial_ptr < full_ptr && flowers[partial_ptr] < mv) {\n                pref_sum += flowers[partial_ptr++];\n            }\n            if (partial_ptr == 0 && mv > 0 && flowers[partial_ptr] <= mv) {\n                pref_sum += flowers[partial_ptr++];\n                while(full_ptr < partial_ptr) {\n                    needed -= max(0, target - flowers[full_ptr++]);\n                }\n            }\n            needed_mv = mv * partial_ptr - pref_sum;\n            if (needed_mv > newFlowers) break;\n            while(needed_mv + needed > newFlowers) {\n                needed -= max(0, target - flowers[full_ptr++]);\n            }\n            // cout << mv << ' ' << partial_ptr << ' ' << full_ptr << ' ' << (n - full_ptr) * full + ((ll)(partial_ptr != 0) * mv * partial) << endl;\n            ans = max(ans, (n - full_ptr) * full + ((ll)(partial_ptr != 0) * mv * partial));\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-total-beauty-of-the-gardens"}