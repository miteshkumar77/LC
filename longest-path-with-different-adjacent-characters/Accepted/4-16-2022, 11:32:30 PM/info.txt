{"id":681896157,"lang":"cpp","time":"1 day, 19 hours","timestamp":1650166350,"status_display":"Accepted","runtime":"712 ms","url":"/submissions/detail/681896157/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"262.5 MB","code":"class Solution {\npublic:\n    pair<int,int> solve(vector<vector<int>>& tree, int node, string const& s) {\n        int longest_thru = 1;    \n        int longest_path = 1;\n        multiset<int> l2;\n        for (int child : tree[node]) {\n            auto [c_thru, c_longest] = solve(tree, child, s);\n            longest_path = max(longest_path, c_longest);\n            if (s[child] != s[node]) {\n                longest_thru = max(longest_thru, c_thru + 1);\n                l2.insert(c_thru);\n                if (l2.size() > 2) {\n                    l2.erase(l2.begin());\n                }\n            }\n        }\n        if (l2.size() == 2) {\n            vector<int> l2a(l2.begin(), l2.end());\n            longest_path = max(longest_path, l2a[0] + 1 + l2a[1]);\n        }\n        longest_path = max(longest_path, longest_thru);\n        return {longest_thru, longest_path};\n    }\n    \n    int longestPath(vector<int>& parent, string s) {\n        int n = s.length();\n        vector<vector<int>> tree(n);\n        for (int i = 1; i < n; ++i) {\n            tree[parent[i]].push_back(i);\n        }\n        return solve(tree, 0, s).second;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-path-with-different-adjacent-characters"}