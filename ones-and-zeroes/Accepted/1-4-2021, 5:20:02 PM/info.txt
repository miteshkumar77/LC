{"id":438607355,"lang":"cpp","time":"1 year, 3 months","timestamp":1609798802,"status_display":"Accepted","runtime":"924 ms","url":"/submissions/detail/438607355/","is_pending":"Not Pending","title":"Ones and Zeroes","memory":"103 MB","code":"class Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        int N = strs.size();\n        vector<array<int, 2>> ct(N, {0,0});\n        \n        for (int i = 0; i < N; ++i) {\n            for (char p : strs[i]) {\n                ++ct[i][p - '0'];\n            }\n        }\n        \n        // for (auto v : ct) {\n        //     cout << v[0] << ' ' << v[1] << endl;\n        // }\n        \n        /**\n        \n            dp[i][j][k] = max size subset of strings 1 to i that can \n            sum to j 0s and k 1s. \n        */\n        \n        vector<vector<vector<int>>> dp(N + 1, vector<vector<int>>(m + 1, vector<int>(n + 1, -1)));\n        for (int i = 0; i <= N; ++i) {\n            dp[i][0][0] = 0;\n        }\n        \n        int ans = 0;\n        \n        for (int str = 1; str <= N; ++str) {\n            for (int z = 0; z <= m; ++z) {\n                for (int o = 0; o <= n; ++o) {\n                    \n                    if (z - ct[str - 1][0] >= 0 && o - ct[str - 1][1] >= 0 && dp[str - 1][z - ct[str - 1][0]][o - ct[str - 1][1]] >= 0) {\n                        dp[str][z][o] = dp[str - 1][z - ct[str - 1][0]][o - ct[str - 1][1]] + 1; \n                    }\n                    \n                    dp[str][z][o] = max(dp[str][z][o], dp[str - 1][z][o]);\n                    \n                    ans = max(ans, dp[str][z][o]);\n                    \n                }\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ones-and-zeroes"}