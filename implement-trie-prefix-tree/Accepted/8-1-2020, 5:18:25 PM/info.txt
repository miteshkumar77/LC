{"id":374608653,"lang":"cpp","time":"1 year, 8 months","timestamp":1596316705,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/374608653/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"43.6 MB","code":"class Trie {\n    \nprivate: \n    struct Node {\n        array<Node*, 26> letters; \n        bool end; \n        \n        Node() {\n            fill(letters.begin(), letters.end(), nullptr); \n            end = false; \n        }\n        \n    }; \n    \n    Node* head; \npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n        head = new Node(); \n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        Node* cur = head; \n        for (char c : word) {\n            if (!(cur -> letters)[c - 'a']) {\n                (cur -> letters)[c - 'a'] = new Node(); \n            }\n            cur = (cur -> letters)[c - 'a']; \n        }\n        cur -> end = true; \n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        Node* cur = head; \n        for (char c : word) {\n            if (!(cur -> letters)[c - 'a']) {\n                return false; \n            }\n            cur = (cur -> letters)[c - 'a']; \n        }\n        \n        return cur -> end; \n        \n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        Node* cur = head; \n        for (char c : prefix) {\n            if (!(cur -> letters)[c - 'a']) {\n                return false; \n            }\n            cur = (cur -> letters)[c - 'a']; \n        }\n        return true; \n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}