{"id":494919517,"lang":"cpp","time":"11Â months","timestamp":1621350892,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/494919517/","is_pending":"Not Pending","title":"Find Duplicate File in System","memory":"53 MB","code":"class Solution {\npublic:\n    vector<array<string, 2>> parseContents(const string& path) {\n        // cout << \"---\" << path << \"---\" << endl;\n        size_t n = path.find(\" \");\n        string loc = path.substr(0, n);\n        vector<array<string, 2>> ret;\n        size_t next;\n        // cout << n << endl;\n        while(n != string::npos) {\n            next = path.find(\" \", n + 1);\n            // if (next == string::npos) {\n                // cout << n << \": NPOS\" << endl;\n            // }\n            string obj = path.substr(n + 1, next == string::npos ? next : next - n - 1);\n            string fname = loc + \"/\" + obj.substr(0, obj.find('('));\n            size_t sc = obj.find(\"(\") + 1;\n            size_t ec = obj.find(\")\", sc);\n            string content = obj.substr(sc, ec - sc);\n            ret.push_back({fname, content});\n            n = next;\n            // cout << fname << \"| |\" << content << endl;\n        }\n        return ret;\n    }\n    \n    vector<vector<string>> findDuplicate(vector<string>& paths) {\n        unordered_map<string, vector<string>> content;\n        for (const auto& s : paths) {\n            for (const auto& p : parseContents(s)) {\n                content[p[1]].push_back(p[0]);\n            }\n        }\n        vector<vector<string>> ret;\n        ret.reserve(content.size());\n        for (const auto& p : content) {\n            if (p.second.size() <= 1) continue;\n            ret.push_back(p.second);\n        }\n        return ret;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-file-in-system"}