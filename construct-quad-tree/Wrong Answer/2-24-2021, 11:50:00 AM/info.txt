{"id":460179500,"lang":"cpp","time":"1 year, 1 month","timestamp":1614185400,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/460179500/","is_pending":"Not Pending","title":"Construct Quad Tree","memory":"N/A","code":"/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n    \n    Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    \n    Node* buildTree(int x0, int y0, int x1, int y1, vector<vector<int>>& grid) {\n        if (x0 > x1 || y0 > y1) {\n            return nullptr;\n        }\n        \n        if (x0 == x1 && y0 == y1) {\n            return new Node(grid[x0][y0], true); \n        }\n        int xm = x0 + (x1 - x0)/2;\n        int ym = y0 + (y1 - y0)/2;\n        \n        \n        Node* tl = buildTree(x0, y0, xm, ym, grid);\n        Node* tr = buildTree(xm + 1, y0, x1, ym, grid); \n        Node* bl = buildTree(x0, ym + 1, xm, y1, grid); \n        Node* br = buildTree(xm + 1, ym + 1, x1, y1, grid); \n        \n        if (!(tl || tr || bl || br)) {\n            return new Node(grid[x0][y0], true);\n        } else if (\n            (tl && tr && bl && br) &&\n            (tl -> isLeaf && tr -> isLeaf && bl -> isLeaf && br -> isLeaf) &&\n            (tl -> val == tr -> val && tr -> val == bl -> val && bl -> val == br -> val)\n        ) {\n            return new Node(tl -> val, true);\n        } else {\n            return new Node(0, false, tl, tr, bl, br); \n        }\n    }\n    Node* construct(vector<vector<int>>& grid) {\n        return buildTree(0, 0, grid[0].size() - 1, grid.size() - 1, grid); \n    }\n};","compare_result":"1011110000000000000011","title_slug":"construct-quad-tree"}