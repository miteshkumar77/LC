{"id":460426122,"lang":"python","time":"1 year, 1 month","timestamp":1614234265,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/460426122/","is_pending":"Not Pending","title":"Serialize and Deserialize N-ary Tree","memory":"19.1 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Codec:\n    def serialize(self, root):\n        if root == None:\n            return \"\"\n        ret = \"(\" + str(root.val)\n        for c in root.children:\n            ret += \",\" + self.serialize(c)\n        return ret + \")\"\n    \n\t\t\n    \n    def deserialize(self, data):\n        \n        if len(data) == 0:\n            return None\n        def helper(i, s):\n            rval = \"\"\n            val = \"\"\n            children = []\n            \n            while s[i:i+1].isdigit():\n                rval += s[i]\n                i += 1\n            \n            x = i\n            \n            while x < len(s):\n                \n                if s[x:x+1].isdigit():\n                    print(\"ERROR!!!\")\n                    return None\n                else:\n                    if s[x] == '(':\n                        r = helper(x + 1, s)\n                        x = r[0]\n                        children.append(r[1])\n                    elif s[x] == ')':\n                        return (x, Node(int(rval), children))\n                x += 1\n                \n            return (-1, Node(int(rval), children))\n                \n            \n            \n        return helper(0, data[1:len(data) - 1])[1]\n                    \n        \n        \n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))","compare_result":"1111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-n-ary-tree"}