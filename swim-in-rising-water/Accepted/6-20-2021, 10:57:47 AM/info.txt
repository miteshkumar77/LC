{"id":510664086,"lang":"cpp","time":"10Â months","timestamp":1624201067,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/510664086/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"9.6 MB","code":"#define P(name) cout << #name << \"(\" << (name) << \") \"\nclass Solution {\npublic:\n    int swimInWater(vector<vector<int>>& grid) {\n        int N = grid.size();\n        auto cmp = [](array<int,3> const& a, array<int,3> const& b) -> bool {\n            return a[2] > b[2];\n        };\n        array<int, 5> dirs{0, 1, 0, -1, 0};\n        priority_queue<array<int,3>, vector<array<int,3>>, decltype(cmp)> q(cmp);\n        vector<vector<bool>> visited(N, vector<bool>(N, false));\n        q.push({0,0,grid[0][0]});\n        while(!q.empty()) {\n            auto t = q.top(); q.pop();\n            if (visited[t[0]][t[1]]) continue;\n            visited[t[0]][t[1]] = true;\n            if (t[0] == N-1 && t[1] == N-1) return t[2];\n            for (int i = 0; i < 4; ++i) {\n                int nx = t[0] + dirs[i]; int ny = t[1] + dirs[i+1];\n                if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                    //P(t[0]);P(t[1]);P(t[2]);P(nx); P(ny); cout << endl;\n                    q.push({nx, ny, max(grid[nx][ny], t[2])});\n                }\n            }\n        }\n        return -1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"swim-in-rising-water"}