{"id":509461195,"lang":"cpp","time":"10Â months","timestamp":1623973234,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/509461195/","is_pending":"Not Pending","title":"Number of Subarrays with Bounded Maximum","memory":"N/A","code":"#define PR(var) cout << \" \" << #var << \"(\"<< (var) << \")\"\n\nclass Solution {\npublic:\n    void push(int num, deque<array<int,2>>& dq) {\n        array<int,2> a{num, 1};\n        while(!dq.empty() && a[0] >= dq.front()[0]) {\n            a[1] += dq.front()[1];\n            dq.pop_front();\n        }\n        dq.push_front(a);\n    }\n    \n    void pop(deque<array<int,2>>& dq) {\n        if (--dq.back()[1] == 0) dq.pop_back();\n    }\n    \n    int getExt(deque<array<int,2>>& dq) {\n        return dq.empty() ? INT_MIN : dq.back()[0];\n    }\n    \n    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n        int dp = 0;\n        int n = nums.size();\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] >= left && nums[i] <= right) {\n                ++dp;\n            } else if (nums[i] > right) {\n                dp = 0;\n            }\n            ans += dp;\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n","compare_result":"1110111000000000010000000000000000000000000","title_slug":"number-of-subarrays-with-bounded-maximum"}