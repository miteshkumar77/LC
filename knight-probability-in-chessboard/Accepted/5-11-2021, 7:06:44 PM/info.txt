{"id":491939211,"lang":"cpp","time":"11 months, 1 week","timestamp":1620774404,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/491939211/","is_pending":"Not Pending","title":"Knight Probability in Chessboard","memory":"8.7 MB","code":"class Solution {\npublic:\n    double knightProbability(int n, int k, int r, int c) {\n        array<int, 8> dx{-1,1,2,2,1,-1,-2,-2};\n        array<int, 8> dy{2,2,1,-1,-2,-2,-1,1};\n        \n        vector<vector<vector<double>>> dp(n, vector<vector<double>>(n, vector<double>(k, -1)));\n        function<double(int,int,int)> sol = [&](int i, int j, int k) -> double {\n            if (i < 0 || i >= n || j < 0 || j >= n) {\n                return 0;\n            }\n            if (k == 0) {\n                return 1;\n            }\n            if (dp[i][j][k-1] >= 0) {\n                return dp[i][j][k-1];    \n            }\n            double ans = 0;\n            for (int x = 0; x < 8; ++x) {\n                ans += (1.0/8.0) * sol(i + dx[x], j + dy[x], k-1);\n            }\n            dp[i][j][k-1] = ans;\n            return dp[i][j][k-1];\n        };\n        return sol(r, c, k);\n    }\n};","compare_result":"1111111111111111111111","title_slug":"knight-probability-in-chessboard"}