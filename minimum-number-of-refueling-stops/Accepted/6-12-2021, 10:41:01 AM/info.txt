{"id":506822264,"lang":"cpp","time":"10 months, 1 week","timestamp":1623508861,"status_display":"Accepted","runtime":"364 ms","url":"/submissions/detail/506822264/","is_pending":"Not Pending","title":"Minimum Number of Refueling Stops","memory":"109.1 MB","code":"class Solution {\npublic:\n    typedef signed long long int slli;\n    int minRefuelStops(slli target, slli startFuel, vector<vector<int>>& stations) {\n        slli prev_position = 0;\n        slli distance;\n        slli fuel;\n        slli val;\n        slli n = stations.size(); \n        vector<vector<slli>> dp(n + 1, vector<slli>(n + 1, -1)); \n        dp[0][0] = startFuel;\n        for (slli station = 1; station <= n; ++station) {\n            distance = stations[station - 1][0] - prev_position;\n            fuel = stations[station - 1][1];\n            val = -1;\n            for (slli stops = 0; stops <= station; ++stops) {\n                if (dp[station - 1][stops] != -1 && dp[station - 1][stops] >= distance) {\n                    dp[station][stops] = dp[station - 1][stops] - distance;\n                }\n                if (stops != 0 && dp[station - 1][stops - 1] != -1 && dp[station - 1][stops - 1] >= distance) {\n                    dp[station][stops] = max(dp[station][stops], dp[station - 1][stops - 1] - distance + fuel); \n                }\n            }\n            prev_position = stations[station - 1][0]; \n        }\n        for (slli stops = 0; stops <= n; ++stops) {\n            if (dp[n][stops] != -1 && dp[n][stops] + prev_position >= target) {\n                return stops;\n            }\n        }\n        return -1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-refueling-stops"}