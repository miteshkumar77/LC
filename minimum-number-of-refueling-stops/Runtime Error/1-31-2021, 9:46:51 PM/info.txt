{"id":450397971,"lang":"cpp","time":"1 year, 2 months","timestamp":1612147611,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/450397971/","is_pending":"Not Pending","title":"Minimum Number of Refueling Stops","memory":"N/A","code":"class Solution {\npublic:\n    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {\n        int prev_position = 0;\n        int distance;\n        int fuel;\n        int val;\n        int n = stations.size(); \n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1)); \n        dp[0][0] = startFuel;\n        for (int station = 1; station <= n; ++station) {\n            distance = stations[station - 1][0] - prev_position;\n            fuel = stations[station - 1][1];\n            val = -1;\n            for (int stops = 0; stops <= station; ++stops) {\n                if (dp[station - 1][stops] != -1 && dp[station - 1][stops] >= distance) {\n                    dp[station][stops] = dp[station - 1][stops] - distance;\n                }\n                if (stops != 0 && dp[station - 1][stops - 1] != -1 && dp[station - 1][stops - 1] >= distance) {\n                    dp[station][stops] = max(dp[station][stops], dp[station - 1][stops - 1] - distance + fuel); \n                }\n            }\n            prev_position = stations[station - 1][0]; \n        }\n        for (int stops = 0; stops <= n; ++stops) {\n            if (dp[n][stops] != -1 && dp[n][stops] + prev_position >= target) {\n                return stops;\n            }\n        }\n        return -1;\n    }\n};","compare_result":"111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"minimum-number-of-refueling-stops"}