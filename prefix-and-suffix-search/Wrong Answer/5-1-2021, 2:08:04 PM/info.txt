{"id":487525661,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1619892484,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/487525661/","is_pending":"Not Pending","title":"Prefix and Suffix Search","memory":"N/A","code":"class WordFilter {\nprivate:\n    struct TN {\n        TN() {\n            fill(letters.begin(), letters.end(), nullptr);\n            id = -1;\n        }\n        array<TN*, 26> letters;\n        int id;\n    }; \n    \n    void insert(TN* root, const string& wd, int id) {\n        for (char c : wd) {\n            if (!(root -> letters)[c - 'a']) {\n                (root -> letters)[c - 'a'] = new TN();\n            }\n            root = (root -> letters[c - 'a']);\n        }\n        root -> id = id;\n    }\n    \n    void dfs(TN* root, vector<int>& ans) {\n        if (!root) return;\n        if (root -> id != -1) {\n            ans.push_back(root -> id);\n        }\n        for (TN* c : root -> letters) dfs(c, ans);\n    }\n    \n    vector<int> query(TN* root, const string& wd) {\n        for (char c : wd) {\n            root = (root -> letters)[c - 'a'];\n            if (!root) {\n                return vector<int>();\n            }    \n        }        \n        vector<int> ret;\n        dfs(root, ret);\n        return ret;\n    }\npublic:\n    TN* pref;\n    TN* suff;\n    \n    WordFilter(vector<string>& words) {\n        pref = new TN();\n        suff = new TN();\n        int idx = 0;\n        for (const string& s : words) {\n            insert(pref, s, idx);\n            ++idx;\n        }   \n        idx = 0;\n        for (string s : words) {\n            reverse(s.begin(), s.end());\n            insert(suff, s, idx);\n            ++idx;\n        }\n    }\n    \n    int f(string prefix, string suffix) {\n        auto p = query(pref, prefix);\n        auto s = query(suff, suffix);    \n        sort(p.begin(), p.end());\n        sort(s.begin(), s.end());\n        int i = p.size(); --i;\n        int j = s.size(); --j;\n        while(i >= 0 && j >= 0) {\n            if (p[i] > s[j]) {\n                --i;\n            } else if (p[i] < s[j]) {\n                --j;\n            } else {\n                return p[i];\n            }\n        }\n        return -1;\n    }\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter* obj = new WordFilter(words);\n * int param_1 = obj->f(prefix,suffix);\n */","compare_result":"101111000","title_slug":"prefix-and-suffix-search"}