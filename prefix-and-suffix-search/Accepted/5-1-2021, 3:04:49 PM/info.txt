{"id":487545439,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1619895889,"status_display":"Accepted","runtime":"316 ms","url":"/submissions/detail/487545439/","is_pending":"Not Pending","title":"Prefix and Suffix Search","memory":"167.8 MB","code":"class WordFilter {\nprivate:\n    struct TN {\n        TN() {\n            fill(letters.begin(), letters.end(), nullptr);\n            id = -1;\n        }\n        array<TN*, 27> letters;\n        int id;\n    }; \n    \n    void insert(TN* root, const string& wd, int id) {\n        for (char c : wd) {\n            if (!(root -> letters)[c - 'a']) {\n                (root -> letters)[c - 'a'] = new TN();\n            }\n            root = (root -> letters[c - 'a']);\n        }\n        root -> id = id;\n    }\n    \n    void dfs(TN* root, int& ans) {\n        if (!root) return;\n        ans = max(ans, root -> id);\n        for (TN* c : root -> letters) dfs(c, ans);\n    }\n    \n    int query(TN* root, const string& wd) {\n        for (char c : wd) {\n            root = (root -> letters)[c - 'a'];\n            if (!root) {\n                -1;\n            }    \n        }        \n        int ret = -1;\n        dfs(root, ret);\n        return ret;\n    }\npublic:\n    TN* pref;\n    \n    WordFilter(vector<string>& words) {\n        pref = new TN();\n        int idx = 0;\n        for (const string& s : words) {\n            string tmp = \"{\" + s;\n            int n = s.length();\n            for (int i = n - 1; i >= 0; --i) {\n                tmp = s[i] + tmp;\n                insert(pref, tmp, idx);\n            }\n            ++idx;\n        }\n        \n    }\n    \n    int f(string prefix, string suffix) {\n        string qstr = suffix + \"{\" + prefix;\n        return query(pref, qstr);\n    }\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter* obj = new WordFilter(words);\n * int param_1 = obj->f(prefix,suffix);\n */","compare_result":"111111111","title_slug":"prefix-and-suffix-search"}