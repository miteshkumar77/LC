{"id":385713918,"lang":"cpp","time":"1 year, 7 months","timestamp":1598285253,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/385713918/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"8.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> ans; \n        if (!root) {\n            return ans; \n        }\n        stack<TreeNode*> stk; \n        TreeNode* cur = root; \n        while(cur || !stk.empty()) {\n            if (cur) {\n                stk.push(cur); \n                cur = cur -> left; \n            } else {\n                ans.push_back(stk.top() -> val); \n                cur = stk.top() -> right; \n                stk.pop(); \n            }\n        }\n        return ans; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal"}