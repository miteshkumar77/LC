{"id":427892613,"lang":"cpp","time":"1 year, 4 months","timestamp":1607281212,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/427892613/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"18.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\ntypedef pair<Node*, int> pti;\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        \n        if (!root) return nullptr;\n        \n        queue<pti> q; \n        q.push(pti(root, 0)); \n        Node* prevNode = nullptr;\n        int prevLevel = -1; \n        while(!q.empty()) {\n            pti top = q.front(); q.pop(); \n            if (top.first->left) {\n                q.push(pti(top.first->left,top.second+1));\n            }\n            if (top.first->right) {\n                q.push(pti(top.first->right,top.second+1));\n            }\n            \n            if (prevLevel == top.second) {\n                prevNode->next = top.first;\n            }\n            prevLevel = top.second;\n            prevNode = top.first;\n        }\n        \n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii"}