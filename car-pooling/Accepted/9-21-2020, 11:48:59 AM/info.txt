{"id":398786645,"lang":"cpp","time":"1 year, 6 months","timestamp":1600703339,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/398786645/","is_pending":"Not Pending","title":"Car Pooling","memory":"10.1 MB","code":"class Solution {\npublic:\n    bool carPooling(vector<vector<int>>& trips, int capacity) {\n        sort(trips.begin(), trips.end(), [](vector<int>& a, vector<int>& b) -> bool {\n            return a[1] <= b[1];  \n        });\n        \n        int occupied = 0; \n        auto cmp = [&](vector<int>& a, vector<int>& b) -> bool {\n            return a[2] >= b[2]; \n        };\n        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> car(cmp); \n        for (auto v : trips) {\n            \n            while(!car.empty() && car.top()[2] <= v[1]) {\n                // cout << car.top()[2] << endl; \n                occupied -= car.top()[0]; \n                car.pop(); \n            }\n            car.push(v); \n            occupied += v[0]; \n            if (occupied > capacity) {\n                return false; \n            }\n        }\n        \n        return true; \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"car-pooling"}