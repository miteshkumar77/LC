{"id":398121347,"lang":"python","time":"1 year, 7 months","timestamp":1600571484,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/398121347/","is_pending":"Not Pending","title":"Maximum Non Negative Product in a Matrix","memory":"12.8 MB","code":"class Solution(object):\n    def maxProductPath(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        mod = 1000000007\n        dpmax = [[-100000000 for i in range(n + 1)] for j in range(m + 1)]\n        dpmin = [[1000000000 for i in range(n + 1)] for j in range(m + 1)]\n        dpmax[0][0] = 1\n        dpmax[0][1] = 1\n        dpmax[1][0] = 1\n        dpmin[0][0] = 1\n        dpmin[0][1] = 1\n        dpmin[1][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                mult = grid[i - 1][j - 1]\n                dpmax[i][j] = (mult * max(dpmax[i - 1][j], dpmax[i][j - 1])) \n                dpmin[i][j] = (mult * min(dpmin[i - 1][j], dpmin[i][j - 1]))\n                \n                if (grid[i - 1][j - 1] < 0):\n                    dpmax[i][j], dpmin[i][j] = dpmin[i][j], dpmax[i][j]\n        # for j in dpmax:\n        #     print(j)\n        # print(\" \")\n        # for j in dpmin:\n        #     print(j)\n        if dpmax[-1][-1] < 0:\n            return -1\n        return dpmax[-1][-1] % mod\n                ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-non-negative-product-in-a-matrix"}