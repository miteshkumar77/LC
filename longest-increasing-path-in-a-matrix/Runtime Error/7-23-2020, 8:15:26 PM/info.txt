{"id":370770311,"lang":"cpp","time":"1 year, 8 months","timestamp":1595549726,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/370770311/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return 0; \n        }\n        int m = matrix.size(); int n = matrix[0].size(); \n        array<int, 5> dirs{0, 1, 0, -1, 0}; \n        vector<vector<int> > dist(m, vector<int>(n, -1));\n        \n        \n        int ans = 0; \n        \n        function<int(int, int)> dfs = [&](int i, int j) -> int {\n            if (dist[i][j] != -1) {\n                return dist[i][j]; \n            }\n            dist[i][j] = 0; \n            int act = 0; \n            for (int x = 0; x < 4; ++x) {\n                int ni = dirs[x] + i; int nj = dirs[x + 1] + j; \n                if (ni >= 0 && nj >= 0 && ni < m && nj < n && matrix[i][j] < matrix[ni][nj]) {\n                    act = max(act, dfs(ni, nj));\n                }\n            }\n            dist[i][j] = 1 + act; \n            return dist[i][j]; \n        };\n        \n        \n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (dist[i][j] == -1) {\n                    ans = max(dfs(i, j), ans); \n                }\n            }\n        }\n        return ans; \n    }\n};","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-increasing-path-in-a-matrix"}