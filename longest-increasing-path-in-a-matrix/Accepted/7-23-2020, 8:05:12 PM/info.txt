{"id":370767670,"lang":"cpp","time":"1 year, 8 months","timestamp":1595549112,"status_display":"Accepted","runtime":"216 ms","url":"/submissions/detail/370767670/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"31.5 MB","code":"class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return 0; \n        }\n        vector<vector<int>> graph(matrix.size() * matrix[0].size(), vector<int>()); \n        int m = matrix.size(); int n = matrix[0].size(); \n        array<int, 5> dirs{0, 1, 0, -1, 0}; \n        for (int i = 0; i < matrix.size(); ++i) {\n            for (int j = 0; j < matrix[i].size(); ++j) {\n                // cout << i * m + j << ' ';\n                for (int k = 0; k < 4; ++k) {\n                    int ni = dirs[k] + i; \n                    int nj = dirs[k + 1] + j; \n                    if (ni < m && nj < n && ni >= 0 && nj >= 0 && matrix[ni][nj] > matrix[i][j]) {\n                        graph[i * n + j].push_back(ni * n + nj);\n                    }\n                }\n            }\n        }\n        \n        \n        vector<bool> visited1(m * n, false);\n        stack<int> toporder; \n        \n        function<void(int)> dfs1 = [&] (int node) -> void {\n            visited1[node] = true; \n            for (int n : graph[node]) {\n                if (!visited1[n]) {\n                    dfs1(n); \n                }\n            }\n            toporder.push(node); \n        };\n        \n        for (int i = 0; i < m * n; ++i) {\n            if (!visited1[i]) {\n                dfs1(i); \n            }\n        }\n        \n        \n        vector<int> dists(m * n, -1); \n        int ans = 0; \n        while(!toporder.empty()) {\n            \n            int node = toporder.top(); toporder.pop(); \n            if (dists[node] == -1) {\n                dists[node] = 1; \n            }\n            ans = max(ans, dists[node]); \n            for (int n : graph[node]) {\n                dists[n] = max(dists[node] + 1, dists[n]); \n            }\n        }\n        return ans; \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}