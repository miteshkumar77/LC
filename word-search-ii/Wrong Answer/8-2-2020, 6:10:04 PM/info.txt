{"id":375131188,"lang":"cpp","time":"1 year, 8 months","timestamp":1596406204,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/375131188/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution {\n    \n    \nprivate: \n    struct TN {\n        array<TN*, 26> letters; \n        bool isEnd;\n        TN() {\n            fill(letters.begin(), letters.end(), nullptr); \n            isEnd = false; \n        }\n    };\n    \n    \n    void insert(string& s, TN* head) {\n        for (char c : s) {\n            if (!(head -> letters)[c - 'a']) {\n                (head -> letters)[c - 'a'] = new TN(); \n            }\n            head = (head -> letters)[c - 'a']; \n        }\n        head -> isEnd = true; \n    }\n    \n    \n    bool erase(string s, TN* head, TN*& inval, int i) {\n        if (i == s.length()) {\n            head -> isEnd = false; \n            bool isInt = false; \n            for (int i = 0; i < 26; ++i) {\n                if ((head -> letters)[i]) {\n                    isInt = true; \n                    break; \n                }\n            }\n            \n            if (isInt) {\n                return false; \n            } else {\n                if (inval == head) {\n                    inval = nullptr; \n                }\n                delete head; \n                return true; \n            }\n        } else {\n            bool res = erase(s, (head -> letters)[s[i] - 'a'], inval, i + 1); \n            if (!res) {\n                return false; \n            } else {\n                (head -> letters)[s[i] - 'a'] = nullptr; \n                bool isInt = false; \n                for (int i = 0; i < 26; ++i) {\n                    if ((head -> letters)[i]) {\n                        isInt = true; \n                        break; \n                    }\n                }\n                if (isInt) {\n                    return false; \n                } else {\n                    if (inval == head) {\n                        inval = nullptr; \n                    }\n                    delete head; \n                    return true; \n                }\n            }\n        }\n    }\n    \n    \n    \npublic:\n    \n    \n    \n    \n    \n    \n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        TN* const head = new TN(); \n        for (string word : words) {\n            insert(word, head); \n        }\n        \n        \n        vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));         \n        string box = \"\"; \n        vector<string> ans; \n        array<int, 5> dirs{0, 1, 0, -1, 0}; \n        function<void(TN*,int,int)> bt = [&](TN* node, int i, int j) -> void {\n            \n            \n            if (node -> isEnd) {\n                ans.push_back(box); \n                // cout << box << endl; \n                // erase(box, head, node, 0); \n                node -> isEnd = false; \n                if (!node) {\n                    // cout << \"YE\" << endl; \n                    return; \n                }\n            }\n            \n            \n            \n            \n            \n            for (int x = 0; x < 4; ++x) {\n                int n_i = dirs[x] + i; \n                int n_j = dirs[x + 1] + j; \n                if (n_i >= 0 && n_j >= 0 && n_i < board.size() && n_j < board[0].size() && !visited[n_i][n_j] && \n                   (node -> letters)[board[n_i][n_j] - 'a']) {\n                    \n                    visited[n_i][n_j] = true; \n                    box += board[n_i][n_j]; \n                    bt((node -> letters)[board[n_i][n_j] - 'a'], n_i, n_j); \n                    visited[n_i][n_j] = false; \n                    box.pop_back(); \n                    if (!node) {\n                        return; \n                    }\n                }\n            }\n        };\n        \n        \n        for (int k = 0; k < board.size(); ++k) {\n            for (int z = 0; z < board[k].size(); ++z) {\n                if ((head -> letters)[board[k][z] - 'a']) {\n                    box += board[k][z]; \n                    bt(head -> letters[board[k][z] - 'a'], k, z); \n                    box.pop_back(); \n                }\n            }\n        }\n        return ans; \n    }\n    \n    \n    \n};","compare_result":"111111101101111111111111110110010010","title_slug":"word-search-ii"}