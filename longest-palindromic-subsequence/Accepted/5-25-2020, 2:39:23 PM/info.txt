{"id":344565841,"lang":"cpp","time":"1 year, 10 months","timestamp":1590431963,"status_display":"Accepted","runtime":"372 ms","url":"/submissions/detail/344565841/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"67.4 MB","code":"class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        vector<vector<int> > dp(s.length(), vector<int>(s.length(), -1));\n        string i = s; \n        return helper(i, 0, s.length() - 1, dp); \n    }\n    \n    \n    int helper(string& s, int L, int R, vector<vector<int> >& dp) {\n        if (dp[L][R] != -1) {\n            return dp[L][R]; \n        }\n        if (L > R) {\n            dp[L][R] = 0; \n            return dp[L][R]; \n        }\n        if (L == R) {\n            dp[L][R] = 1; \n            return dp[L][R]; \n        }\n        \n        int left_subproblem = helper(s, L , R - 1, dp); \n        int right_subproblem = helper(s, L + 1, R, dp); \n        int center_subproblem = helper(s, L + 1, R - 1, dp); \n        if (s[L] == s[R]) {\n            center_subproblem += 2; \n        }\n        \n        // cout << \"(\"<< L << \", \" << R << \"): \" << left_subproblem << ' ' << right_subproblem << ' ' << center_subproblem << endl; \n        \n        dp[L][R] = max(left_subproblem, max(right_subproblem, center_subproblem)); \n        return dp[L][R]; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence"}