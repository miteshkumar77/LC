{"id":389157226,"lang":"cpp","time":"1 year, 7 months","timestamp":1598917941,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/389157226/","is_pending":"Not Pending","title":"Smallest Rectangle Enclosing Black Pixels","memory":"16.5 MB","code":"class Solution {\npublic:\n    int minArea(vector<vector<char>>& image, int x, int y) {\n        // cout << x << ' ' << y << endl; \n        function<int(int,int,function<bool(int)>)> upper_bound = [](int L, int R, function<bool(int)> test) -> int {\n            // cout << \"UB: \" << L << ' ' << R << endl; \n            int ans = L; \n            while(L <= R) {\n                int mid = L + (R - L)/2; \n                if (test(mid)) {\n                    ans = mid; \n                    L = mid + 1; \n                } else {\n                    R = mid - 1; \n                }\n            }\n            return ans; \n        };\n        \n        function<int(int,int,function<bool(int)>)> lower_bound = [](int L, int R, function<bool(int)> test) -> int {\n            // cout << \"LB: \" << L << ' ' << R << endl; \n            int ans = R; \n            while(L <= R) {\n                int mid = L + (R - L)/2; \n                if (test(mid)) {\n                    ans = mid; \n                    R = mid - 1; \n                } else {\n                    L = mid + 1; \n                }\n            }\n            return ans; \n        };\n        \n        function<bool(int)> vertical_strip = [&](int j) -> bool {\n            // cout << \"j: \" << j << endl; \n            for (int i = 0; i < image.size(); ++i) {\n                if (image[i][j] == '1') {\n                    return true; \n                }\n            }\n            return false; \n        };\n        \n        function<bool(int)> horizontal_strip = [&](int i) -> bool {\n            // cout << \"i: \" << i << endl; \n            for (int j = 0; j < image[i].size(); ++j) {\n                if (image[i][j] == '1') {\n                    return true; \n                }\n            }\n            return false; \n        }; \n        \n        int minx = lower_bound(0, y, vertical_strip);\n        int maxx = upper_bound(y, image[0].size() - 1, vertical_strip); \n        int miny = lower_bound(0, x, horizontal_strip); \n        int maxy = upper_bound(x, image.size() - 1, horizontal_strip); \n        // cout << minx << ' ' << maxx << ' ' << miny << ' ' << maxy << endl; \n        return (maxx - minx + 1) * (maxy - miny + 1); \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-rectangle-enclosing-black-pixels"}