{"id":389138496,"lang":"cpp","time":"1 year, 7 months","timestamp":1598914253,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/389138496/","is_pending":"Not Pending","title":"Smallest Rectangle Enclosing Black Pixels","memory":"N/A","code":"class Solution {\npublic:\n    int minArea(vector<vector<char>>& image, int x, int y) {\n        int min_y = INT_MAX; \n        int min_x = INT_MAX; \n        int max_x = INT_MIN; \n        int max_y = INT_MIN; \n        // for (int i = 0; i < image.size(); ++i) {\n        //     for (int j = 0; j < image[i].size(); ++j) {\n        //         if (image[i][j] == '1') {\n        //             min_y = min(i, min_y); \n        //             max_y = max(i, max_y); \n        //             min_x = min(j, min_x); \n        //             max_x = max(j, max_x); \n        //         }\n        //     }\n        // }\n        array<int, 5> dirs{0, 1, 0, -1, 0}; \n        function<void(int,int)> dfs = [&](int i, int j) -> void {\n            if (i < 0 || j < 0 || i > image.size() || j > image[i].size()) {\n                return; \n            }\n            if (image[i][j] == '1') {\n                min_y = min(i, min_y); \n                max_y = max(i, max_y); \n                min_x = min(j, min_x); \n                max_x = max(j, max_x); \n                image[i][j] = '0'; \n                for (int x = 0; x < 4; ++x) {\n                    dfs(i + dirs[x], j + dirs[x + 1]); \n                }\n            } else {\n                return; \n            }\n        }; \n        \n        dfs(x, y); \n        \n        return (max_y - min_y + 1) * (max_x - min_x + 1); \n    }\n};","compare_result":"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"smallest-rectangle-enclosing-black-pixels"}