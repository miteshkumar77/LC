{"id":426789899,"lang":"cpp","time":"1 year, 4 months","timestamp":1607004757,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/426789899/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* increasingBST(TreeNode* root) {\n        TreeNode* head = nullptr;\n        TreeNode* curr = nullptr;\n        \n        stack<TreeNode*> stk;\n        TreeNode* node = root;\n        while(root || !stk.empty()) {\n            if (root) {\n                stk.push(root);\n                root = root -> left; \n            } else {\n                root = stk.top(); \n                stk.pop(); \n                TreeNode* tmp = root -> right;\n                root -> left = nullptr;\n                root -> right = nullptr;\n                if (curr) {\n                    curr -> right = root;\n                } else {\n                    head = root;\n                }\n                curr = root;\n                root = tmp;\n            }\n        }\n        \n        return head;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}