{"id":682222249,"lang":"cpp","time":"1 day, 7 hours","timestamp":1650209401,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/682222249/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"7.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* increasingBST(TreeNode* root) {\n        TreeNode* h{nullptr};\n        TreeNode* t{nullptr};\n        stack<TreeNode*> stk;\n        while(!stk.empty() || root) {\n            if (root) {\n                stk.push(root);\n                root = root->left;\n            } else {\n                root = stk.top(); stk.pop();\n                auto tmp = root->right;\n                root->left = nullptr;\n                root->right = nullptr;\n                if (!h) {\n                    h = root;\n                    t = root;\n                } else {\n                    t->right = root;\n                    t = root;\n                }\n                root = tmp;\n            }\n        }\n        return h;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}