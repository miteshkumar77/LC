{"id":377065695,"lang":"cpp","time":"1Â year, 8Â months","timestamp":1596735495,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/377065695/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"14 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (!head) {\n            return true; \n        }\n        ListNode* slow = head; \n        ListNode* pre = nullptr; \n        ListNode* fast = head; \n        while(fast) {\n            pre = slow;\n            slow = slow -> next; \n            fast = fast -> next; \n            fast = fast?fast -> next:nullptr; \n        }\n        \n        ListNode* h1 = head; \n        ListNode* h2 = slow;\n        pre -> next = nullptr; \n        h2 = reverse(h2); \n\n        while(h1 || h2) {\n            if (h1 && h2 && h1 -> val != h2 -> val) {\n                return false; \n            }\n            h1 = h1?h1->next:nullptr; \n            h2 = h2?h2->next:nullptr; \n        }\n        return true; \n    }\n    \n    \n    ListNode* reverse(ListNode* head) {\n        ListNode* pre = nullptr; \n        ListNode* cur = head; \n        ListNode* nex = head?head->next:nullptr; \n        \n        while(cur) {\n            cur -> next = pre; \n            pre = cur; \n            cur = nex;\n            if (nex) {\n                nex = nex -> next; \n            }\n        }\n        return pre; \n    }\n};","compare_result":"11111111111111111111111111","title_slug":"palindrome-linked-list"}