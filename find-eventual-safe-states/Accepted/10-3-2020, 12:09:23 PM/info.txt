{"id":403972413,"lang":"cpp","time":"1 year, 6 months","timestamp":1601741363,"status_display":"Accepted","runtime":"480 ms","url":"/submissions/detail/403972413/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"47.3 MB","code":"class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n        int n = graph.size();\n        vector<bool> pre(n, false);\n        vector<bool> post(n, false);\n        vector<bool> terminal(n, true);\n        vector<int> ans;\n        \n        function<bool(int)> dfs = [&](int node) -> bool {\n            if (pre[node] && !post[node]) {\n                return false;\n            }\n            \n            if (pre[node] && post[node]) {\n                return terminal[node];\n            }\n            pre[node] = true;\n            bool isTerminal = true;\n            for (int neighbor : graph[node]) {\n                if (!dfs(neighbor)) {\n                    isTerminal = false;\n                }\n            }\n            post[node] = true;\n            if (isTerminal) {\n                ans.push_back(node);\n            }\n            terminal[node] = isTerminal;\n            return isTerminal;\n        };\n        \n        for (int i = 0; i < n; ++i) {\n            if (!pre[i]) {\n                dfs(i);\n            }\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states"}