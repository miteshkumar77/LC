{"id":379009362,"lang":"cpp","time":"1 year, 8 months","timestamp":1597089465,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/379009362/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        function<TreeNode*(TreeNode*)> helper = [&] (TreeNode* r) -> TreeNode* {\n            \n            \n            \n            while(r) {\n                if (r -> val < p -> val && r -> val < q -> val) {\n                    r = r -> right;\n                } else if (r -> val > p -> val && r -> val > q -> val) {\n                    r = r -> left; \n                } else {\n                    return r; \n                }\n            }\n            \n            return nullptr; \n            \n            \n            \n        }; \n        return helper(root); \n        \n    }\n    \n    \n    \n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}