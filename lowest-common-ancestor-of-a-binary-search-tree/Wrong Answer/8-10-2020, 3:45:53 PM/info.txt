{"id":379005305,"lang":"cpp","time":"1 year, 8 months","timestamp":1597088753,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/379005305/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* ansn = nullptr;  \n        function<int(TreeNode*)> helper = [&] (TreeNode* r) -> int {\n            if (ansn || !r) {\n                return 0; \n            }\n            \n            int ans = 0; \n            if (r == p || r == q) {\n                ++ans; \n            }\n            \n            ans += helper(r -> left); \n            ans += helper(r -> right); \n            if (ans == 2) {\n                ansn = r; \n            }\n            return ans; \n            \n            \n        };\n        helper(root); \n        return ansn; \n        \n    }\n    \n    \n    \n};","compare_result":"101111111111010001010100000","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}