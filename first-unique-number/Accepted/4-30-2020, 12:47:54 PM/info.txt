{"id":332333032,"lang":"cpp","time":"1 year, 11 months","timestamp":1588265274,"status_display":"Accepted","runtime":"684 ms","url":"/submissions/detail/332333032/","is_pending":"Not Pending","title":"First Unique Number","memory":"152.3 MB","code":"typedef list<int> q_type; \ntypedef unordered_map<int, q_type::iterator> m_type; \n\nclass FirstUnique {\npublic:\n    \n    q_type q; \n    m_type m; \n    FirstUnique(vector<int>& nums) {\n        q = q_type(); \n        m = m_type(); \n        for (int num : nums) {\n            add(num); \n        }\n    }\n    \n    int showFirstUnique() {\n        if (q.size() == 0) {\n            return -1; \n        } else {\n            return q.front(); \n        }\n    }\n    \n    void add(int value) {\n        pair<m_type::iterator, bool> added = m.insert(pair<int, q_type::iterator>(value, q.end())); \n        \n        if (!added.second) {\n            if (added.first -> second == q.end()) {\n                return; \n            }\n            q.erase(added.first -> second); \n            added.first -> second = q.end(); \n            return; \n        }\n        \n        q.push_back(value); \n        added.first -> second = --q.end(); \n    }\n};\n\n/**\n * Your FirstUnique object will be instantiated and called as such:\n * FirstUnique* obj = new FirstUnique(nums);\n * int param_1 = obj->showFirstUnique();\n * obj->add(value);\n */","compare_result":"11111111111111111","title_slug":"first-unique-number"}