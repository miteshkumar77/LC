{"id":680876939,"lang":"cpp","time":"3 days, 9 hours","timestamp":1650030258,"status_display":"Accepted","runtime":"773 ms","url":"/submissions/detail/680876939/","is_pending":"Not Pending","title":"Longest Substring of One Repeating Character","memory":"149.9 MB","code":"class Solution {\nprivate:\n    map<int,int> ints;\n    map<int,int> lens;\n    void add(int l, int r) {\n        ints[l] = r;\n        ++lens[r - l + 1];\n    }\n    \n    void rem(int l, int r) {\n        ints.erase(l);\n        if (--lens[r - l + 1] == 0)\n            lens.erase(r - l + 1);\n    }\n    \n    pair<int,int> get_split(int left) {\n        auto tmp = ints.lower_bound(left);\n        return ((tmp != ints.end()) && (tmp->first == left)) ? (*tmp) : (*prev(tmp));\n    }\n    void print_ints() {\n        for (auto p : ints) {\n            cout << \"[\" << p.first << \", \" << p.second << \"] \";\n        }\n        cout << endl;\n    }\npublic:\n    vector<int> longestRepeating(string s, string qC, vector<int>& qI) {\n        int f = 0;\n        int n = s.length();\n        int Q = qC.size();\n        for (int i = 1; i <= n; ++i) {\n            if (i == n || (s[i] != s[f])) {\n                add(f, i-1);\n                f = i;\n            }\n        }\n        // print_ints();\n        vector<int> ans(Q);\n        for (int q = 0; q < Q; ++q) {\n            if (s[qI[q]] != qC[q]) {\n                auto split = get_split(qI[q]);\n                // cout << \"split:\" << qI[q] << \" [\" << split.first << ' ' << split.second << \"] \";\n                rem(split.first, split.second);\n                pair<int,int> left_split{split.first, qI[q]-1};\n                pair<int,int> right_split{qI[q]+1, split.second};\n                pair<int,int> add_int{qI[q], qI[q]};\n                s[qI[q]] = qC[q];\n                if (left_split.first <= left_split.second) {\n                    add(left_split.first, left_split.second);\n                } else if (qI[q] > 0 && s[qI[q]] == s[qI[q]-1]) {\n                    auto left_join = get_split(qI[q]-1);\n                    add_int.first = left_join.first;\n                    rem(left_join.first, left_join.second);\n                }\n                \n                if (right_split.first <= right_split.second) {\n                    add(right_split.first, right_split.second);\n                } else if (qI[q] + 1 < n && s[qI[q]] == s[qI[q]+1]) {\n                    auto right_join = (*ints.upper_bound(qI[q]));\n                    add_int.second = right_join.second;\n                    rem(right_join.first, right_join.second);\n                }\n                add(add_int.first, add_int.second);\n            }\n            ans[q] = prev(lens.end())->first;\n            // cout << ans[q] << \"[ \" << s << \" ]: \";\n            // print_ints();\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"longest-substring-of-one-repeating-character"}