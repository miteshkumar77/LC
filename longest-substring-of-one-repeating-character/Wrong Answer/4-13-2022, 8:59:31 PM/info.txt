{"id":679913099,"lang":"cpp","time":"4 days, 22 hours","timestamp":1649897971,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/679913099/","is_pending":"Not Pending","title":"Longest Substring of One Repeating Character","memory":"N/A","code":"class Solution {\npublic:\n    void add(map<int,int>& mp, map<int,int>& len, pair<int,int> p) {\n        ++len[p.second-p.first+1];\n        mp[p.first] = p.second;\n    }\n    // last element that is less than or equal to val\n    map<int,int>::iterator mylb(map<int,int>& mp, int val) {\n        auto it = mp.lower_bound(val);\n        if (it->first > val) {\n            return prev(it);\n        }\n        return it;\n    }\n    void del(map<int,int>& mp, map<int,int>& len, pair<int,int> p) {\n        if (--len[p.second - p.first+1] == 0) {\n            len.erase(p.second - p.first + 1);\n        }\n        mp.erase(p.first);\n    }\n    vector<int> longestRepeating(string s, string qC, vector<int>& qI) {\n        map<int,int> mp;    \n        int n = s.length();\n        int prev_p = 0;\n        map<int, int> len;\n        for (int i = 1; i <= n; ++i) {\n            if (i == s.length() || s[i] != s[prev_p]) {\n                mp[prev_p] = i-1;\n                ++len[i-prev_p];\n                prev_p = i;\n            }\n        }\n        int k = qC.length();\n        vector<int> ans(k);\n        /*\n            for (auto p : mp) {\n                cout << \"[\" << p.first << ' ' << p.second << \"] \";\n            }\n            cout << endl;\n        */\n        for (int q = 0; q < qC.length(); ++q) {\n            if (s[qI[q]] != qC[q]) {\n                auto split = mylb(mp, qI[q]);\n                pair<int,int> left = {split->first, qI[q]-1};\n                pair<int,int> right = {qI[q]+1, split->second};\n                del(mp, len, *split);\n                if (left.first <= left.second) {\n                    add(mp, len, left);\n                }\n                if (right.first <= right.second) {\n                    add(mp, len, right);\n                }\n                pair<int,int> add_p = {qI[q], qI[q]};\n                s[qI[q]] = qC[q];\n                if (qI[q] != 0 && s[qI[q]] == s[qI[q]-1]) {\n                    auto it = mylb(mp, add_p.first);\n                    add_p.first = it->first;\n                    del(mp, len, *it);\n                }\n                if (qI[q] != n-1 && s[qI[q]] == s[qI[q]+1]) {\n                    auto it = mp.upper_bound(add_p.first);\n                    add_p.second = it->second;\n                    del(mp, len, *it);\n                }\n                add(mp, len, add_p);\n            }\n            /*\n            for (auto p : mp) {\n                cout << \"[\" << p.first << ' ' << p.second << \"] \";\n            }\n            cout << endl;\n            */\n            ans[q] = prev(len.end())->first;\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111010111111111111111111111111110000011","title_slug":"longest-substring-of-one-repeating-character"}