{"id":391895707,"lang":"cpp","time":"1 year, 7 months","timestamp":1599411226,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/391895707/","is_pending":"Not Pending","title":"Image Overlap","memory":"9.9 MB","code":"class Solution {\n    \nprivate:\n    struct pair_hash {\n        inline std::size_t operator()(const std::pair<int,int> & v) const {\n            return v.first*31+v.second;\n        }\n    };\npublic:\n    int largestOverlap(vector<vector<int>>& A, vector<vector<int>>& B) {\n        // unordered_set<pair<int,int>, pair_hash> pixels_A; \n        vector<pair<int,int>> pixels_A;\n        unordered_set<pair<int,int>, pair_hash> pixels_B; \n        for (int i = 0; i < A.size(); ++i) {\n            for (int j = 0; j < A[i].size(); ++j) {\n                if (A[i][j] == 1) {\n                    pixels_A.push_back(make_pair(i,j)); \n                }\n                if (B[i][j] == 1) {\n                    pixels_B.insert(make_pair(i,j)); \n                }\n            }\n        }\n        \n        function<int(int,int)> overlap = [&](int v, int h) -> int {\n            int ans = 0; \n            for (auto p : pixels_A) {\n                if (pixels_B.find(make_pair(p.first + v, p.second + h)) != pixels_B.end()) {\n                    ++ans;\n                }\n            }\n            return ans; \n        };\n        int ans = 0; \n        for (int i = 0; i < A.size(); ++i) {\n            for (int j = 0; j < A.size(); ++j) {\n                ans = max(ans, overlap(i,j)); \n                ans = max(ans, overlap(-1*i, -1*j)); \n            }\n        }\n        return ans; \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"image-overlap"}