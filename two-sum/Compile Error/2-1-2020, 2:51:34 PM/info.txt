{"id":299316796,"lang":"cpp","time":"2 years, 2 months","timestamp":1580586694,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/299316796/","is_pending":"Not Pending","title":"Two Sum","memory":"N/A","code":"// #include <utility>\n// class Solution {\n// public:\n    \n//     vector<int> twoSum(vector<int>& nums, int target) {\n//         unordered_map<int, int> remainder_indices;\n//         for (int i = 0; i < nums.size(); ++i) {\n//             unordered_map<int, int>::iterator tmp = remainder_indices.find(nums[i]);\n//             if (tmp != remainder_indices.end()) {\n//                 vector<int> ret = {tmp -> second, i};\n//                 return ret;\n//             } else {\n//                 remainder_indices.insert(make_pair(target - nums[i], i));\n//             }\n//         }\n//         vector<int> ret = {-1, -1};\n//         return ret;\n        \n//     }\n// };\n\n#define SIZE 50000\n\nint hash(int key) {\n    int r = key % SIZE;\n    return r < 0 ? r + SIZE : r;\n}\n\nvoid insert(int *keys, int *values, int key, int value) {\n    int index = hash(key);\n    while (values[index]) {\n        index = (index + 1) % SIZE;\n    }\n    keys[index] = key;\n    values[index] = value;\n}\n\nint search(int *keys, int *values, int key) {\n    int index = hash(key);\n    while (values[index]) {\n        if (keys[index] == key) {\n            return values[index];\n        }\n        index = (index + 1) % SIZE;\n    }\n    return 0;\n}\n\nint* twoSum(int* nums, int numsSize, int target) {\n    int keys[SIZE];\n    int values[SIZE] = {0};\n    for (int i = 0; i < numsSize; i++) {\n        int complements = target - nums[i];\n        int value = search(keys, values, complements);\n        if (value) {\n            int *indices = (int *) malloc(sizeof(int) * 2);\n            indices[0] = value - 1;\n            indices[1] = i;\n            return indices;\n        }\n        insert(keys, values, nums[i], i + 1);\n    }\n    return NULL;\n}","compare_result":null,"title_slug":"two-sum"}