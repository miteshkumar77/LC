{"id":441756276,"lang":"cpp","time":"1 year, 3 months","timestamp":1610402541,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/441756276/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    \n    unordered_map<TreeNode*, int> distances;\n    bool getTargetParents(TreeNode* root, TreeNode* target, int level, int& targetLevel, int K) {\n        if (!root) return false;\n        if (root == target) {\n            targetLevel = level;\n            distances[root] = 0;\n            return true;\n        }\n        \n        if (getTargetParents(root->left, target, level + 1, targetLevel, K)) {\n            if (targetLevel - level < K) {\n                if (root->right) {\n                    distances[root->right] = (targetLevel - level) + 1;\n                }\n            } else {\n                distances[root] = targetLevel - level;\n            }\n            return true;\n        }\n        \n        if (getTargetParents(root->right, target, level + 1, targetLevel, K)) {\n            if (targetLevel - level < K) {\n                if (root->left) {\n                    distances[root->left] = K - (targetLevel - level) + 1;\n                }\n            } else {\n                distances[root] = targetLevel - level;\n            }\n            return true;\n        }\n        \n        return false;\n        \n    }\n    \n    void getTargetChildren(TreeNode* root, int level, int K) {\n        if (!root) return;\n        if (level == K) {\n            distances[root] = K;\n            return;\n        }\n        getTargetChildren(root->left, level + 1, K);\n        getTargetChildren(root->right, level + 1, K);\n        \n    }\n    \n    \n    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\n        if (!root || !target) return vector<int>(); \n        \n        int targetLevel = 0;\n        getTargetParents(root, target, 0, targetLevel, K);\n        getTargetChildren(target, 0, K); \n        unordered_map<TreeNode*, int> cpy(distances.begin(), distances.end());\n        for (auto p : cpy) {\n            if (p.second > 0) {\n                getTargetChildren(p.first, 0, p.second);\n            }\n        }\n        vector<int> ans;\n        for (auto p : distances) {\n            if (p.second == K) {\n                ans.push_back(p.first -> val);\n            }\n        }\n        // for (auto p : distances) {\n        //     cout << p.first -> val << ' ' << p.second << endl;\n        // }\n        return ans;\n    }\n};","compare_result":"111110100000101000011001010000011001100000110000110101000","title_slug":"all-nodes-distance-k-in-binary-tree"}