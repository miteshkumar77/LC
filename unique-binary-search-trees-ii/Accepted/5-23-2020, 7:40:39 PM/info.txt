{"id":343705635,"lang":"cpp","time":"1 year, 10 months","timestamp":1590277239,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/343705635/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"10.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        if (n == 0) {\n            return vector<TreeNode*>(); \n        }\n        \n        vector<vector<TreeNode*> > dp(n + 1, vector<TreeNode*>()); \n        return treeGenerator(n, dp); \n        \n        \n    }\n    \n    \n    vector<TreeNode*> treeGenerator(int n, vector<vector<TreeNode*> >& dp) {\n        \n        \n        if (n == 0) {\n            return vector<TreeNode*>{ nullptr }; \n        }\n        \n        if (dp[n].size() != 0) {\n            return dp[n]; \n        }\n        \n        if (n == 1) {\n            return vector<TreeNode*> { new TreeNode(n) }; \n        }\n        \n         \n        for (int i = 1; i <= n; ++i) {\n            vector<TreeNode*> left_trees = treeGenerator(i - 1, dp); \n            vector<TreeNode*> right_trees = treeGenerator(n - i, dp); \n            for (int x = 0; x < left_trees.size(); ++x) {\n                for (int j = 0; j < right_trees.size(); ++j) {\n                    TreeNode* root = new TreeNode(i); \n                    root -> left = left_trees[x]; \n                    root -> right = cpyTree(right_trees[j], i);\n                    dp[n].push_back(root); \n                }\n            }\n        }\n        \n        return dp[n]; \n    }\n    \n    TreeNode* cpyTree(TreeNode* root, int offset) {\n        if (!root) {\n            return nullptr; \n        }\n        \n        TreeNode* newRoot = new TreeNode(root -> val + offset); \n        newRoot -> left = cpyTree(root -> left, offset); \n        newRoot -> right = cpyTree(root -> right, offset); \n        return newRoot; \n    }\n};","compare_result":"111111111","title_slug":"unique-binary-search-trees-ii"}