{"id":364985900,"lang":"cpp","time":"1 year, 9 months","timestamp":1594446837,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/364985900/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"N/A","code":"class NumArray {\npublic:\n    \n    vector<int> st; \n    vector<int> data; \n    int size; \n    NumArray(vector<int>& nums) {\n        data = nums; \n        size = nums.size(); \n        st = vector<int>(nums.size() * 4); \n        treeBuilder(0, size - 1, 0, nums); \n    }\n    \n    void update(int i, int val) {\n        int diff = val - data[i]; \n        updateHelper(i, 0, size - 1, 0, diff); \n        data[i] = val; \n    }\n    \n    int sumRange(int i, int j) {\n        return sumRangeHelper(0, size - 1, 0, i, j); \n    }\nprivate:\n    void updateHelper(int i, int L, int R, int root, int val) {\n        if (root >= st.size()) {\n            return; \n        }\n        st[root] += val; \n        if (L == R) { \n            return ;\n        }\n        int mid = L + (R - L)/2; \n        if (L <= i <= mid) {\n            updateHelper(i, L, mid, root * 2 + 1, val); \n        } else {\n            updateHelper(i, mid + 1, R, root * 2 + 2, val); \n        }\n        \n    }\n    int sumRangeHelper(int L, int R, int root, int i, int j) {\n        if (root >= st.size()) {\n            return 0; \n        }\n        if (L == R) {\n            return st[root]; \n        }\n        \n        int mid = L + (R - L)/2; \n        int ans = 0;\n        \n        if (L <= i <= R) {\n            ans += sumRangeHelper(L, mid, root * 2 + 1, i , j); \n        }\n        \n        if (L <= j <= R) {\n            ans += sumRangeHelper(mid + 1, R, root * 2 + 2, i , j); \n        }\n        return ans; \n        \n    }\n    void treeBuilder(int L, int R, int root, vector<int>& nums) {\n        \n        if (root >= st.size()) {\n            return; \n        }\n        if (L == R) {\n            st[root] = nums[L]; \n            return; \n        }\n        \n        int mid = L + (R - L)/2; \n        treeBuilder(L, mid, 2 * root + 1, nums); \n        treeBuilder(mid + 1, R, 2 * root + 2, nums); \n        \n        st[root] = st[2 * root + 1] + st[2 * root + 2]; \n    }\n    \n};\n\n// [\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]\n// [[[1,3,5,7,2,6]],[0,2],[1,2],[0,2]]\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(i,val);\n * int param_2 = obj->sumRange(i,j);\n */","compare_result":"1110100000","title_slug":"range-sum-query-mutable"}