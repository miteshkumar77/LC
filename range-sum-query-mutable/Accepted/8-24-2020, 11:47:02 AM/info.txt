{"id":385705772,"lang":"cpp","time":"1 year, 7 months","timestamp":1598284022,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/385705772/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"19.5 MB","code":"class NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n        tree = vector<int>(nums.size() * 4); \n        n = nums.size() - 1; \n        orig.swap(nums); \n        buildTree(orig, 0, n, 0); \n    }\n    \n    void update(int i, int val) {\n        // cout << orig.size() << ' ' << i << endl; \n        int dif = val - orig[i]; \n        orig[i] = val; \n        // cout << \"beginning update\" << endl; \n        updateTree(0, n, 0, dif, i); \n        // cout << \"updated\" << endl; \n    }\n    \n    int sumRange(int i, int j) {\n        int ans = queryTree(0, n, i, j, 0); \n        // cout << \"query \" << i << \", \" << j << \": \" << ans << endl; \n        return ans; \n    }\n    \nprivate: \n    \n    \n    \n    int queryTree(int L, int R, int bL, int bR, int root) {\n        // cout << bL << ' ' << bR << ' ' << L << ' ' << R << ' ' << root << endl; \n        if (L > R) {\n            return 0; \n        }\n        \n        if (R < bL || L > bR) {\n            return 0; \n        }\n        \n        if (L >= bL && R <= bR) {\n            return tree[root]; \n        }\n        \n        int mid = L + (R - L)/2; \n        return queryTree(L, mid, bL, bR, 2 * root + 1) + \n            queryTree(mid + 1, R, bL, bR, 2 * root + 2); \n    }\n    \n    void updateTree(int L, int R, int root, int val, int idx) {\n        // cout << L << ' ' << R << ' ' << root << endl; \n        if (L > R) {\n            return; \n        }\n        \n        \n        \n        if (L > idx || R < idx) {\n            return; \n        }\n        \n        \n        \n        tree[root] += val;\n        if (L == R) {\n            return; \n        }\n        int mid = L + (R - L)/2; \n        updateTree(L, mid, 2 * root + 1, val, idx); \n        updateTree(mid + 1, R, 2 * root + 2, val, idx); \n    }\n    \n    int buildTree(vector<int>& nums, int L, int R, int root) {\n        if (L > R) {\n            return 0; \n        }\n        \n        if (L == R) {\n            tree[root] = nums[L]; \n            return tree[root]; \n        }\n        \n        int mid = L + (R - L)/2; \n        \n        tree[root] = buildTree(nums, L, mid, 2 * root + 1) + \n                    buildTree(nums, mid + 1, R, 2 * root + 2); \n        return tree[root]; \n        \n    }\n    vector<int> tree; \n    vector<int> orig; \n    int n; \n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(i,val);\n * int param_2 = obj->sumRange(i,j);\n */","compare_result":"1111111111","title_slug":"range-sum-query-mutable"}