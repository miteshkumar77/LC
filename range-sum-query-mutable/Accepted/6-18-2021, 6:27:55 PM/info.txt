{"id":509885869,"lang":"cpp","time":"10Â months","timestamp":1624055275,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/509885869/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"153.1 MB","code":"class NumArray {\npublic:\n    \n    NumArray(vector<int>& nums) : nums(nums) {\n        tree = vector<int>(nums.size() * 4);\n        build(0, (int)nums.size() - 1, 0);\n    }\n    \n    void update(int index, int val) {\n        int diff = val - nums[index];\n        nums[index] = val;\n        update(index, 0, (int)nums.size() - 1, 0, diff);\n    }\n    \n    int sumRange(int left, int right) {\n        return query(left, right, 0, (int)nums.size() - 1, 0);\n    }\n    \nprivate:\n    int build(int l, int r, int node) {\n        if (l == r) {\n            tree[node] = nums[l];\n            return nums[l];\n        } \n        int mid = l + (r - l)/2;\n        int sum = build(l, mid, node * 2 + 1) + build(mid + 1, r, node * 2 + 2);\n        tree[node] = sum;\n        return sum;\n    }\n    \n    int query(const int L, const int R, int l, int r, int node)  {\n        if (l >= L && r <= R) return tree[node];\n        if (r < L || l > R) return 0;\n        int mid = l + (r - l)/2;\n        return query(L, R, l, mid, node * 2 + 1) + query(L, R, mid + 1, r, node * 2 + 2);\n    }\n    \n    void update(const int idx, int l, int r, int node, const int diff) {\n        if (l > idx || r < idx) return;\n        tree[node] += diff;\n        if (l == r) return;\n        int mid = l + (r - l)/2;\n        update(idx, l, mid, node * 2 + 1, diff);\n        update(idx, mid+1, r, node * 2 + 2, diff);\n    }\n    \n    vector<int> tree;\n    vector<int> nums;\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */","compare_result":"111111111111111","title_slug":"range-sum-query-mutable"}