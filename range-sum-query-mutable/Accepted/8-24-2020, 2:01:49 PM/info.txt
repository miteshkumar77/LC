{"id":385758184,"lang":"cpp","time":"1 year, 7 months","timestamp":1598292109,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/385758184/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"19.7 MB","code":"\n    class NumArray {\n\n\n    public: \n        NumArray(vector<int>& nums) {\n            n = nums.size(); \n            tree = vector<int>(4 * n); \n            build_tree(nums, 0, n - 1, 0); \n        }\n\n\n        void update(int i, int val) {\n            update_tree(0, n - 1, i, val, 0); \n        }\n\n        int sumRange(int i, int j) {\n            return query(0, n - 1, i, j, 0); \n        }\n\n    private:\n\n\n        int query(int L, int R, int bL, int bR, int root) {\n            if (L > R) {\n                return 0; \n            }\n\n            if (L > bR || R < bL) {\n                return 0; \n            }\n\n            if (L >= bL && R <= bR) {\n                return tree[root]; \n            }\n            int mid = L + (R - L)/2; \n            return query(L, mid, bL, bR, 2 * root + 1) +\n                query(mid + 1, R, bL, bR, 2 * root + 2); \n        }\n\n        int build_tree(vector<int>& nums, int L, int R, int root) {\n            if (L > R) {\n                return 0; \n            }\n\n            if (L == R) {\n                tree[root] = nums[L]; \n                return tree[root]; \n            }\n\n            int mid = L + (R - L)/2; \n\n            tree[root] = build_tree(nums, L, mid, 2 * root + 1) + \n                build_tree(nums, mid + 1, R, 2 * root + 2); \n            return tree[root]; \n        }\n\n\n        int update_tree(int L, int R, int idx, int val, int root) {\n\n            if (L > R) {\n                return 0; \n            }\n            if (L > idx || R < idx) {\n                return tree[root]; \n            }\n            if (L == R) {\n                tree[root] = val; \n                return tree[root]; \n            }\n            int mid = L + (R - L)/2; \n            tree[root] = update_tree(L, mid, idx, val, 2 * root + 1) + \n                    update_tree(mid + 1, R, idx, val, 2 * root + 2); \n            return tree[root]; \n\n        }\n\n        vector<int> tree;  \n        int n; \n    }; \n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(i,val);\n * int param_2 = obj->sumRange(i,j);\n */","compare_result":"1111111111","title_slug":"range-sum-query-mutable"}