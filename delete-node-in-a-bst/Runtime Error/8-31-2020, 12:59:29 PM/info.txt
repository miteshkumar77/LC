{"id":389011914,"lang":"cpp","time":"1 year, 7 months","timestamp":1598893169,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/389011914/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        TreeNode* target = find(root, key); \n        if (!target) {\n            return root; \n        }\n        if (isLeaf(root)) {\n            delete root; \n            root = nullptr; \n            return root; \n        }\n        \n        TreeNode* bottom = getBottom(target); \n        int val; \n        bool done = false; \n        if (isLeaf(bottom -> left)) {\n            \n            val = bottom -> left -> val;\n            if (bottom -> left == target) {\n                done = true; \n            }\n            delete bottom -> left; \n            bottom -> left = nullptr; \n        } else {\n            val = bottom -> right -> val; \n            if (bottom -> right == target) {\n                done = true; \n            }\n            delete bottom -> right; \n            bottom -> right = nullptr; \n        }\n        if (!done) {\n            target -> val = val; \n            percolate(target); \n        }\n        return root; \n        \n    }\n    \n    void percolate(TreeNode* root) {\n        if (!root) {\n            return; \n        }\n        if (root -> right && root -> val > root -> right -> val) {\n            swap(root -> val, root -> right -> val); \n            percolate(root -> right); \n        } else if (root -> left && root -> val < root -> left -> val) {\n            swap(root -> val, root -> left -> val); \n            percolate(root -> left); \n        }\n    }\n    \n    bool isLeaf(TreeNode* root) {\n        if (!root) {\n            return false; \n        }\n        return !root -> left && !root -> right; \n    }\n    TreeNode* getBottom(TreeNode* root) {\n        if (!root) {\n            return nullptr; \n        }\n        if (isLeaf(root)) {\n            return root; \n        }\n        if (isLeaf(root -> left) || isLeaf(root -> right)) {\n            return root; \n        }\n        \n        if (root -> left) {\n            return getBottom(root -> left);\n        } else {\n            return getBottom(root -> right); \n        }\n    }\n    \n    TreeNode* find(TreeNode* root, int key) {\n        while(root) {\n            if (root -> val > key) {\n                root = root -> left; \n            } else if (root -> val < key) {\n                root = root -> right; \n            } else {\n                return root; \n            }\n        }\n        return nullptr; \n    }\n};","compare_result":"1111110000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst"}