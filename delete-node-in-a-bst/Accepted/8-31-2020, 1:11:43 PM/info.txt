{"id":389016354,"lang":"cpp","time":"1 year, 7 months","timestamp":1598893903,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/389016354/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"15.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (!root) {\n            return nullptr; \n        }\n        if (root -> val > key) {\n            root -> left = deleteNode(root -> left, key);  \n        } else if (root -> val < key) {\n            root -> right = deleteNode(root -> right, key); \n        } else {\n            if (!root -> right) {\n                TreeNode* ret = root -> left; \n                delete root; \n                return ret; \n            } else if (!root -> left) {\n                TreeNode* ret = root -> right; \n                delete root; \n                return ret; \n            } else {\n                TreeNode* tmp = root -> right; \n                while(tmp -> left) {\n                    tmp = tmp -> left; \n                }\n                root -> val = tmp -> val; \n                root -> right = deleteNode(root -> right, root -> val); \n            }\n        }\n        return root; \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst"}