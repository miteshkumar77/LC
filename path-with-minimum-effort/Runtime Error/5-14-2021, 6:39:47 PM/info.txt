{"id":493222990,"lang":"cpp","time":"11 months, 1 week","timestamp":1621031987,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/493222990/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"N/A","code":"class Solution {\npublic:\n\n    array<int, 5> dirs{0, 1, 0, -1, 0};\n    bool possible(vector<vector<int>>& grid, vector<vector<bool>>& visited, const int testMax, int currMax, int prevVal, int i, int j) {\n      int n = grid.size();\n      int m = grid[0].size();\n      if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) return false;\n      currMax = max(currMax, abs(grid[i][j] - prevVal));\n      if (currMax > testMax) {\n        return false;\n      }\n      if (i == n - 1 && j == m - 1) return true;\n      visited[i][j] = true;\n      for (int x = 0; x < 4; ++x) {\n        if (possible(grid, visited, testMax, currMax, grid[i][j], i + dirs[x], j + dirs[x+1])) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n\n    int minimumEffortPath(vector<vector<int>>& grid) {\n      int n = grid.size();\n      int m = grid[0].size();\n      vector<vector<bool>> visited(n, vector<bool>(n, false));\n      // cout << possible(grid, visited, 2, 0, grid[0][0], 0, 0);\n\n      int l = 0; int r = INT_MAX; int ans = r; int mid;\n      while(l <= r) {\n        for (auto& v : visited) fill(v.begin(), v.end(), false);\n        mid = l + (r - l)/2;\n        // cout << mid << endl;\n        if (possible(grid, visited, mid, 0, grid[0][0], 0, 0)) {\n          ans = mid;\n          r = mid - 1;\n        } else {\n          l = mid + 1;\n        }\n      }\n      return ans;\n    }\n};","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"path-with-minimum-effort"}