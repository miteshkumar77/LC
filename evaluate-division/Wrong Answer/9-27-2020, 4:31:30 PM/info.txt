{"id":401516479,"lang":"cpp","time":"1 year, 6 months","timestamp":1601238690,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/401516479/","is_pending":"Not Pending","title":"Evaluate Division","memory":"N/A","code":"class Solution {\npublic:\n    typedef pair<string,string> pss; \n    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {\n        unordered_map<string,unordered_map<string,double>> graph; \n        for (int i = 0; i < equations.size(); ++i) {\n            graph[equations[i][0]][equations[i][1]] = values[i]; \n            graph[equations[i][0]][\"\"] = 1;\n            graph[equations[i][1]][equations[i][0]] = 1 / values[i]; \n            graph[equations[i][1]][\"\"] = 1;\n        }\n        \n        \n        function<double(string,string)> eval = [&](string a, string b) -> double {\n            if (graph.find(a) == graph.end() || graph.find(b) == graph.end()) {\n                return -1; \n            }\n            unordered_map<string, string> prev; \n            queue<pss> bfsq; \n            bfsq.push(pss(a, \"\")); \n            \n            while(!bfsq.empty()) {\n                string t = bfsq.front().first; string p = bfsq.front().second; \n                bfsq.pop(); \n\n                if (prev.find(t) != prev.end()) {\n                    continue; \n                }\n                prev[t] = p; \n                \n                if (t == b) {\n                    double ans = 1; \n                    string cur = b; \n                    while(cur != \"\") {\n                        \n                        ans *= graph[cur][prev[cur]]; \n                        cur = prev[cur]; \n                    }\n                    if (a != b) {\n                        graph[b][a] = ans;\n                    }\n                    return ans; \n                }\n                for (auto [var, val] : graph[t]) {\n                    bfsq.push(pss(var, t)); \n                }\n            }\n            return -1; \n        };\n        \n        vector<double> ans; ans.reserve(queries.size()); \n        for (auto v : queries) {\n            ans.push_back(eval(v[1], v[0]));\n        }\n        return ans; \n    }\n};","compare_result":"1111101101111111111111","title_slug":"evaluate-division"}