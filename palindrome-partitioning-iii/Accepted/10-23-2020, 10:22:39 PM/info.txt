{"id":412442856,"lang":"cpp","time":"1 year, 5 months","timestamp":1603506159,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/412442856/","is_pending":"Not Pending","title":"Palindrome Partitioning III","memory":"7.4 MB","code":"class Solution {\npublic:\n    typedef unsigned long long int ulli;\n    int palindromePartition(string s, int k) {\n        int n = s.length();\n        s = '#' + s;\n        vector<vector<int>> nc(n + 1, vector<int>(n + 1, -1));\n        function<int(int,int)> num_changes = [&](int i, int j) -> int {\n            if (i >= j) {\n                return 0;\n            }\n            if (nc[i][j] != -1) return nc[i][j];\n            nc[i][j] = (s[i] != s[j]) + num_changes(i + 1, j - 1);\n            return nc[i][j];\n        };\n        \n        vector<vector<ulli>> dp(k + 1, vector<ulli>(n + 1, INT_MAX));\n        \n        // dp[c][i] = minimum cost to cut s[0...i] c times.\n        dp[0][0] = 0;\n        for (int c = 1; c <= k; ++c) {\n            for (int i = c; i <= n; ++i) {\n                for (int x = c - 1; x < i; ++x) {\n                    dp[c][i] = min(dp[c][i], dp[c - 1][x] + num_changes(x + 1, i));\n                }\n            }\n        }\n        \n        // for (auto v : dp) {\n        //     for (auto i : v) {\n        //         cout << setw(2) << (i >= INT_MAX?0:i) << ' ';\n        //     }\n        //     cout << endl;\n        // }\n        return dp.back().back();\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"palindrome-partitioning-iii"}