{"id":394856830,"lang":"cpp","time":"1 year, 7 months","timestamp":1599962326,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/394856830/","is_pending":"Not Pending","title":"Redundant Connection","memory":"9.2 MB","code":"class Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        vector<int> parent(edges.size(), -1); \n        \n        function<int(int)> find = [&](int a) -> int {\n            if (parent[a] == -1) {\n                return a; \n            }\n            \n            parent[a] = find(parent[a]); \n            return parent[a]; \n        };\n        \n        \n        function<bool(int,int)> onion = [&](int a, int b) -> bool {\n            int pa = find(a); \n            int pb = find(b); \n            if (pa == pb) {\n                return false; \n            }\n            \n            parent[pa] = pb; \n            return true; \n        };\n        \n        \n        for (auto edge : edges) {\n            if (!onion(edge[0] - 1, edge[1] - 1)) {\n                return edge; \n            }\n        }\n        return vector<int>(); \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}