{"id":513205561,"lang":"cpp","time":"9 months, 3 weeks","timestamp":1624665359,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/513205561/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.9 MB","code":"class Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> parent(n + 1, -1);\n        \n        function<int(int)> find = [&](int node) -> int {\n            if (parent[node] == -1) {\n                return node;\n            } else {\n                parent[node] = find(parent[node]);\n                return parent[node];\n            }\n        };\n        \n        function<bool(int,int)> onion = [&](int a, int b) -> bool {\n            int pa = find(a);\n            int pb = find(b);\n            if (pa == pb) return false;\n            parent[pa] = pb;\n            return true;\n        };\n        \n        for (auto e : edges) {\n            if (!onion(e[0], e[1])) {\n                return e;\n            }\n        }\n        return vector<int>();\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}