{"id":443805084,"lang":"cpp","time":"1 year, 3 months","timestamp":1610830933,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/443805084/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"15 MB","code":"\nstruct Elem {\n\n    Elem(int x, int y, bool isStart): x(x), y(y), isStart(isStart) {}\n\n    friend ostream& operator<<(ostream& os, const Elem& el); \n\n    int x;\n    int y;\n    bool isStart;\n};\n\nostream& operator<<(ostream& os, const Elem& el) {\n    os << \"(\" << to_string(el.x) << \", \" << to_string(el.y) << \", \" << (el.isStart?\"S\":\"E\") << \")\"; \n    return os;\n}\n\n\nclass Solution {\npublic:\n    \n    \n    \n    \n    \n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        \n        vector<Elem> bldgs; bldgs.reserve(buildings.size() * 2);\n        for (auto v : buildings) {\n            bldgs.push_back(Elem(v[0], v[2], true));\n            bldgs.push_back(Elem(v[1], v[2], false));\n        }\n        \n        sort(bldgs.begin(), bldgs.end(), [](const Elem& a, const Elem& b) -> bool {\n            // return a.x < b.x || (a.x == b.x && a.y > b.y) || (a.x == b.x && a.y == b.y && a.isStart);    \n            \n            if (a.x < b.x) return true;\n            if (a.x > b.x) return false;\n            \n            if (a.isStart && b.isStart) {\n                return a.y > b.y; \n            } else if (!(a.isStart || b.isStart)) {\n                return a.y < b.y;\n            } else if (a.isStart && !b.isStart) {\n                return true;\n            } else {\n                return false;\n            }\n        });\n        \n        // for (auto v : bldgs) cout << v << ' ';\n        // cout << endl;\n        \n        map<int, int> ct;\n        ct[0] = 1;\n        vector<vector<int>> ans;\n        for (auto b : bldgs) {\n            if (b.isStart) {\n                if (prev(ct.end()) -> first < b.y) {\n                    ans.push_back({b.x, b.y});\n                }\n                ++ct[b.y];\n            } else {\n                if (prev(ct.end()) -> first == b.y && prev(ct.end()) -> second == 1) {\n                    ans.push_back({b.x, prev(prev(ct.end())) -> first}); \n                }\n                --ct[b.y];\n                if (ct[b.y] == 0) {\n                    ct.erase(b.y);\n                }\n            }\n        }\n        \n        return ans;\n    }\n};\n\n\n","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem"}