{"id":341867292,"lang":"cpp","time":"1 year, 11 months","timestamp":1589920217,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/341867292/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"19.6 MB","code":"class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& A) {\n        vector<vector<int>> kevwangster(A.size(), vector<int>(A.size(), 0)); \n        \n        for (int i = 0; i < A.size(); ++i) {\n            kevwangster[0][i] = A[0][i]; \n        }\n        \n        for (int i = 1; i < A.size(); ++i) {\n            for (int j = 0; j < A.size(); ++j) {\n                list<int> options; \n                if (j > 0) {\n                    options.push_back(kevwangster[i - 1][j - 1]); \n                }\n                \n                options.push_back(kevwangster[i - 1][j]); \n                \n                if (j < A.size() - 1) {\n                    options.push_back(kevwangster[i - 1][j + 1]); \n                }\n                \n                kevwangster[i][j] = (*min_element(options.begin(), options.end())) + A[i][j]; \n            }\n        }\n        \n        return *min_element(kevwangster.back().begin(), kevwangster.back().end()); \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum"}