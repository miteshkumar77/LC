{"id":511806190,"lang":"cpp","time":"10Â months","timestamp":1624403338,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/511806190/","is_pending":"Not Pending","title":"Number of Matching Subsequences","memory":"N/A","code":"class Solution {\npublic:\n    struct TN {\n        TN() : letters(26, nullptr) {}\n        int words{0};\n        vector<TN*> letters;\n        unordered_map<int,int> dp;\n    };\n    \n    void insert(TN* root, string const& word) {\n        for (char c : word) {\n            if (!(root->letters)[c-'a']) {\n                (root->letters)[c-'a'] = new TN();\n            }\n            root = (root->letters)[c-'a'];\n        }\n        ++(root->words);\n    }\n    \n    int bt(string const& s, TN* head, int idx) {\n        if (!head) return 0;\n        if (idx == s.length()) return 0;\n        if ((head->dp).count(idx)) return (head->dp)[idx];\n        (head->dp)[idx] = head->words + bt(s, head, idx+1) + bt(s, (head->letters)[s[idx]-'a'], idx+1);\n        return (head->dp)[idx];\n    }\n    \n    int numMatchingSubseq(string s, vector<string>& words) {\n        /*TN* head = new TN();\n        for (string const& w : words) insert(head, w);\n        return bt(s, head, 0);*/\n        int n = s.length();\n        vector<vector<int>> dp(n+1, vector<int>(26, INT_MAX));\n        for (int i = n-1; i >= 0; --i) {\n            for (int j = 0; j < 26; ++j) {\n                if (s[i]-'a' == j) {\n                    dp[i][j] = i;\n                } else {\n                    dp[i][j] = dp[i+1][j];\n                }\n            }\n        }\n        int ans = 0;   \n        int si;\n        for (string const& w : words) {\n            si = 0;\n            bool ok = true;\n            for (char c : w) {\n                if (dp[si][c-'a'] == INT_MAX) {\n                    ok = false;\n                    break;\n                }\n                si = dp[si][c-'a'];\n            }\n            ans += ok;\n        }\n        return ans;\n    }\n};","compare_result":"0111111111100011010111111111111111111111111111111111","title_slug":"number-of-matching-subsequences"}