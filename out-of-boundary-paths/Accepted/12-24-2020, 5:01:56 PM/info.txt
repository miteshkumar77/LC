{"id":434199052,"lang":"cpp","time":"1 year, 3 months","timestamp":1608847316,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/434199052/","is_pending":"Not Pending","title":"Out of Boundary Paths","memory":"9.7 MB","code":"class Solution {\npublic:\n    \n    static inline bool checkOut(int m, int n, int i, int j) {\n        return i < 0 || j < 0 || i >= m || j >= n;\n    }\n    \n    int findPaths(int m, int n, int N, int i, int j) {\n        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(N + 1, -1)));\n        int M = 1e9 + 7;\n        array<int, 5> dirs{0, 1, 0, -1, 0};\n        \n        \n        function<int(int,int,int)> sol = [&](int ii, int jj, int NN) -> int{\n            if (checkOut(m, n, ii, jj)) {\n                return 1;\n            }\n            if (NN == 0) {\n                return 0;\n            }\n            \n            if (dp[ii][jj][NN] != -1) {\n                return dp[ii][jj][NN];\n            }\n            int ans = 0;\n            for (int x = 0; x < 4; ++x) {\n                ans = (ans + sol(ii + dirs[x], jj + dirs[x + 1], NN - 1)) % M; \n            }\n            dp[ii][jj][NN] = ans;\n            return ans;\n        };\n        \n        return sol(i, j, N);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"out-of-boundary-paths"}