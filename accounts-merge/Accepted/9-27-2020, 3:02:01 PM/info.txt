{"id":401485946,"lang":"cpp","time":"1 year, 6 months","timestamp":1601233321,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/401485946/","is_pending":"Not Pending","title":"Accounts Merge","memory":"63.6 MB","code":"class Solution {\npublic:\n    \n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\n        unordered_map<string, unordered_set<string>> graph;\n        for (auto acct : accounts) {\n            for (int i = 2; i < acct.size(); ++i) {\n                graph[acct[i]].insert(acct[i - 1]);\n                graph[acct[i - 1]].insert(acct[i]);\n            }\n        }\n        \n        unordered_set<string> visited; \n\n        function<set<string>(string)> getAll = [&](string e1) -> set<string> {\n            \n            queue<string> q; \n            q.push(e1); \n            set<string> ret; \n            \n            while(!q.empty()) {\n                string top = q.front(); q.pop(); \n                if (visited.find(top) != visited.end()) {\n                    continue;\n                }\n                visited.insert(top);\n                ret.insert(top);\n                for (string neighbor : graph[top]) {\n                    q.push(neighbor);\n                }\n            }\n            return ret;\n            \n        };\n        \n        vector<vector<string>> ans;\n        for (auto v : accounts) {\n            if (v.size() == 1) {\n                // ans.push_back(v);\n                continue;\n            } else if (visited.find(v[1]) == visited.end()) {\n                set<string> accts = getAll(v[1]);\n                vector<string> tmp{v[0]};\n                for (auto s : accts) {\n                    tmp.push_back(s);\n                }\n                ans.push_back(tmp);\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"accounts-merge"}