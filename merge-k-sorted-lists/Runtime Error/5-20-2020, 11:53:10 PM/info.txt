{"id":342471507,"lang":"cpp","time":"1 year, 11 months","timestamp":1590033190,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/342471507/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        return helper(lists, 0, lists.size() - 1); \n    }\n    \n    ListNode* helper(vector<ListNode*>& lists, int L, int R) {\n        if (L == R) {\n            return lists[L]; \n        }\n        \n        int mid = (R - L)/2 + L; \n        ListNode* tL = helper(lists, L, mid); \n        ListNode* tR = helper(lists, mid + 1, R); \n        return mergeTwoLists(tL, tR); \n    }\n    \n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (!l1) {\n            return l2; \n        } else if (!l2) {\n            return l1; \n        }\n        ListNode* head = l1; \n        ListNode* prev1 = nullptr; \n        ListNode* next2 = (l2)?(l2 -> next):(nullptr); \n        while(l2) {\n            if (l1 && l2) {\n                if (l1 -> val >= l2 -> val) {\n                    if (prev1) {\n                        prev1 -> next = l2; \n                    } else {\n                        head = l2; \n                    }\n                    prev1 = l2; \n                    l2 -> next = l1; \n                    l2 = next2; \n                    if (next2) {\n                        next2 = l2 -> next; \n                    }\n                } else {\n                    prev1 = l1; \n                    l1 = l1 -> next;\n                }\n            }\n            \n            if (!l1) {\n                prev1 -> next = l2; \n                break;\n            }\n        }\n        \n        return head; \n    }\n    \n};","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"merge-k-sorted-lists"}