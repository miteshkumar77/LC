{"id":447260543,"lang":"cpp","time":"1 year, 2 months","timestamp":1611511468,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/447260543/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* merge(ListNode* l1, ListNode* l2) {\n        ListNode* head = nullptr;\n        ListNode* curr = nullptr;\n        while(l1 || l2) {\n            if (!l2 || (l1 && l1 -> val <= l2 -> val)) {\n                if (curr) curr -> next = l1;\n                curr = l1;\n                l1 = l1 -> next;\n            } else {\n                if (curr) curr -> next = l2;\n                curr = l2;\n                l2 = l2 -> next;\n            }\n            curr -> next = nullptr;\n            if (!head) head = curr;\n        }\n        return head;\n    }\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        int e = lists.size() - 1;\n        \n        int latest; \n        \n        while(e > 0) {\n            latest = 0;\n            for (int i = 0; i + 1 <= e; i += 2) {\n                lists[i] = merge(lists[i], lists[i + 1]); \n            }\n\n            for (int i = 0; i <= e; i += 2) {\n                swap(lists[i], lists[i/2]);\n                latest = max(latest, i/2); \n            }\n            e = latest;\n        }\n        return lists[0];\n    }\n};","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"merge-k-sorted-lists"}