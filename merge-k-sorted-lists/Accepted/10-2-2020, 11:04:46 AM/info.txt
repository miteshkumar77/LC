{"id":403549776,"lang":"cpp","time":"1 year, 6 months","timestamp":1601651086,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/403549776/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    ListNode* merge(ListNode* l1, ListNode* l2) {\n        ListNode* res = nullptr;\n        ListNode* n = nullptr;\n        while(l1 || l2) {\n            ListNode* nxt = nullptr;\n            if (l1 && (!l2 || l1 -> val <= l2 -> val)) {\n                nxt = l1;\n                l1 = l1 -> next;\n            } else {\n                nxt = l2;\n                l2 = l2 -> next;\n            }\n            if (n) {\n                n -> next = nxt;\n            } else {\n                res = nxt;\n            }\n            n = nxt;\n        }\n        return res;\n    }\n    \n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        function<ListNode*(int,int)> mergeUtil = [&](int i, int j) -> ListNode* {\n            if (i == j) {\n                return lists[i];\n            }\n            if (i > j) {\n                return nullptr;\n            }\n            \n            int mid = i + (j - i)/2;\n            return merge(mergeUtil(i, mid), mergeUtil(mid + 1, j));\n        };\n        return mergeUtil(0, lists.size() - 1);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}