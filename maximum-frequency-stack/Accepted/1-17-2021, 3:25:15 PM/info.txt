{"id":444240779,"lang":"cpp","time":"1 year, 3 months","timestamp":1610915115,"status_display":"Accepted","runtime":"264 ms","url":"/submissions/detail/444240779/","is_pending":"Not Pending","title":"Maximum Frequency Stack","memory":"79.9 MB","code":"class FreqStack {\npublic:\n    FreqStack() {\n        \n    }\n    \n    void push(int x) {\n        ++freq[x];\n        lvl[freq[x]].push_back(x);\n        if (freqval.empty() || freq[x] > freqval.top()) {\n            freqval.push(freq[x]);\n        }\n    }\n    \n    int pop() {\n        int ret = lvl[freqval.top()].back();\n        lvl[freqval.top()].pop_back();\n        --freq[ret];\n        if (lvl[freqval.top()].size() == 0) {\n            freqval.pop();\n        }\n        return ret;\n    }\n    \nprivate:\n    stack<int> freqval;\n    unordered_map<int, vector<int>> lvl;\n    unordered_map<int, int> freq;\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack* obj = new FreqStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n */","compare_result":"1111111111111111111111111111111111111","title_slug":"maximum-frequency-stack"}