{"id":417297576,"lang":"cpp","time":"1 year, 5 months","timestamp":1604637662,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/417297576/","is_pending":"Not Pending","title":"Leftmost Column with at Least a One","memory":"8.5 MB","code":"/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *   public:\n *     int get(int row, int col);\n *     vector<int> dimensions();\n * };\n */\n\n/*\n\n[[1,1,1,1,1],\n [0,0,0,1,1],\n [0,0,1,1,1],\n [0,0,0,0,1],\n [0,0,0,0,0]]\n\n*/\n\nclass Solution {\npublic:\n    int leftMostColumnWithOne(BinaryMatrix &bm) {\n        vector<int> vec = bm.dimensions(); \n        \n        int height = vec[0];\n        int width  = vec[1];\n        \n        int l = 0;\n        int r = width - 1;\n        function<bool(int)> check = [&](int col) -> bool {\n            for (int i = 0; i < height; ++i) {\n                if (bm.get(i, col) == 1) {\n                    return true;\n                }\n            }    \n            \n            return false;\n        };\n        \n        int ans = -1;\n        int mid;\n        while(l <= r) {\n            mid = l + (r - l)/2;\n            if (check(mid)) {\n                ans = mid;\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"leftmost-column-with-at-least-a-one"}