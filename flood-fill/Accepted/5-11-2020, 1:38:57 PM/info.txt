{"id":337885707,"lang":"cpp","time":"1 year, 11 months","timestamp":1589218737,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/337885707/","is_pending":"Not Pending","title":"Flood Fill","memory":"14.1 MB","code":"class Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\n        \n        array<array<int, 2>, 4> dirs = {array<int, 2>{0, 1}, array<int, 2>{1, 0}, array<int, 2>{0, -1}, array<int, 2>{-1, 0}}; \n        if (image[sr][sc] == newColor) {\n            return image; \n        }\n        \n        queue<array<int, 2> > bfsq; \n        \n        int start_image = image[sr][sc]; \n        image[sr][sc] = newColor; \n        bfsq.push(array<int, 2>{sr, sc}); \n        while(!bfsq.empty()) {\n            array<int, 2> top = bfsq.front(); \n            bfsq.pop(); \n            for (array<int, 2> a : dirs) {\n                array<int, 2> n = {top[0] + a[0], top[1] + a[1]}; \n                if (n[0] >= 0 && n[0] < image.size() && \n                    n[1] >= 0 && n[1] < image[0].size() && image[n[0]][n[1]] == start_image) {\n                    image[n[0]][n[1]] = newColor; \n                    bfsq.push(n);\n                    // cout << n[0] << ' ' << n[1] << \"if\" << endl; \n                } else {\n                    // cout << n[0] << ' ' << n[1] << endl; \n                }\n            }\n        }\n        \n        return image; \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill"}