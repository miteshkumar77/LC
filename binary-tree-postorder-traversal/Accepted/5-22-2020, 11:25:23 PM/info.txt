{"id":343327457,"lang":"cpp","time":"1 year, 11 months","timestamp":1590204323,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/343327457/","is_pending":"Not Pending","title":"Binary Tree Postorder Traversal","memory":"40.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n         \n        stack<TreeNode*> stak; \n        vector<int> res; res.reserve(1000000);\n        TreeNode* lastVisited = nullptr; \n        while(!stak.empty() || root) {\n            if (root) {\n                stak.push(root); \n                root = root -> left; \n            } else {\n                TreeNode* tmp = stak.top(); \n                if (tmp -> right && (!lastVisited || lastVisited != tmp -> right)) {\n                    root = tmp -> right; \n                } else {\n                    res.push_back(tmp -> val); \n                    lastVisited = stak.top(); \n                    stak.pop(); \n                }\n            }\n        }\n        \n        return res; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-postorder-traversal"}