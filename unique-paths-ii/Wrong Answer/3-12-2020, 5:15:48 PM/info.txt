{"id":311893895,"lang":"cpp","time":"2 years, 1 month","timestamp":1584047748,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/311893895/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"#include <queue> \n#include <vector>\n#include <utility>\n\nusing namespace std; \nclass Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        if (obstacleGrid.size() == 0 || (obstacleGrid.size() == 1 && obstacleGrid[0].size() == 1 && obstacleGrid[0][0] == 1)) {\n            return 0;\n        }\n        if (obstacleGrid.back().back() == 1) {\n            return 0; \n        }\n        obstacleGrid[0][0] = 1; \n        helper(obstacleGrid); \n        return obstacleGrid.back().back(); \n    }\n    \n    void helper(vector<vector<int> >& grid) {\n        queue<pair<int, int> > q = queue<pair<int, int> >(); \n        q.push(make_pair(0, 0)); \n        \n        while (!q.empty()) {\n            pair<int, int> tmp = q.front(); \n            q.pop();\n            if (tmp.first + 1 < grid.size() && tmp.second < grid[0].size()) {\n                if (grid[tmp.first + 1][tmp.second] == 0) {\n                    q.push(make_pair(tmp.first + 1, tmp.second)); \n                }\n                grid[tmp.first + 1][tmp.second] += grid[tmp.first][tmp.second]; \n                \n            }\n            if (tmp.first < grid.size() && tmp.second + 1 < grid[0].size()) {\n                if (grid[tmp.first][tmp.second + 1] == 0) {\n                    q.push(make_pair(tmp.first, tmp.second + 1)); \n                }\n                grid[tmp.first][tmp.second + 1] += grid[tmp.first][tmp.second]; \n            }\n        }\n        \n    }\n};","compare_result":"1111101110111111011111111100000000000000000","title_slug":"unique-paths-ii"}