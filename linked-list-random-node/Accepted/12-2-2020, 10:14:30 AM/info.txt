{"id":426450696,"lang":"cpp","time":"1Â year, 4Â months","timestamp":1606922070,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/426450696/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"16.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    Solution(ListNode* head) {\n        len = 0;\n        root = head;\n        while(head) {\n            ++len;\n            head = head -> next;\n        }\n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n        int r = rand() % len;\n        ListNode* head = root;\n        while(r != 0) {\n            --r;\n            head = head -> next;\n        }\n        return head -> val;\n    }\nprivate:\n    int len;\n    ListNode* root;\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"1111111","title_slug":"linked-list-random-node"}