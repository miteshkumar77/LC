{"id":429917481,"lang":"cpp","time":"1 year, 4 months","timestamp":1607795180,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/429917481/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* subtreeWithAllDeepest(TreeNode* root) {\n        int mdepth = 0;\n        \n        function<void(TreeNode*,int)> gd = [&](TreeNode* t, int d) -> void {\n            if (!t) return;\n            \n            mdepth = max(mdepth, d);\n            gd(t->left, d+1);\n            gd(t->right, d+1);\n        };\n        \n        gd(root, 0);\n        \n        TreeNode* ans = nullptr;\n        \n        function<int(TreeNode*,int)> a = [&](TreeNode* t, int d) -> int {\n            if (!t) return -1;\n            int al = a(t->left,d+1);\n            int ar = a(t->right,d+1);\n            \n            if (al == mdepth && ar == mdepth) {\n                ans = t;\n            }\n            \n            return max(al, max(ar, d));\n        };\n        a(root, 0);\n        return ans;\n    }\n};","compare_result":"1000100000001000001111100000000000100000000000011010101010","title_slug":"smallest-subtree-with-all-the-deepest-nodes"}