{"id":445988552,"lang":"cpp","time":"1 year, 2 months","timestamp":1611253650,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/445988552/","is_pending":"Not Pending","title":"Maximum Height by Stacking Cuboids ","memory":"N/A","code":"class Solution {\npublic:\n    int maxHeight(vector<vector<int>>& cuboids) {\n        int n = cuboids.size();\n        for (auto& v : cuboids) {\n            sort(v.begin(), v.end());\n        }\n        \n        sort(cuboids.begin(), cuboids.end(), [](const vector<int>& a, const vector<int>& b) -> bool {\n            for (int i = 2; i >= 0; --i) {\n                if (a[i] > b[i]) {\n                    return true;\n                } else if (a[0] < b[0]) {\n                    return false;\n                }\n            }\n            return true;\n        }); \n        \n        for (auto v : cuboids) {\n            cout << \"[\" << v[0] << \",\" << v[1] << \",\" << v[2] << \"]\" << \",\";    \n        }cout << endl;\n        \n        int ans = 0;\n        vector<vector<int>> dp(n, vector<int>(3, 0));\n        for (int i = 0; i < n; ++i) {\n            auto ci = cuboids[i];\n            for (int hi = 0; hi < 3; ++hi) {\n                dp[i][hi] = ci[hi];\n                ans = max(ans, dp[i][hi]);\n            }\n            for (int j = 0; j < i; ++j) {\n                auto cj = cuboids[j];\n                \n                for (int hi = 0; hi < 3; ++hi) {\n                    for (int hj = 0; hj < 3; ++hj) {\n                        \n                        if (ci[hi] <= cj[hj]) {\n                            if (min(ci[(hi + 1) % 3], ci[(hi + 2) % 3]) <= min(cj[(hj + 1) % 3], cj[(hj + 2) % 3]) &&\n                                max(ci[(hi + 1) % 3], ci[(hi + 2) % 3]) <= max(cj[(hj + 1) % 3], cj[(hj + 2) % 3])) {\n                                dp[i][hi] = max(dp[i][hi], dp[j][hj] + ci[hi]); \n                                ans = max(ans, dp[i][hi]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        for (auto v : dp) {\n            cout << \"[\" << v[0] << \",\" << v[1] << \",\" << v[2] << \"]\" << \",\";    \n        }cout << endl;\n        \n        return ans;\n\n    }\n};","compare_result":"11111111111111101110100000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-height-by-stacking-cuboids"}