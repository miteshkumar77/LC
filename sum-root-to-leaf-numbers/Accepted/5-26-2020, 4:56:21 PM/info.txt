{"id":345103005,"lang":"cpp","time":"1Â year, 10Â months","timestamp":1590526581,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/345103005/","is_pending":"Not Pending","title":"Sum Root to Leaf Numbers","memory":"12.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        if (!root) {\n            return 0; \n        }\n        if (root -> val == 0) {\n            return sumNumbers(root -> left) + sumNumbers(root -> right); \n        }\n        \n        int ans = 0; \n        helper(root, ans); \n        return ans; \n    }\n    \n    \n    list<unsigned long long int> helper(TreeNode* root, int& ans) {\n        if (!root -> left && !root -> right) {\n            ans += root -> val; \n            return list<unsigned long long int>{10}; \n        }\n        \n        list <unsigned long long int> result; \n        if (root -> left) {\n            list<unsigned long long int> left_result = helper(root -> left, ans); \n            result.splice(result.end(), left_result);\n        }\n        \n        if (root -> right) {\n            list<unsigned long long int> right_result = helper(root -> right, ans); \n            result.splice(result.end(), right_result); \n        }\n        \n        for (auto iter = result.begin(); iter != result.end(); ++iter) {\n            ans += (*iter) * (root -> val); \n            (*iter)*= 10; \n        }\n        \n        return result; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-root-to-leaf-numbers"}