{"id":446072241,"lang":"cpp","time":"1 year, 2 months","timestamp":1611270447,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/446072241/","is_pending":"Not Pending","title":"Expression Add Operators","memory":"N/A","code":"class Solution {\npublic:\n    \n    typedef signed long long int slli;\n    array<string, 3> ops{\"+\", \"-\", \"*\"}; \n    slli eval(string exp) {\n        vector<string> stk;\n        bool mult = false;\n        for (char c : exp) {\n            if (c >= '0' && c <= '9') {\n                slli curr_num = c - '0'; \n                if (mult) {\n                    stk.back() = to_string(stoll(stk.back()) * curr_num); \n                } else {\n                    stk.push_back(to_string(curr_num)); \n                }\n                mult = false;\n            } else {\n                if (c == '*') {\n                    mult = true;\n                } else {\n                    stk.push_back(c == '-'?\"-\":\"+\"); \n                }\n            }\n        }\n        \n        bool add = true;\n        slli result = 0;\n        for (int i = 0; i < stk.size(); i += 2) {\n            if (add) {\n                result += stoll(stk[i]); \n            } else {\n                result -= stoll(stk[i]); \n            }\n            if (i != stk.size() - 1) {\n                add = stk[i+1] == \"+\";\n            }\n        }\n        return result;\n    }\n    \n    void bt(string box, vector<string>& ans, const string& nums, slli target, slli i) {\n        if (i == nums.size()) {\n            if (eval(box) == target) {\n                ans.push_back(box); \n            }\n            return;\n        }\n        \n        for (string op : ops) {\n            bt(box + op + to_string(nums[i] - '0'), ans, nums, target, i + 1); \n        }\n    }\n    \n    vector<string> addOperators(string num, slli target) {\n        string box;\n        box.push_back(num[0]);\n        \n        vector<string> ans;\n        bt(box, ans, num, target, 1); \n        return ans;\n    }\n};","compare_result":"11010000000000000000","title_slug":"expression-add-operators"}