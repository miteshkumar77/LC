{"id":512281134,"lang":"cpp","time":"9 months, 4 weeks","timestamp":1624488347,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/512281134/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"7.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverse(ListNode* l, ListNode * h) {\n        ListNode* tmp;\n        while(l) {\n            tmp = l -> next;\n            l -> next = h;\n            h = l;\n            l = tmp;\n        }\n        return  h;\n    }\n    \n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        ListNode* h = head;\n        ListNode* n = nullptr;\n        ListNode* r = nullptr;\n        for (int i = 1; i <= right; ++i) {\n            if (i + 1 == left) {\n                n = h;\n            }\n            if (i == right) {\n                r = h;\n            }\n            h = h -> next;\n        }\n        // cout << n -> val << ' ' << r -> val << endl;\n        auto tmp = r -> next;\n        r -> next = nullptr;\n        auto nh = reverse(n ? n->next : head, tmp);\n        if (n) {\n            n -> next = nh;\n            return head;\n        } else {\n            return nh;\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii"}