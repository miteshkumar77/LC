{"id":671701988,"lang":"cpp","time":"2 weeks, 3 days","timestamp":1648829905,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/671701988/","is_pending":"Not Pending","title":"Brace Expansion","memory":"10.7 MB","code":"class Solution {\npublic:\n    pair<vector<string>, int> expand(string const& exp, int s) {\n        vector<vector<string>> ret{{\"\"}};\n        for (int i = s; i <= exp.length(); ++i) {\n           if (i == exp.length() || exp[i] == '}') {\n                vector<string> comb;\n                for (auto & v : ret) {\n                    for (auto & pref : v) {\n                        comb.push_back(pref);\n                    }\n                }\n                return {comb, i};\n            } else if (exp[i] <= 'z' && exp[i] >= 'a') {\n                for (string& pref : ret.back()) {\n                    pref.push_back(exp[i]);\n                }\n            } else if (exp[i] == ',') {\n                ret.push_back({\"\"});\n            } else if (exp[i] == '{') {\n                auto [rcomb, rs] = expand(exp, i+1);\n                i = rs;\n                vector<string> nb;\n                for (auto fir : ret.back()) {\n                    for (auto sec : rcomb) {\n                        nb.push_back(fir + sec);\n                    }\n                }\n                ret.back() = nb;\n            }\n        }\n        return {vector<string>(), 0};\n    }\n    \n    vector<string> expand(string expression) {\n        auto tmp = expand(expression, 0).first;\n        auto tmp2 = set<string>(tmp.begin(), tmp.end());\n        return vector<string>(tmp2.begin(), tmp2.end());\n    } \n    \n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"brace-expansion"}