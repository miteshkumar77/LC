{"id":382822640,"lang":"cpp","time":"1 year, 8 months","timestamp":1597776246,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/382822640/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue {\npublic:\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    MyCircularQueue(int k) {\n        buf = vector<int>(k);\n        head = 0; \n        tail = 0; \n        flag_full = false; \n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    bool enQueue(int value) {\n        if (flag_full) {\n            return false; \n        } else {\n            buf[head++] = value; \n            head = head % buf.size(); \n            if (head == tail) {\n                flag_full = true; \n            }\n            return true; \n        }\n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    bool deQueue() {\n        if (!flag_full && tail == head) {\n            return false; \n        }\n        \n        ++tail;\n        tail = tail % buf.size();\n        flag_full = false; \n        return true; \n        \n    }\n    \n    /** Get the front item from the queue. */\n    int Rear() {\n        if (head == 0) {\n            return buf.back(); \n        } else {\n            return buf[head - 1]; \n        }\n    }\n    \n    /** Get the last item from the queue. */\n    int Front() {\n        return buf[tail]; \n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    bool isEmpty() {\n        return !flag_full && head == tail; \n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    bool isFull() {\n        return flag_full; \n    }\n    \nprivate: \n    \n    vector<int> buf;\n    int head; \n    int tail; \n    bool flag_full; \n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"1010101111111101001110111111111110111111100101111101","title_slug":"design-circular-queue"}