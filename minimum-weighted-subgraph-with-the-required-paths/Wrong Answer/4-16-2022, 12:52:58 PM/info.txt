{"id":681597723,"lang":"cpp","time":"2 days, 6 hours","timestamp":1650127978,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/681597723/","is_pending":"Not Pending","title":"Minimum Weighted Subgraph With the Required Paths","memory":"N/A","code":"class Solution {\npublic:\n    \n    using ll = long long;\n    \n    void label_dist(vector<unordered_map<int,ll>>& graph, vector<ll>& d, int src) {\n        priority_queue<array<ll,2>, vector<array<ll,2>>, greater<array<ll, 2>>> pq;\n        pq.push({0, src});\n        while(!pq.empty()) {\n            auto [dist, node] = pq.top(); pq.pop();\n            if (d[node] <= dist)\n                continue;\n            d[node] = dist;\n            for (auto [neighbor, weight] : graph[node])\n                pq.push({weight + dist, neighbor});\n        }\n    }\n    \n    long long minimumWeight(int n, vector<vector<int>>& edges, int src1, int src2, int dest) {\n        vector<unordered_map<int,ll>> graph(n);\n        vector<unordered_map<int,ll>> rgraph(n);\n        for (auto& e : edges) {\n            graph[e[0]][e[1]] = e[2];\n            rgraph[e[1]][e[0]] = e[2];\n        }\n        vector<ll> ds1(n, INT_MAX);\n        vector<ll> ds2(n, INT_MAX);\n        vector<ll> dd (n, INT_MAX);\n        \n        label_dist(graph, ds1, src1);\n        label_dist(graph, ds2, src2);\n        label_dist(rgraph, dd, dest);\n        long long ans{LLONG_MAX};\n        for (int i = 0; i < n; ++i) {\n            if (ds1[i] != INT_MAX && ds2[i] != INT_MAX && dd[i] != INT_MAX)\n                ans = min(ans, ds1[i] + ds2[i] + dd[i]);\n        }\n        return ans == LLONG_MAX ? -1 : ans;\n        \n    }\n};","compare_result":"11110100111111111111111111111111111111111111111111111111111111111111101111110111111110","title_slug":"minimum-weighted-subgraph-with-the-required-paths"}