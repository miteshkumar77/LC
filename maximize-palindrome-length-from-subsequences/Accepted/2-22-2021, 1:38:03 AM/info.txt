{"id":459144797,"lang":"cpp","time":"1 year, 1 month","timestamp":1613975883,"status_display":"Accepted","runtime":"296 ms","url":"/submissions/detail/459144797/","is_pending":"Not Pending","title":"Maximize Palindrome Length From Subsequences","memory":"70.6 MB","code":"class Solution {\npublic:\n    \n    int sol(vector<vector<int>>& dp, int l, int r, const string& w) {\n        if (l == r) return 1;\n        if (r < l) return 0;\n        \n        if (dp[l][r] != -1) return dp[l][r];\n        \n        if (w[l] == w[r]) {\n            dp[l][r] = sol(dp, l + 1, r - 1, w) + 2;\n        }\n        dp[l][r] = max(dp[l][r], max(sol(dp, l + 1, r, w), sol(dp, l, r - 1, w))); \n        return dp[l][r];\n    }\n    int longestPalindrome(string word1, string word2) {\n        int n = word1.size();\n        int m = word2.size(); \n        \n        string total = word1 + word2;\n        vector<vector<int>> dp(n + m, vector<int>(n + m, -1)); \n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (word1[i] == word2[j]) {\n                    ans = max(ans, 2 + sol(dp, i + 1, j + n - 1, total)); \n                }\n            }\n        }\n        return ans;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-palindrome-length-from-subsequences"}