{"id":459139431,"lang":"cpp","time":"1 year, 1 month","timestamp":1613974920,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/459139431/","is_pending":"Not Pending","title":"Maximize Palindrome Length From Subsequences","memory":"N/A","code":"class Solution {\npublic:\n    \n    int sol(vector<vector<int>>& dp, const string& w1, const string& w2, int i, int j, int n, int m) {\n        if (i == n && j == -1) {\n            return 0;\n        }\n        if (i == n || j == -1) {\n            return 1;\n        }\n        if (dp[i][j] != -1) {\n            return dp[i][j];\n        }\n        dp[i][j] = 1;\n        if (w1[i] == w2[j]) {\n            dp[i][j] = sol(dp, w1, w2, i + 1, j - 1, n, m) + 2;\n        }\n        dp[i][j] = max(dp[i][j], max(sol(dp, w1, w2, i + 1, j, n, m), sol(dp, w1, w2, i, j - 1, n, m))); \n        // cout << w1[i] << ' ' << w2[j] << ' ' << dp[i][j] << endl;\n        return dp[i][j];\n    }\n    int longestPalindrome(string word1, string word2) {\n        int n = word1.size();\n        int m = word2.size(); \n        vector<vector<int>> dp(n, vector<int>(m, -1)); \n        int a = sol(dp, word1, word2, 0, m - 1, n, m); \n        if (a == 1) return 0;\n        return a;\n        \n    }\n};","compare_result":"111111111111111100000111000100001001000100001000000000000000000000000100001000000000000000000001001111110000","title_slug":"maximize-palindrome-length-from-subsequences"}