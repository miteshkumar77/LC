{"id":439968949,"lang":"cpp","time":"1 year, 3 months","timestamp":1610054819,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/439968949/","is_pending":"Not Pending","title":"Pizza With 3n Slices","memory":"N/A","code":"class Solution {\npublic:\n    int maxSizeSlices(vector<int>& slices) {\n        int ans = 0;\n        for (int i = 0; i < slices.size(); ++i) {\n            slices.insert(slices.begin(), slices.back());\n            slices.pop_back();\n            \n            ans = max(ans, solveOne(slices));\n        }\n        return ans;\n    }\n    \n    int solveOne(vector<int>& slices) {\n        int n = slices.size(); \n        vector<vector<int>> dp(n, vector<int>(n, -1));\n        \n        function<int(int,int)> dfs = [&](int l, int r) -> int {\n            // cout << l << ' ' << r << endl;\n            if (l > r) return 0;\n            if ((r - l + 1) % 3 != 0) return INT_MIN;\n            if (dp[l][r] != -1) return dp[l][r];\n            int ans = INT_MIN;\n            for (int i = l + 1; i < r; ++i) {\n                int lres = dfs(l + 1, i - 1);\n                int rres = dfs(i + 1, r - 1);\n                if (lres >= 0 && rres >= 0) {\n                    ans = max(ans, lres + rres + slices[i]);\n                }\n            }\n            dp[l][r] = ans;\n            return dp[l][r];\n        };\n        \n        return dfs(0, n - 1);\n    }\n};","compare_result":"111100100111100011111010101010001001111000010000000000000000000000000","title_slug":"pizza-with-3n-slices"}