{"id":376600549,"lang":"cpp","time":"1 year, 8 months","timestamp":1596654367,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/376600549/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        array<int, 5> dirs{0, 1, 0, -1, 0}; \n        int M = matrix.size(); \n        int N = matrix[0].size(); \n        \n        vector<vector<bool> > visited(M, vector<bool>(N, false)); \n        \n        \n        array<int, 2> pos = {0, 0}; \n        int x = 0;\n        vector<int> ans; ans.reserve(M * N); \n        for (int i = 0; i < M * N; ++i) {\n            \n            array<int, 2> npos {pos[0] + dirs[x], pos[1] + dirs[x + 1]}; \n            if (npos[0] >= M || npos[0] < 0 || npos[1] >= N || npos[1] < 0 || visited[npos[0]][npos[1]]) {\n                \n                x += 1; \n                x = x % 4; \n            } \n                ans.push_back(matrix[pos[0]][pos[1]]); \n            \n            visited[pos[0]][pos[1]] = true; \n            pos[0] += dirs[x]; \n            pos[1] += dirs[x + 1]; \n            \n        }\n        return ans; \n        \n    }\n};","compare_result":"1100000000000000000000","title_slug":"spiral-matrix"}