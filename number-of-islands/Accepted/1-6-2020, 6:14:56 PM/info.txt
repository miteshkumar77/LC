{"id":291855067,"lang":"python","time":"2 years, 3 months","timestamp":1578352496,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/291855067/","is_pending":"Not Pending","title":"Number of Islands","memory":"18.9 MB","code":"class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if len(grid) == 0:\n            return 0\n\n        lands = []\n        ans = 0\n        R, C = len(grid), len(grid[0])\n\n        for row in range(R):\n            for col in range(C):\n                grid[row][col] = int(grid[row][col])\n\n        for row in range(R):\n            for col in range(C):\n                if grid[row][col] == 1:\n                    lands.append([row, col])\n\n        if len(lands) == 0:\n            return 0\n\n        from collections import deque\n        directions = [[1, 0],\n                      [0, 1],\n                      [0, -1],\n                      [-1, 0]]\n\n        def is_valid(x, y):\n            return (0 <= x < R) and (0 <= y < C) and grid[x][y]==1\n\n        def bfs(x, y):\n\n            q = deque()\n            q.append([x, y])\n\n            while q:\n                x, y = q.popleft()\n\n                for d in directions:\n                    new_x, new_y = x + d[0], y + d[1]\n                    if is_valid(new_x, new_y):\n                        grid[new_x][new_y] = 0\n                        q.append([new_x, new_y])\n\n\n        visited = set()\n        for x, y in lands:\n            land_name = str(x) + \"_\" + str(y)\n\n            if land_name not in visited and grid[x][y] == 1:\n                visited.add(land_name)\n                bfs(x, y)\n                ans += 1\n\n        return ans\n\n# class Solution(object):\n#     def numIslands(self, matrix):\n#         result = 0\n#         for i in range(len(matrix)):\n#             for j in range(len(matrix[i])):\n#                 if matrix[i][j] == \"1\":\n#                     self.returnSize(matrix, i, j)\n#                     result += 1\n\n#         return result\n\n\t\n#     def returnSize(self, matrix, i, j):\n        \n#         if 0 <= i < len(matrix) and 0 <= j < len(matrix[0]) and matrix[i][j] == \"1\":\n            \n#             matrix[i][j] = \"0\"\n            \n#             self.returnSize(matrix, i - 1, j)\n#             self.returnSize(matrix, i + 1, j)\n#             self.returnSize(matrix, i, j + 1)\n#             self.returnSize(matrix, i, j - 1)\n\n","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"number-of-islands"}