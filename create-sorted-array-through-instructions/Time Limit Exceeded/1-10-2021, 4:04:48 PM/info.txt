{"id":441285004,"lang":"cpp","time":"1 year, 3 months","timestamp":1610312688,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/441285004/","is_pending":"Not Pending","title":"Create Sorted Array through Instructions","memory":"N/A","code":"class Solution {\npublic:\n    int M = 1e9 + 7;\n    int createSortedArray(vector<int>& instructions) {\n        int ans = 0;\n        auto e = getWay(instructions);\n        unordered_map<int,int> ct;\n        for (auto v : e) {\n            ans = (ans +  min(v[1] - ct[v[0]], v[2] - v[1])) % M;\n            ++ct[v[0]];\n        }\n        \n        return ans;\n    }\n    \n    vector<array<int, 3>> getWay(const vector<int>& instructions) {\n        int n = instructions.size();\n        vector<array<int, 3>> vctr(n);\n        for (int i = 0; i < n; ++i) {\n            vctr[i] = {instructions[i], 0, i};\n        }\n        \n        return mergeSort(vctr);\n        \n    }\n    \n    vector<array<int, 3>> mergeSort(vector<array<int, 3>> data) {\n        if (data.size() == 1) {\n            return data;\n        }\n        int mid = data.size()/2;\n        auto l = mergeSort(vector<array<int, 3>>(data.begin(), data.begin() + mid));\n        auto r = mergeSort(vector<array<int, 3>>(data.begin() + mid, data.end()));\n        int i = 0;\n        int j = 0;\n        vector<array<int, 3>> ret; ret.reserve(l.size() + r.size());\n        \n        while(i < l.size() || j < r.size()) {\n            if (j >= r.size() || (i < l.size() && l[i][0] <= r[j][0])) {\n                ret.push_back(l[i++]);\n            } else {\n                ret.push_back(r[j++]);\n                ret.back()[1] = (ret.back()[1] + i) % M;\n            }\n        }\n        return ret;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111000000000","title_slug":"create-sorted-array-through-instructions"}