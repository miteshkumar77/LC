{"id":441330654,"lang":"cpp","time":"1 year, 3 months","timestamp":1610320217,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/441330654/","is_pending":"Not Pending","title":"Create Sorted Array through Instructions","memory":"N/A","code":"class Solution {\nprivate:\n    int M = 1e9 + 7;\n    vector<int> tree;\n    int n;\n    void buildTree(int n) {\n        this->n = n;\n        tree = vector<int>(n < 50000?5 * n:3 * n, 0);\n    }\n    \n    int query(int l, int r) {\n        int ret = queryHelper(l, r, 0, n - 1, 0);\n        return ret;\n    }\n    \n    void incr(int idx) {\n        incrHelper(idx , 0, n - 1, 0);\n    }\n    \n    int queryHelper(int l, int r, int L, int R, int node) {\n        if (L > R || L > r || R < l) {\n            return 0;\n        }\n       \n        if (L >= l && R <= r) {\n            return tree[node];\n        }\n        int mid = L + (R - L)/2;\n        return (queryHelper(l, r, L, mid, 2 * node + 1) +\n                queryHelper(l, r, mid + 1, R, 2 * node + 2)) % M;\n        \n    }\n    \n    \n    \n    int incrHelper(int idx, int L, int R, int node) {\n        if (L > R) return 0;\n        \n        if (R < idx || L > idx) return tree[node];\n        if (L == R) {\n            tree[node] = (1 + tree[node]) % M;\n            return tree[node];\n        }\n        int mid = L + (R - L)/2;\n        tree[node] = (incrHelper(idx, L, mid, 2 * node + 1) +\n                      incrHelper(idx, mid + 1, R, 2 * node + 2)) % M;\n        return tree[node];\n    }\n    \npublic:\n    int createSortedArray(vector<int>& instructions) {\n        vector<int> cpy(instructions.begin(), instructions.end());\n        int n = instructions.size();\n        vector<array<int, 2>> indices(n);\n        for (int i = 0; i < n; ++i) {\n            indices[i] = {instructions[i], i};\n        }\n        sort(indices.begin(), indices.end(), [](const array<int,2>& a, const array<int,2>& b) -> bool {\n            return a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]);    \n        });\n        for (int i = 0; i < n; ++i) {\n            instructions[indices[i][1]] = i;\n        }\n        unordered_map<int, int> ct;\n        int ans = 0;\n        int i;\n        buildTree(n);\n        for (int j = 0; j < n; ++j) {\n            i = instructions[j];\n            incr(i);\n            int l = query(0, i - 1) - ct[cpy[j]]; \n            int r = query(i + 1, n - 1);\n            ans = (ans + min(l, r)) % M;\n            ++ct[cpy[j]];\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111000","title_slug":"create-sorted-array-through-instructions"}