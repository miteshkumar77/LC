{"id":441339058,"lang":"cpp","time":"1 year, 3 months","timestamp":1610321592,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/441339058/","is_pending":"Not Pending","title":"Create Sorted Array through Instructions","memory":"N/A","code":"#define MAXN 100000\n#define MAXS 400040\nclass Solution {\nprivate:\n    int M = 1e9 + 7;\n    int tree[MAXS];\n    \n    void buildTree() {\n        memset(tree, 0, sizeof(int) * MAXS);\n    }\n    \n    int query(int l, int r) {\n        int ret = queryHelper(l, r, 0, MAXN - 1, 0);\n        return ret;\n    }\n    \n    void incr(int idx) {\n        incrHelper(idx , 0, MAXN - 1, 0);\n    }\n    \n    int queryHelper(int l, int r, int L, int R, int node) {\n        if (L > R || L > r || R < l) {\n            return 0;\n        }\n       \n        if (L >= l && R <= r) {\n            return tree[node];\n        }\n        int mid = L + (R - L)/2;\n        return (queryHelper(l, r, L, mid, 2 * node + 1) +\n                queryHelper(l, r, mid + 1, R, 2 * node + 2)) % M;\n        \n    }\n    \n    \n    \n    int incrHelper(int idx, int L, int R, int node) {\n        if (L > R) return 0;\n        \n        if (R < idx || L > idx) return tree[node];\n        if (L == R) {\n            tree[node] = (1 + tree[node]) % M;\n            return tree[node];\n        }\n        int mid = L + (R - L)/2;\n        tree[node] = (incrHelper(idx, L, mid, 2 * node + 1) +\n                      incrHelper(idx, mid + 1, R, 2 * node + 2)) % M;\n        return tree[node];\n    }\n    \npublic:\n    int createSortedArray(vector<int>& instructions) {\n        int ans = 0;\n        buildTree();\n        for (int i = 0; i < instructions.size(); ++i) {\n            ans = (ans + min(query(0, instructions[i] - 1), query(instructions[i] + 1, MAXN - 1))) % M;\n            incr(instructions[i]);\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111101","title_slug":"create-sorted-array-through-instructions"}