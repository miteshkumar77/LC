{"id":393502672,"lang":"cpp","time":"1 year, 7 months","timestamp":1599699179,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/393502672/","is_pending":"Not Pending","title":"Maximum Product of Three Numbers","memory":"27.5 MB","code":"class Solution {\npublic:\n    int maximumProduct(vector<int>& nums) {\n        \n//         list<int> m{nums[0]}; \n//         list<int> n{nums[0]}; \n        \n//         for (int i = 1; i < nums.size(); ++i) {\n//             for (auto it = m.begin(); it != m.end(); ++it) {\n//                 if ((*it) <= nums[i]) {\n//                     m.insert(it, nums[i]); \n//                     break;\n//                 }\n//                 if (next(it) == m.end()) {\n//                     m.push_back(nums[i]); \n//                 }\n//             }\n            \n//             if (m.size() > 3) {\n//                 m.pop_back(); \n//             }\n            \n//             cout << m.size() << endl; \n            \n//             for (auto itt = n.begin(); itt != n.end(); ++itt) {\n//                 if ((*itt) >= nums[i]) {\n//                     n.insert(itt, nums[i]); \n//                     break;\n//                 }\n//                 if (next(itt) == n.end()) {\n//                     n.push_back(nums[i]); \n//                 }\n//             }\n            \n//             if (n.size() > 3) {\n//                 n.pop_back(); \n//             }\n//         }\n//         cout << m.size() << endl; \n//         for (auto i : m) cout << i << ' ';\n//         cout << endl; \n//         for (auto i : n) cout << i << ' ';\n//         cout << endl; \n//         vector<int> mv(m.begin(), m.end()); \n//         vector<int> nv(n.begin(), n.end()); \n//         return max(mv[0] * mv[1] * mv[2], nv[0] * nv[1] * mv[0]); \n        \n        \n        int n = nums.size() - 1; \n        sort(nums.begin(), nums.end()); \n        return max(nums[0] * nums[1] * nums[n], nums[n] * nums[n - 1] * nums[n - 2]); \n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-three-numbers"}