{"id":331140372,"lang":"cpp","time":"1 year, 11 months","timestamp":1588035993,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/331140372/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"46.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass FindElements {\npublic:\n    \n    vector<TreeNode*> tr; \n    \n    FindElements(TreeNode* root) {\n         tr = vector<TreeNode*>();\n        tr.reserve(1048576);\n        tr.push_back(root);\n        root -> val = 0; \n        int i = 0; \n        while (i < tr.size()) {\n            if (tr[i] -> left) {\n                tr[i] -> left -> val = (tr[i] -> val) * 2 + 1; \n                tr.push_back(tr[i] -> left); \n            }\n            \n            if (tr[i] -> right) {\n                tr[i] -> right -> val = (tr[i] -> val) * 2 + 2; \n                tr.push_back(tr[i] -> right); \n            }\n            ++i; \n        }\n        \n        for (TreeNode* x : tr) {\n            cout << x -> val << ' '; \n        }\n        cout << endl; \n    }\n    \n    \n    bool find(int target) {\n        int L = 0; \n        int R = tr.size() - 1; \n        int mid; \n        while(L <= R) {\n            mid = L + (R - L)/2; \n            if (target > (tr[mid] -> val)) {\n                L = mid + 1; \n            } else if (target < (tr[mid] -> val)) {\n                R = mid - 1; \n            } else {\n                return true; \n            }\n        }\n        \n        return false; \n    }\n};\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements* obj = new FindElements(root);\n * bool param_1 = obj->find(target);\n */","compare_result":"111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree"}