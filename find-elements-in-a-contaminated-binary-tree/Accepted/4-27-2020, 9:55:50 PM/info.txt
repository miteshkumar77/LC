{"id":331155686,"lang":"cpp","time":"1 year, 11 months","timestamp":1588038950,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/331155686/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"17.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass FindElements {\npublic:\n    \n    unordered_set<int> tr; \n    FindElements(TreeNode* root) {\n        root -> val = 0; \n        tr = unordered_set<int>(); \n        treeBuilder(root); \n        \n    }\n    \n    void treeBuilder(TreeNode* root) {\n        if (root -> left) {\n            root -> left -> val = 2 * (root -> val) + 1; \n            tr.insert(root -> left -> val); \n            treeBuilder(root -> left); \n        }\n        \n        if (root -> right) {\n            root -> right -> val = 2 * (root -> val) + 2; \n            tr.insert(root -> right -> val); \n            treeBuilder(root -> right); \n        }\n    }\n    \n    bool find(int target) {\n        return tr.find(target) != tr.end(); \n    }\n};\n\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements* obj = new FindElements(root);\n * bool param_1 = obj->find(target);\n */","compare_result":"111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree"}