{"id":410025024,"lang":"cpp","time":"1 year, 6 months","timestamp":1602983302,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/410025024/","is_pending":"Not Pending","title":"Coin Path","memory":"N/A","code":"class Solution {\npublic:\n    typedef unsigned long long int ulli;\n    vector<int> cheapestJump(vector<int>& A, int B) {\n        if (A[0] == -1) {\n            return vector<int>();\n        }\n        \n        int n = A.size();\n        vector<int> cost(n, INT_MAX);\n        vector<int> prev(n);\n        prev[0] = -1;\n        \n        cost[0] = A[0];\n        \n        for (int i = 1; i < n; ++i) {\n            if (A[i] == -1) continue;\n            int s = max(0, i - B);\n            for (int j = i - 1; j >= s; --j) {\n                if (cost[j] != INT_MAX && cost[j] + A[i] < cost[i]) {\n                    cost[i] = cost[j] + A[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        \n        if (cost[n - 1] == INT_MAX) {\n            return vector<int>();\n        }\n        \n        int i = n - 1;\n        vector<int> ans;\n        while(i != -1) {\n            ans.push_back(i + 1);\n            i = prev[i];\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};","compare_result":"1111111111111111111110111111111111111100111111111111111111101111111111110111111111111111111111111111111111010111011111111011111011111101111111100111110111111111101101111011101111111111111111111111111111110111110111111000000001","title_slug":"coin-path"}