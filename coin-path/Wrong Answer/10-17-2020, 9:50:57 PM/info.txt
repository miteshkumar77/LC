{"id":410035985,"lang":"cpp","time":"1 year, 6 months","timestamp":1602985857,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/410035985/","is_pending":"Not Pending","title":"Coin Path","memory":"N/A","code":"class Solution {\npublic:\n    typedef unsigned long long int ulli;\n    vector<int> cheapestJump(vector<int>& A, int B) {\n        if (A[0] == -1) {\n            return vector<int>();\n        }\n        \n        int n = A.size();\n        vector<int> cost(n, INT_MAX);\n        vector<int> prev(n);\n        cost[n - 1] = A[n - 1];\n        prev[n - 1] = n;\n        \n        for (int i = n - 2; i >= 0; --i) {\n            if (A[i] == -1) continue;\n            \n            int e = min(n - 1, i + B);\n            \n            for (int j = i + 1; j <= e; ++j) {\n                if (cost[j] != INT_MAX && cost[j] + A[i] < cost[i]) {\n                    cost[i] = cost[j] + A[i];\n                    prev[i] = j;\n                }\n            }\n        }\n        \n        if (cost[0] == INT_MAX) {\n            return vector<int>();\n        }\n        \n        int i = 0;\n        vector<int> ans;\n        while(i < n) {\n            ans.push_back(i + 1);\n            i = prev[i];\n        }\n        // reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};","compare_result":"1111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111","title_slug":"coin-path"}