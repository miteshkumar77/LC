{"id":440801943,"lang":"cpp","time":"1 year, 3 months","timestamp":1610221590,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/440801943/","is_pending":"Not Pending","title":"Word Ladder","memory":"N/A","code":"class Solution {\npublic:\n    \n    int bfsAction(unordered_map<string, vector<string>>& graph,\n                  unordered_map<string, int>& dir_dist, \n                  unordered_map<string, int>& opp_dist,\n                  queue<string>& dir_q) {\n        \n        string top = dir_q.front(); dir_q.pop();\n        int W = top.length();\n        int dist = dir_dist[top];\n        for (int i = 0; i < W; ++i) {\n            string wild = top.substr(0, i) + \"*\" + top.substr(i + 1, W); \n            for (string neighbor : graph[wild]) {\n                if (dir_dist.find(neighbor) == dir_dist.end()) {\n                    if (opp_dist.find(neighbor) != opp_dist.end()) {\n                        return dist + opp_dist[neighbor] + 1;\n                    }\n                    dir_dist[neighbor] = dist + 1;\n                    dir_q.push(neighbor);\n                }\n            }\n        }\n        return -1;\n    }\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        if (beginWord == endWord) return 0;\n        int W = beginWord.length();\n        unordered_map<string, vector<string>> graph;\n        for (string s : wordList) {\n            for (int i = 0; i < W; ++i) {\n                graph[s.substr(0, i) + \"*\" + s.substr(i + 1, W)].push_back(s);\n            }\n        }\n        \n        unordered_map<string, int> fw_dist;\n        unordered_map<string, int> bw_dist;\n        fw_dist[beginWord] = 0;\n        bw_dist[endWord] = 1;\n        queue<string> fw_q;\n        queue<string> bw_q;\n        \n        \n        fw_q.push(beginWord); bw_q.push(endWord);\n        while(!fw_q.empty() && !bw_q.empty()) {\n            int fw_step = bfsAction(graph, fw_dist, bw_dist, fw_q); \n            if (fw_step != -1) {\n                return fw_step;\n            }\n            int bw_step = bfsAction(graph, bw_dist, fw_dist, bw_q);\n            if (bw_step != -1) {\n                return bw_step;\n            }\n        }\n        return -1;\n    }\n};","compare_result":"1010111111111100011111111111111111111111111","title_slug":"word-ladder"}