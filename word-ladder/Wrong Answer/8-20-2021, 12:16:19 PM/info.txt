{"id":541501740,"lang":"cpp","time":"8Â months","timestamp":1629476179,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/541501740/","is_pending":"Not Pending","title":"Word Ladder","memory":"N/A","code":"class Solution {\npublic:\n    \n    int handle_iter(unordered_map<string, int>& dist, unordered_map<string, int>& r_dist, queue<pair<string,int>>& q, unordered_map<string, vector<string>>& graph) {\n        auto [w, d] = q.front(); q.pop();\n        // cout << w << ' ' << d << ' ' << dist[\"NAME\"] << endl;\n        if (dist.count(w) && dist[w] == -1) {\n            dist[w] = d;\n            if (r_dist.count(w) && r_dist[w] != -1) {\n                return d + r_dist[w] + 1;\n            }\n            for (int i = 0; i < w.length(); ++i) {\n                string tmp = w.substr(0, i) + \"*\" + w.substr(i+1);\n                if (!graph.count(tmp)) continue;\n                for (string const& neighbor : graph[tmp]) {\n                    q.push({neighbor, d+1});\n                }\n                graph.erase(tmp);\n            }\n        }\n        return -1;\n    }\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        wordList.push_back(beginWord);\n        unordered_map<string, int> f_dist;\n        unordered_map<string, int> b_dist;\n        f_dist[\"NAME\"] = 1;\n        b_dist[\"NAME\"] = -1;\n        unordered_map<string, vector<string>> graph;\n        \n        for (string const& w : unordered_set<string>(wordList.begin(), wordList.end())) {\n            f_dist[w] = -1;\n            b_dist[w] = -1;\n            for (int i = 0; i < w.length(); ++i) {\n                string tmp = w.substr(0, i) + \"*\" + w.substr(i+1);\n                // cout << w << ' ' << tmp << endl;\n                graph[tmp].push_back(w);\n            }\n        }\n        // if (!b_dist.count(endWord)) return 0;\n        \n        queue<pair<string, int>> f_q;\n        queue<pair<string, int>> b_q;\n        f_q.push({beginWord, 0});\n        b_q.push({endWord, 0});\n        while(!f_q.empty() || !b_q.empty()) {\n            if (!f_q.empty()) {\n                int flag = handle_iter(f_dist, b_dist, f_q, graph);\n                if (flag != -1) return flag;\n            }\n            if (!b_q.empty()) {\n                int flag = handle_iter(b_dist, f_dist, b_q, graph);\n                if (flag != -1) return flag;\n            }\n        }\n        return 0;\n    }\n};","compare_result":"1111111111111111111111111111111111011111111111111","title_slug":"word-ladder"}