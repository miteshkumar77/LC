{"id":520857703,"lang":"cpp","time":"9 months, 1 week","timestamp":1626018900,"status_display":"Accepted","runtime":"476 ms","url":"/submissions/detail/520857703/","is_pending":"Not Pending","title":"Unique Length-3 Palindromic Subsequences","memory":"11.4 MB","code":"class Solution {\npublic:\n    int countPalindromicSubsequence(string s) {\n        vector<vector<bool>> ct(26, vector<bool>(26, 0));\n        vector<int> earliest(26, (int)1e9);\n        vector<int> latest(26, (int)-1e9);\n        int n = s.length();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < 26; ++j) {\n                if (earliest[s[i]-'a'] < latest[j]) {\n                    ct[s[i]-'a'][j] = true;\n                }\n            }\n            earliest[s[i]-'a'] = min(earliest[s[i]-'a'], i);\n            latest[s[i]-'a'] = i;\n        }\n        int ans = 0;\n        for (int i = 0; i < 26; ++i) {\n            for (int j = 0; j < 26; ++j) {\n                ans += (int)ct[i][j];\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-length-3-palindromic-subsequences"}