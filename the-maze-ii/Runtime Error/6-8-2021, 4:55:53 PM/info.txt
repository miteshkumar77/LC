{"id":505105199,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1623185753,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/505105199/","is_pending":"Not Pending","title":"The Maze II","memory":"N/A","code":"class Solution {\npublic:\n    typedef pair<int,array<int,2>> pqElem;\n    array<int, 5> dirs{0, 1, 0, -1, 0};\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        int n = maze.size();\n        int m = maze[0].size();\n        vector<vector<bool>> visited(m, vector<bool>(n, false));\n        priority_queue<pqElem, vector<pqElem>, greater<pqElem>> minq;\n        minq.push({0, {start[0], start[1]}});\n        while(!minq.empty()) {\n            auto [dist, pos] = minq.top();\n            minq.pop();\n            if (visited[pos[0]][pos[1]]) continue;\n            visited[pos[0]][pos[1]] = true;\n            if (pos[0] == destination[0] && pos[1] == destination[1]) return dist;\n            for (int i = 0; i < 4; ++i) {\n                int x = pos[0];\n                int y = pos[1];   \n                while(x >= 0 && x < n && y >= 0 && y < m && maze[x][y] == 0) {\n                    x += dirs[i];\n                    y += dirs[i+1];\n                }\n                x -= dirs[i];\n                y -= dirs[i+1];\n                minq.push({dist + abs(x - pos[0]) + abs(y - pos[1]), {x, y}});\n            }\n        }\n        return -1;\n    }\n};","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"the-maze-ii"}