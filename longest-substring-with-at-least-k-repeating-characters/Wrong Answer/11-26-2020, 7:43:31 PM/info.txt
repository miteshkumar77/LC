{"id":424470817,"lang":"cpp","time":"1 year, 4 months","timestamp":1606437811,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/424470817/","is_pending":"Not Pending","title":"Longest Substring with At Least K Repeating Characters","memory":"N/A","code":"class Solution {\npublic:\n    int longestSubstring(string s, int k) {\n        unordered_set<char> chars;\n        for (char c : s) {\n            chars.insert(c);\n        }\n        \n        int numUnique = chars.size();\n        \n        function<bool(unordered_map<char,int>&)> checkK = [&](unordered_map<char, int>& ct) -> bool {\n            int len = 0;\n            for (auto p : ct) {\n                len += p.second;\n                // cout << p.first << \": \" << p.second << endl;\n                if (p.second < k) return false;\n            }\n            // cout << len << endl;\n            return true;\n        }; \n        \n        int ans = 0;\n        \n        for (int u = 1; u <= numUnique; ++u) {\n            int j = 0; \n            unordered_map<char, int> ct;\n            for (int i = 0; i < s.length(); ++i) {\n                ++ct[s[i]];\n                while(j <= i && ct.size() > u) {\n                    --ct[s[i]];\n                    if (ct[s[i]] == 0) ct.erase(s[i]);\n                    ++j;\n                }\n                if (j <= i && checkK(ct)) {\n                    // cout << i << ' ' << j << endl;\n                    ans = max(ans, i - j + 1);\n                }\n            }\n        }\n        \n        return ans;\n    }\n};","compare_result":"1111110000100000000110100001110","title_slug":"longest-substring-with-at-least-k-repeating-characters"}