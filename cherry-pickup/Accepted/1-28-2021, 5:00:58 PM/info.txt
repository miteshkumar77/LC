{"id":449099928,"lang":"cpp","time":"1 year, 2 months","timestamp":1611871258,"status_display":"Accepted","runtime":"856 ms","url":"/submissions/detail/449099928/","is_pending":"Not Pending","title":"Cherry Pickup","memory":"557.4 MB","code":"class Solution {\npublic:\n    \n    int m;\n    int n;\n    array<int, 3> dirs{0, 1, 0};\n    int sol(int i1, int j1, int i2, int j2, vector<vector<int>>& grid, vector<vector<vector<vector<int>>>>& dp) {\n        if (dp[i1][j1][i2][j2] != -1) {\n            return dp[i1][j1][i2][j2];\n        }\n        \n        if (grid[i1][j1] == -1 || grid[i2][j2] == -1) {\n            return -2;\n        }\n        \n        if (i1 == m - 1 && j1 == n - 1) {\n            return grid[i1][j1];\n        }\n        \n        int ans = -2;\n        for (int d1 = 0; d1 < 2; ++d1) {\n            for (int d2 = 0; d2 < 2; ++d2) {\n                int ni1 = i1 + dirs[d1];\n                int nj1 = j1 + dirs[d1 + 1];\n                int ni2 = i2 + dirs[d2];\n                int nj2 = j2 + dirs[d2 + 1];\n                if (ni1 < m && nj1 < n && ni2 < m && nj2 < n) {\n                    ans = max(ans, sol(ni1, nj1, ni2, nj2, grid, dp)); \n                }\n            }\n        }\n        \n        if (ans != -2) {\n            if (i1 == i2 && j1 == j2) {\n                ans += grid[i1][j1];\n            } else {\n                ans += grid[i1][j1] + grid[i2][j2];\n            }\n        }\n        dp[i1][j1][i2][j2] = ans;\n        return ans;\n    }\n    \n    int cherryPickup(vector<vector<int>>& grid) {\n       m = grid.size();\n       n = grid[0].size(); \n        \n        /*\n            dp[i][j][k][l] = max cherries if p1 picks up i, j and p2 picks up k, l\n        */\n        \n        \n        vector<vector<vector<vector<int>>>> dp(\n            m,\n            vector<vector<vector<int>>>(\n                n,\n                vector<vector<int>>(\n                    m,\n                    vector<int>(n, -1)\n                )\n            )\n        );\n        \n        return max(0, sol(0, 0, 0, 0, grid, dp));\n        \n                \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup"}