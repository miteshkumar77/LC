{"id":416005571,"lang":"golang","time":"1 year, 5 months","timestamp":1604333091,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/416005571/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"3.3 MB","code":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc merge(h1 *ListNode, h2 *ListNode) *ListNode {\n    var head *ListNode = nil\n    var next *ListNode = nil\n    var prev *ListNode = nil\n    for h1 != nil || h2 != nil {\n        if h1 != nil && (h2 == nil || h2.Val > h1.Val) {\n            next = h1\n            h1 = h1.Next\n        } else {\n            next = h2\n            h2 = h2.Next\n        }\n        \n        if head != nil {\n            prev.Next = next\n            prev = next\n        }\n        \n        if head == nil {\n            head = next\n            prev = next\n        }\n        next.Next = nil\n        \n    }\n    return head\n}\n\nfunc split(head *ListNode) (*ListNode, *ListNode) {\n    var slow *ListNode = head\n    var fast *ListNode = head\n    var prev *ListNode = nil\n    \n    for fast != nil {\n        prev = slow\n        slow = slow.Next\n        fast = fast.Next\n        if fast != nil {\n            fast = fast.Next\n        }\n    }\n    prev.Next = nil\n    return head, slow\n}\n\nfunc insertionSortList(head *ListNode) *ListNode {\n    if (head == nil || head.Next == nil) {\n        return head\n    }\n    \n    h1, h2 := split(head)\n    h1 = insertionSortList(h1)\n    h2 = insertionSortList(h2)\n    return merge(h1, h2)\n    \n}","compare_result":"1111111111111111111111","title_slug":"insertion-sort-list"}