{"id":580219289,"lang":"python3","time":"5 months, 2 weeks","timestamp":1635732258,"status_display":"Accepted","runtime":"780 ms","url":"/submissions/detail/580219289/","is_pending":"Not Pending","title":"LRU Cache","memory":"76.4 MB","code":"class LRUCache:\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity       \n        self.lru = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key in self.lru:\n            self.lru.move_to_end(key, last=True)\n            return self.lru[key]\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.lru:\n            del self.lru[key]\n        self.lru[key] = value\n        if len(self.lru) > self.capacity:\n            self.lru.popitem(last=False)\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111111111111","title_slug":"lru-cache"}