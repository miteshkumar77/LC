{"id":330026363,"lang":"cpp","time":"1 year, 11 months","timestamp":1587846300,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/330026363/","is_pending":"Not Pending","title":"LRU Cache","memory":"36.1 MB","code":"\nclass LRUCache {\npublic:\n    \n    unordered_map<int, int> store; \n    unordered_map<int, list<unordered_map<int, int>::iterator>::iterator> q_map; \n    list<unordered_map<int, int>::iterator> q; \n    int cap; \n    \n    LRUCache(int capacity) {\n        cap = capacity; \n        store = unordered_map<int, int>(); \n        q_map = unordered_map<int, list<unordered_map<int, int>::iterator>::iterator>(); \n        q = list<unordered_map<int, int>::iterator>(); \n    }\n    \n    int get(int key) {\n        unordered_map<int, int>::iterator res = store.find(key); \n        if (res == store.end()) {\n            return -1; \n        }\n        \n        unordered_map<int, list<unordered_map<int, int>::iterator>::iterator>::iterator res_loc = q_map.find(key); \n        q.splice(q.end(), q, res_loc -> second);\n        return res -> second; \n    }\n    \n    void put(int key, int value) {\n        \n        if (store.find(key) != store.end()) {\n            store[key] = value; \n            get(key); \n        } else {\n            if (cap == q.size()) {\n                unordered_map<int, int>::iterator to_eject = q.front(); \n                q_map.erase(to_eject -> first); \n                store.erase(to_eject -> first); \n                q.pop_front(); \n            }\n         \n            unordered_map<int, int>::iterator new_iter = (store.insert(pair<int, int>(key, value))).first;\n            q.push_back(new_iter); \n            q_map.insert(pair<int, list<unordered_map<int, int>::iterator>::iterator>(key, (--q.end())));  \n\n        }\n    }\n};\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"111111111111111111","title_slug":"lru-cache"}