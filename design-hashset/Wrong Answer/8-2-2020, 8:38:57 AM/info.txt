{"id":374929352,"lang":"cpp","time":"1 year, 8 months","timestamp":1596371937,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/374929352/","is_pending":"Not Pending","title":"Design HashSet","memory":"N/A","code":"class MyHashSet {\npublic:\n    /** Initialize your data structure here. */\n    MyHashSet() {\n        table = vector<int>(100, -1); \n        size = 0; \n        ratio = 0.7; \n    }\n    \n    void add(int key) {\n        if (size / table.size() > ratio) {\n            rehash(); \n        }\n        \n        int idx = (m_hash(key))%table.size(); \n        while(table[idx] != -1) {\n            if (table[idx] == key) {\n                return; \n            }\n            ++idx; \n            idx = idx % table.size(); \n        }\n        table[idx] = key; \n        ++size; \n    }\n    \n    void remove(int key) {\n        int idx = (m_hash(key)) % table.size(); \n        while(table[idx] != key) {\n            if (table[idx] == -1) {\n                return; \n            }\n            ++idx; \n            idx = idx % table.size(); \n        }\n        --size; \n        table[idx] = -1; \n    }\n    \n    /** Returns true if this set contains the specified element */\n    bool contains(int key) {\n        int idx = (m_hash(key)) % table.size(); \n        while(table[idx] != key) {\n            if (table[idx] == -1) {\n                return false; \n            }\n            ++idx; \n            idx = idx % table.size(); \n        }\n        return true; \n    }\nprivate:\n    vector<int> table; \n    int size; \n    double ratio; \n    void rehash() {\n        // cout << \"hashing\" << endl; \n        vector<int> tmp;\n        tmp.swap(table); \n        table = vector<int>(tmp.size() * 2, -1); \n        // cout << \"created table\" << endl; \n        for (int key : tmp) {\n            if (key != -1) {\n                add(key); \n            }\n        }\n        // cout << \"rehashed\" << endl; \n    }\n    \n    int m_hash(int key) {\n        return hash<int>{}(key);\n    }\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet* obj = new MyHashSet();\n * obj->add(key);\n * obj->remove(key);\n * bool param_3 = obj->contains(key);\n */","compare_result":"1111111111111010000000000000","title_slug":"design-hashset"}