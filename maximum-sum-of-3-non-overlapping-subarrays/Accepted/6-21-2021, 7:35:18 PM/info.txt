{"id":511315918,"lang":"cpp","time":"10Â months","timestamp":1624318518,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/511315918/","is_pending":"Not Pending","title":"Maximum Sum of 3 Non-Overlapping Subarrays","memory":"27.2 MB","code":"class Solution {\npublic:\n    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> pref(n + 1, 0);\n        for (int i = n-1; i >= 0; --i) pref[i] = nums[i] + pref[i+1];\n        vector<vector<int>> dp(4, vector<int>(n + 1, INT_MIN));\n        vector<vector<int>> prev(4, vector<int>(n + 1, INT_MAX));\n        for (int j = 0; j <= n; ++j) {\n            dp[0][j] = 0;\n            prev[0][j] = 0;\n        }\n        for (int i = 1; i <= 3; ++i) {\n            int mx = INT_MIN;\n            for (int j = n - i * k; j >= 0; --j) {\n                mx = max(mx, dp[i-1][j+k]);\n                if (pref[j] - pref[j+k] + mx >= dp[i][j+1]) {\n                    dp[i][j] = pref[j] - pref[j+k] + mx;\n                    prev[i][j] = j;\n                } else {\n                    dp[i][j] = dp[i][j+1];\n                    prev[i][j] = prev[i][j+1];\n                }\n            }\n        }\n        int j = 0;\n        vector<int> ans;\n        for (int i = 3; i >= 1; --i) {\n            ans.push_back(prev[i][j]);\n            j = prev[i][j] + k;\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-3-non-overlapping-subarrays"}