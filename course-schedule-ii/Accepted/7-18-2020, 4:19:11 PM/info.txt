{"id":368382204,"lang":"cpp","time":"1 year, 9 months","timestamp":1595103551,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/368382204/","is_pending":"Not Pending","title":"Course Schedule II","memory":"15.3 MB","code":"class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<int> indegree(numCourses, 0); \n        vector<vector<int> > graph(numCourses, vector<int>());\n        stack<int> toporder;\n        vector<bool> visited(numCourses, false);\n\n        for (vector<int> p : prerequisites) {\n            graph[p[1]].push_back(p[0]);\n            ++indegree[p[0]];\n        }\n        for (int i = 0; i < numCourses; ++i) {\n            if (!visited[i]) {\n                dfs(i, toporder, graph, visited);\n            }\n        }\n        vector<int> order;\n        order.reserve(numCourses);\n        while(!toporder.empty()) {\n            int top = toporder.top(); toporder.pop(); \n            if (indegree[top] != 0) {\n                return vector<int>(); \n            }\n            for (int n : graph[top]) {\n                --indegree[n];\n            }\n            \n            order.push_back(top); \n            \n        }\n        return order; \n    }\n    \n    \n    \n    void dfs(int node, stack<int>& toporder, vector<vector<int> >& graph, vector<bool>& visited) {\n        visited[node] = true; \n        for (int n : graph[node]) {\n            if (!visited[n]) {\n                \n                dfs(n, toporder, graph, visited);\n            }\n        }\n        toporder.push(node);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}