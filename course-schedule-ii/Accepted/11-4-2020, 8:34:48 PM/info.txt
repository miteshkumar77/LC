{"id":416891671,"lang":"cpp","time":"1 year, 5 months","timestamp":1604540088,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/416891671/","is_pending":"Not Pending","title":"Course Schedule II","memory":"20 MB","code":"class Solution {\npublic:\n    vector<int> findOrder(int n, vector<vector<int>>& edges) {\n        \n        unordered_map<int, unordered_set<int>> graph;\n        \n        for (auto e : edges) {\n            graph[e[0]].insert(e[1]);\n        }\n        \n        unordered_set<int> pre;\n        unordered_set<int> post;\n        vector<int> ans;\n        \n        function<bool(int)> dfs = [&](int node) -> bool {\n            bool vpre = pre.find(node) != pre.end();\n            bool vpost = post.find(node) != post.end();\n            \n            if (vpre && vpost) {\n                return true;\n            } else if (vpre && !vpost) {\n                return false;\n            }\n            \n            pre.insert(node);\n            for (int neighbor : graph[node]) {\n                if (!dfs(neighbor)) {\n                    return false;\n                }\n            }\n            post.insert(node);\n            ans.push_back(node);\n            return true;\n        };\n        \n        for (int i = 0; i < n; ++i) {\n            if (!dfs(i)) {\n                return vector<int>();\n            }\n        }\n        \n        // reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}