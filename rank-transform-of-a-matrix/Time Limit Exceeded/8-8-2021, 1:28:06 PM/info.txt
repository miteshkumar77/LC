{"id":535335991,"lang":"cpp","time":"8 months, 1 week","timestamp":1628443686,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/535335991/","is_pending":"Not Pending","title":"Rank Transform of a Matrix","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> matrixRankTransform(vector<vector<int>>& matrix) {\n        int n = matrix.size(); int m = matrix[0].size();\n        int N = n * m;\n        vector<int> parent(n * m, -1);\n        vector<int> rank(n * m, -1);\n        \n        function<int(int)> find = [&](int node) -> int {\n            if (parent[node] == -1) return node;\n            parent[node] = find(parent[node]);\n            return parent[node];\n        };\n        \n        function<bool(int,int)> onion = [&](int a, int b) -> bool {\n            int pa = find(a); int pb = find(b);\n            if (pa == pb) return false;\n            parent[pa] = pb;\n            return true;\n        };\n        vector<unordered_map<int,int>> r(n);\n        vector<unordered_map<int,int>> c(m);\n        vector<int> nodes(n * m); for (int i = 0; i < nodes.size(); ++i) nodes[i] = i;\n        \n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (!r[i].count(matrix[i][j])) {\n                    r[i][matrix[i][j]] = i * m + j;\n                } else {\n                    onion(r[i][matrix[i][j]], i * m + j);\n                }\n                if (!c[j].count(matrix[i][j])) {\n                    c[j][matrix[i][j]] = i * m + j;\n                } else {\n                    onion(c[j][matrix[i][j]], i * m + j);\n                }\n            }\n        }\n        \n        sort(nodes.begin(), nodes.end(), [&](int a, int b) {\n            return matrix[find(a)/m][find(a)%m] < matrix[find(b)/m][find(b)%m] || \n                   (matrix[find(a)/m][find(a)%m] == matrix[find(b)/m][find(b)%m] && find(a) < find(b));\n        });\n        int prev = 0;\n        vector<int> lowest_r(n, 0);\n        vector<int> lowest_c(m, 0);\n        rank[find(nodes[0])] = 1;\n        for (int i = 1; i <= N; ++i) {\n            if (i == N || find(nodes[i]) != find(nodes[i-1])) {\n                for (int j = prev; j < i; ++j) {\n                    lowest_r[nodes[j]/m] = max(lowest_r[nodes[j]/m], rank[find(nodes[j])]);\n                    lowest_c[nodes[j]%m] = max(lowest_c[nodes[j]%m], rank[find(nodes[j])]);\n                }\n                prev = i;\n            }\n            if (i < N)\n                rank[find(nodes[i])] = max(rank[find(nodes[i])], max(lowest_r[nodes[i]/m], lowest_c[nodes[i]%m]) + 1);\n        }\n        \n        for (int i : nodes) {\n            matrix[i/m][i%m] = rank[find(i)];\n        }\n        return matrix;\n    }\n};","compare_result":"111111111111111111111111111111111111110","title_slug":"rank-transform-of-a-matrix"}