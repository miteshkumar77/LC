{"id":494043645,"lang":"cpp","time":"11 months, 1 week","timestamp":1621183647,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/494043645/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"21.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    /*\n        dp[0] = min cameras if root has a camera\n        dp[1] = min cameras if root does not have a camera and is covered\n        dp[2] = min cameras whether root is being watched or not and all children are covered\n    */\n    array<int, 3> dfs(TreeNode* root) {\n        if (!root) return {(int)1e4, 0, 0};\n        auto lr = dfs(root->left);\n        auto rr = dfs(root->right);\n        array<int, 3> s;\n        s[0] = min(lr[0], min(lr[1], lr[2])) + min(rr[0], min(rr[1], rr[2])) + 1;\n        s[1] = min(lr[0] + rr[1], min(lr[1] + rr[0], lr[0] + rr[0]));\n        s[2] = min(lr[0], lr[1]) + min(rr[0], rr[1]);\n        return s;\n    }\n    \n    int minCameraCover(TreeNode* root) {\n        auto r = dfs(root);\n        return min(r[0], r[1]);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}