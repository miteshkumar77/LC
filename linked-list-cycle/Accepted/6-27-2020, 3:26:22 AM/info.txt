{"id":358880579,"lang":"cpp","time":"1 year, 9 months","timestamp":1593242782,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/358880579/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"7.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slowptr = head; \n        ListNode* fastptr = head; \n        if (head) {\n            fastptr = head -> next; \n        }\n        if (fastptr) {\n            fastptr = fastptr -> next; \n        }\n        while(fastptr) {\n            if (slowptr == fastptr) {\n                return true; \n            }\n            slowptr = slowptr -> next; \n            fastptr = fastptr -> next; \n            if (fastptr) {\n                fastptr = fastptr -> next; \n            }\n        }\n        return false; \n    }\n};","compare_result":"11111111111111111","title_slug":"linked-list-cycle"}