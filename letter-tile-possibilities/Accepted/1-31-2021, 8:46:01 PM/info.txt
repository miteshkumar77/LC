{"id":450377204,"lang":"cpp","time":"1 year, 2 months","timestamp":1612143961,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/450377204/","is_pending":"Not Pending","title":"Letter Tile Possibilities","memory":"6.2 MB","code":"class Solution {\npublic:\n    \n    int numTilePossibilities(string tiles) {\n        int n = tiles.size(); \n        vector<int> fact(n + 3, 1);\n        for (int i = 1; i <= n + 2; ++i) fact[i] = i * fact[i - 1];\n\n        array<int, 26> ct;\n        fill(ct.begin(), ct.end(), 0); \n        for (char c : tiles) ++ct[c - 'A']; \n        \n        // dp[i][j] = number of possible sequences including character i of length j. \n        \n        vector<vector<int>> dp(27, vector<int>(n + 1, 0)); \n        dp[0][0] = 1;\n        \n        for (int tile = 1; tile <= 26; ++tile) {\n            for (int length = 0; length <= n; ++length) {\n                for (int include = 0; include <= ct[tile - 1]; ++include) {\n                    if (length - include >= 0) {\n                        dp[tile][length] += dp[tile - 1][length - include] * (fact[length]/(fact[length-include] * fact[include])); \n                    }\n                }\n            }\n        }\n        \n        return accumulate(dp.back().begin() + 1, dp.back().end(), 0); \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"letter-tile-possibilities"}