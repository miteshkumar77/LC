{"id":366236632,"lang":"cpp","time":"1 year, 9 months","timestamp":1594682841,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/366236632/","is_pending":"Not Pending","title":"Design In-Memory File System","memory":"15.5 MB","code":"class FileSystem {\n    \nprivate: \n    class Level {\n    public:\n        unordered_map<string, pair<string, Level*> > dir;\n        \n    };\n    \n    \n    \n    vector<string> tokenizePath(string path) {\n        string s = \"\"; \n        vector<string> ans; \n        for (int i = 1; i < path.length(); ++i) {\n            if (path[i] == '/') {\n                ans.push_back(s); \n                s = \"\"; \n            } else {\n                s += path[i]; \n            }\n        }\n        if (path.length() > 1) {\n            ans.push_back(s); \n        }\n         \n        return ans; \n    }\n    \n    Level* root; \npublic:\n    FileSystem() {\n        root = new Level(); \n    }\n    \n    vector<string> ls(string path) {\n        Level* pter = root; \n        vector<string> tP = tokenizePath(path); \n        \n        for (int i = 0; i < (signed int)(tP.size() - 1); ++i) {\n            pter = (pter -> dir)[tP[i]].second;  \n        }\n        \n        \n        if (!(tP.size()) == 0 && (pter -> dir).find(tP.back()) != (pter -> dir).end() &&\n           (pter -> dir)[tP.back()].second == nullptr) {\n            return vector<string>{tP.back()};\n        } else {\n            if (!tP.size() == 0) {\n                pter = (pter -> dir)[tP.back()].second; \n            }\n            vector<string> ans; \n            for (auto p : (pter -> dir)) {\n                ans.push_back(p.first);\n            }\n            sort(ans.begin(), ans.end()); \n            return ans; \n        }\n    }\n    \n    void mkdir(string path) {\n        Level* pter = root; \n        vector<string> tP = tokenizePath(path); \n        for (string s : tP) {\n            if ((pter -> dir).find(s) != (root -> dir).end()) {\n                if (!(pter -> dir)[s].second) {\n                    (pter -> dir)[s].second = new Level(); \n                }\n                pter = (pter -> dir)[s].second; \n            } else {\n                Level* newLevel = new Level(); \n                (pter -> dir)[s] = make_pair(\"\", newLevel); \n                pter = newLevel; \n            }\n        }\n    }\n    \n    void addContentToFile(string filePath, string content) {\n        Level* pter = root; \n        vector<string> tP = tokenizePath(filePath); \n        for (int i = 0; i < tP.size() - 1; ++i) {\n            pter = (pter -> dir)[tP[i]].second; \n        }\n        \n        if ((pter -> dir).find(tP.back()) != (pter -> dir).end()) {\n            (pter -> dir)[tP.back()].first += content; \n        } else {\n            (pter -> dir)[tP.back()] = make_pair(content, nullptr);\n        }\n    }\n    \n    string readContentFromFile(string filePath) {\n        Level* pter = root; \n        vector<string> tP = tokenizePath(filePath); \n        for (int i = 0; i < tP.size() - 1; ++i) {\n            pter = (pter -> dir)[tP[i]].second; \n        }\n        return (pter -> dir)[tP.back()].first; \n    }\n};\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem* obj = new FileSystem();\n * vector<string> param_1 = obj->ls(path);\n * obj->mkdir(path);\n * obj->addContentToFile(filePath,content);\n * string param_4 = obj->readContentFromFile(filePath);\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-in-memory-file-system"}