{"id":475718988,"lang":"c","time":"1Â year","timestamp":1617414384,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/475718988/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"6.3 MB","code":"void swep(int* a, int* b) {\n    int swap;\n    swap = *a;\n    *a = *b;\n    *b = swap;\n}\n\nint cmp(int* a, int* b) {\n    if (*a > *b) {\n        return -1;\n    } else if (*a < *b) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint* partition(int* l, int* r, int pivot) {\n    \n    int* c = l;\n    \n    while(c <= r) {\n        if (cmp(l, &pivot) == -1) {\n            ++l;\n            if (c < l) {\n                c = l;\n            }\n            continue;\n        }\n        if (cmp(r, &pivot) == 1) {\n            --r;\n            continue;\n        }\n        if (c < l) {\n            c = l;\n        }\n        \n        if (cmp(c, &pivot) == -1) {\n            swep(c, l);\n            ++l;\n            continue;\n        } \n        if (cmp(c, &pivot) == 1) {\n            swep(c, r);\n            --r;\n            continue;\n        }\n        ++c;\n    }\n    return r;\n}\nint findKthLargest(int* nums, int numsSize, int k){\n    int* l = nums;\n    int* r = nums + numsSize - 1;\n    int* piv;\n    while(l < r) {\n        piv = rand() % (r - l) + l; \n        piv = partition(l, r, *piv);\n        if ((piv - l + 1) > k) {\n            r = piv - 1;\n        } else if ((piv - l + 1) < k) {\n            k -= (piv - l + 1);\n            l = piv + 1;\n        } else {\n            return *piv;\n        }\n    }\n    return *l;\n}","compare_result":"11111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array"}