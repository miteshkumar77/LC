{"id":475701779,"lang":"c","time":"1Â year","timestamp":1617409230,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/475701779/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"N/A","code":"void swep(int* a, int* b) {\n    int swap;\n    swap = *a;\n    *a = *b;\n    *b = swap;\n}\n\nint cmp(int* a, int* b) {\n    if (*a < *b) {\n        return -1;\n    } else if (*a > *b) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint* partition(int* l, int* r, int pivot) {\n    int* c = l;\n    int swap;\n    while(l < r && c < r) {\n        if (cmp(l, &pivot) == 1) {\n            swep(l, c);\n            ++l;\n        } else if (cmp(l, &pivot) == -1) {\n            swep(c, r);\n            --r;\n        } else {\n            ++c;\n        } \n    }\n    return c; \n}\n\n\nint findKthLargest(int* nums, int numsSize, int k){\n    int* l = nums;\n    int* r = nums + numsSize - 1;\n    int* piv;\n    while(l < r) {\n        piv = rand() % (r - l) + piv; \n        piv = partition(l, r, *piv);\n        if ((piv - l) > k) {\n            r = piv - 1;\n        } else if ((piv - l) < k) {\n            k -= (piv - l);\n            l = piv + 1;\n        } else {\n            return *piv;\n        }\n    }\n    return *l;\n}","compare_result":"11110110101000000000000000000000","title_slug":"kth-largest-element-in-an-array"}