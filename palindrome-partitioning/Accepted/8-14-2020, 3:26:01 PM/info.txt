{"id":380914392,"lang":"cpp","time":"1 year, 8 months","timestamp":1597433161,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/380914392/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"9.9 MB","code":"class Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> ans; \n        vector<string> phrase; \n        backtrack(ans, phrase, s, 0); \n        return ans; \n        \n        \n    }\n    \n    \n    void backtrack(vector<vector<string>>& ans, vector<string>& phrase, const string& s, int i) {\n        if (i == s.length()) {\n            ans.push_back(phrase); \n            return; \n        }\n        \n        string box = \"\"; \n        for (int x = i; x <= s.length(); ++x) {\n            box += s[x]; \n            if (checkPal(box)) {\n                phrase.push_back(box); \n                backtrack(ans, phrase, s, x + 1); \n                phrase.pop_back(); \n            }\n        }\n    }\n    \n    bool checkPal(string& s) {\n        int L = 0;\n        int R = s.length() - 1; \n        while(L < R) {\n            if (s[L++] != s[R--]) {\n                return false; \n            }\n        }\n        return true; \n    }\n};","compare_result":"1111111111111111111111","title_slug":"palindrome-partitioning"}