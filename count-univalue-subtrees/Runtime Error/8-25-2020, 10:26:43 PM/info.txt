{"id":386437965,"lang":"cpp","time":"1 year, 7 months","timestamp":1598408803,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/386437965/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int countUnivalSubtrees(TreeNode* root) {\n        int ans = 0; \n        \n        function<bool(TreeNode*,int)> dfs = [&](TreeNode* r, int parentval) -> bool {\n            if (!r) {\n                return true; \n            }\n            \n            bool lr = dfs(r -> left, r -> val); \n            bool rr = dfs(r -> right, r -> val); \n            if (lr && rr) {\n                // cout << r -> val << endl; \n                ++ans; \n                return r -> val == parentval; \n            }\n            return false; \n        };\n        dfs(root, root -> val); \n        return ans; \n    }\n};","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"count-univalue-subtrees"}