{"id":409166111,"lang":"cpp","time":"1 year, 6 months","timestamp":1602790710,"status_display":"Accepted","runtime":"100 ms","url":"/submissions/detail/409166111/","is_pending":"Not Pending","title":"Design Bounded Blocking Queue","memory":"9.2 MB","code":"class BoundedBlockingQueue {\npublic:\n    BoundedBlockingQueue(int capacity) {\n        this -> capacity = capacity;\n    }\n    \n    void enqueue(int element) {\n        unique_lock<mutex> ul(enqueue_lk);\n        enqueue_cv.wait(ul, [&] { return q.size() < capacity; });\n        q.push(element);\n        enqueue_cv.notify_all();\n    }\n    \n    int dequeue() {\n        unique_lock<mutex> ul(enqueue_lk);\n        enqueue_cv.wait(ul, [&] { return q.size() > 0; });\n        int ret = q.front(); q.pop();\n        enqueue_cv.notify_all();\n        return ret;\n    }\n    \n    int size() {\n        return q.size();\n    }\nprivate:\n    \n    mutex enqueue_lk;\n    mutex dequeue_lk;\n    int capacity;\n    condition_variable enqueue_cv;\n    condition_variable dequeue_cv;\n    queue<int> q;\n};","compare_result":"111111111111111","title_slug":"design-bounded-blocking-queue"}