{"id":509946644,"lang":"cpp","time":"10Â months","timestamp":1624072114,"status_display":"Accepted","runtime":"316 ms","url":"/submissions/detail/509946644/","is_pending":"Not Pending","title":"Kth Ancestor of a Tree Node","memory":"115.6 MB","code":"class TreeAncestor {\npublic:\n    TreeAncestor(int n, vector<int>& parent) : binParent(n, vector<int>(max_pow)) {\n        for (int i = 0; i < n; ++i) {\n            binParent[i][0] = parent[i];\n        }\n        for (int pow = 1; pow < max_pow; ++pow) {\n            for (int i = 0; i < n; ++i) {\n                if (binParent[i][pow-1] == -1) {\n                    binParent[i][pow] = -1;\n                } else {\n                    binParent[i][pow] = binParent[binParent[i][pow-1]][pow-1];\n                }\n            }\n        }\n    }\n    \n    int getKthAncestor(int node, int k) {\n            int p = 1<<(max_pow-1);\n            for (int i = max_pow-1; i >= 0; --i, p >>= 1) {\n                if (k >= p) {\n                    node = binParent[node][i];\n                    if (node == -1) return -1;\n                    k -= p;\n                }\n            }\n        return node;\n    }\n    int max_pow = 16;\n    vector<vector<int>> binParent;\n};\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor* obj = new TreeAncestor(n, parent);\n * int param_1 = obj->getKthAncestor(node,k);\n */","compare_result":"111111111111111","title_slug":"kth-ancestor-of-a-tree-node"}