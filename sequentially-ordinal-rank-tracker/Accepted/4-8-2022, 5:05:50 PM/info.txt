{"id":676589585,"lang":"cpp","time":"1 week, 3 days","timestamp":1649451950,"status_display":"Accepted","runtime":"356 ms","url":"/submissions/detail/676589585/","is_pending":"Not Pending","title":"Sequentially Ordinal Rank Tracker","memory":"153.3 MB","code":"class SORTracker {\nprivate:\n    int i{0};\n    priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> top;\n    priority_queue<pair<int, string>, vector<pair<int, string>>, less<pair<int, string>>> bot;\npublic:\n    SORTracker() {\n        \n    }\n    \n    void add(string name, int score) {\n        pair<int, string> p{-1 * score, name};\n        bool gte_top = (!top.empty() && (top.top() <= p));\n        if (gte_top) {\n            top.push(p);\n        } else {\n            bot.push(p);\n        }\n    }\n    \n    string get() {\n        ++i;\n        while(bot.size() < i) {\n            bot.push(top.top());\n            top.pop();\n        }\n        while(bot.size() > i) {\n            top.push(bot.top());\n            bot.pop();\n        }\n        return bot.top().second;\n    }\n};\n\n/**\n * Your SORTracker object will be instantiated and called as such:\n * SORTracker* obj = new SORTracker();\n * obj->add(name,score);\n * string param_2 = obj->get();\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sequentially-ordinal-rank-tracker"}