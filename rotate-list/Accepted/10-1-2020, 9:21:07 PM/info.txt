{"id":403313718,"lang":"cpp","time":"1 year, 6 months","timestamp":1601601667,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/403313718/","is_pending":"Not Pending","title":"Rotate List","memory":"12.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    int getLen(ListNode* head) {\n        int len = 0;\n        while(head) {\n            ++len;\n            head = head -> next;\n        }\n        return len;\n    }\n    \n    \n    ListNode* rotateRight(ListNode* head, int k) {\n        if (!head) {\n            return nullptr;\n        }\n        if (k == 0) {\n            return head;\n        }\n        int len = getLen(head);\n        k = (len - k % len) % len;\n        if (k == 0) {\n            return head;\n        }\n        ListNode* mid = head;\n        ListNode* end = head;\n        while(end -> next) {\n            end = end -> next;\n        }\n        \n        while(k - 1 > 0) {\n            --k;\n            mid = mid -> next;\n        }\n        end -> next = head;\n        head = mid -> next;\n        mid -> next = nullptr;\n        \n        return head;\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list"}