{"id":378206742,"lang":"cpp","time":"1 year, 8 months","timestamp":1596944639,"status_display":"Accepted","runtime":"508 ms","url":"/submissions/detail/378206742/","is_pending":"Not Pending","title":"Minimum Cost to Cut a Stick","memory":"10.4 MB","code":"class Solution {\npublic:\n    int minCost(int n, vector<int>& cuts) {\n        sort(cuts.begin(), cuts.end()); \n        \n        \n        // int Lptr = 0; int Rptr = cuts.size() - 1; \n        // int Llen = 0; int Rlen = n; \n        vector<vector<int>> dp(cuts.size() + 1, vector<int>(cuts.size() + 1, -1)); \n        function<int(int,int,int,int)> sol = [&] (int Lptr, int Rptr, int Llen, int Rlen) -> int {\n            \n            if (Lptr > Rptr) {\n                return 0; \n            }\n            \n            if (dp[Lptr][Rptr] != -1) {\n                return dp[Lptr][Rptr]; \n            }\n            int ans = INT_MAX; \n            for (int i = Lptr; i <= Rptr; ++i) {\n                int sub = sol(Lptr, i - 1, Llen, cuts[i]) + sol(i + 1, Rptr, cuts[i], Rlen) + Rlen - Llen;  \n                ans = min(ans, sub); \n            }\n            dp[Lptr][Rptr] = ans; \n            return ans; \n        }; \n        return sol(0, cuts.size() - 1, 0, n); \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-cut-a-stick"}