{"id":388740326,"lang":"cpp","time":"1 year, 7 months","timestamp":1598840198,"status_display":"Accepted","runtime":"312 ms","url":"/submissions/detail/388740326/","is_pending":"Not Pending","title":"Constrained Subsequence Sum","memory":"41.1 MB","code":"class Solution {\npublic:\n    \n    \n    int constrainedSubsetSum(vector<int>& nums, int k) {\n        deque<pair<int, int>> dq; \n        int sz = 0; \n        function<void(int)> enque = [&](int val) -> void {\n            int ct = 1; \n            while(!dq.empty() && val >= dq.back().first) {\n                ct += dq.back().second; \n                dq.pop_back(); \n            }\n            dq.push_back(make_pair(val, ct));\n        };\n        \n        function<void()> pop = [&]() -> void {\n            int ret = dq.front().first; \n            --dq.front().second; \n            if (dq.front().second == 0) {\n                dq.pop_front(); \n            }\n        };\n        \n        int ans = nums[0]; \n        vector<int> dp(nums.size()); \n        dp[0] = nums[0]; \n        enque(nums[0]); \n        for (int i = 1; i < nums.size(); ++i) {\n            dp[i] = max(nums[i] + dq.front().first, nums[i]); \n            ans = max(dp[i], ans); \n            enque(dp[i]); \n            if (i >= k) {\n                pop(); \n            }\n        }\n        return ans; \n    }\n};","compare_result":"111111111111111","title_slug":"constrained-subsequence-sum"}