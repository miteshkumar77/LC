{"id":309691544,"lang":"python","time":"2 years, 1 month","timestamp":1583446422,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/309691544/","is_pending":"Not Pending","title":"Majority Element","memory":"N/A","code":"class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return self.kthSmallest(nums, 0, len(nums) - 1, len(nums)//2 + 1)\n\n        \n        \n    def partition(self, arr, l, r): \n      \n        x = arr[r] \n        i = l \n        for j in range(l, r): \n\n            if arr[j] <= x: \n                arr[i], arr[j] = arr[j], arr[i] \n                i += 1\n\n        arr[i], arr[r] = arr[r], arr[i] \n        return i\n        \n    def kthSmallest(self, arr, l, r, k): \n  \n        if (k > 0 and k <= r - l + 1): \n\n\n            index = self.partition(arr, l, r) \n\n            if (index - l == k - 1): \n                return arr[index] \n\n            if (index - l > k - 1): \n                return self.kthSmallest(arr, l, index - 1, k) \n\n            return self.kthSmallest(arr, index + 1, r,  \n                                k - index + l - 1) \n        return INT_MAX \n\n        ","compare_result":"11111111111111111111111111111111111111111100","title_slug":"majority-element"}