{"id":444704284,"lang":"cpp","time":"1 year, 3 months","timestamp":1611000468,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/444704284/","is_pending":"Not Pending","title":"K-Concatenation Maximum Sum","memory":"N/A","code":"class Solution {\npublic:\n    typedef unsigned long long int ulli;\n    int kConcatenationMaxSum(vector<int>& arr, ulli k) {\n        ulli M = 1e9 + 7;\n        ulli total = accumulate(arr.begin(), arr.end(), 0);\n        ulli gmax = 0;\n        ulli lmax = 0;\n        ulli max_left = 0;\n        ulli max_right = 0;\n        ulli sum_left = 0;\n        for (ulli i = 0; i < arr.size(); ++i) {\n            lmax = max(lmax + arr[i], (ulli)arr[i]);\n            sum_left += arr[i];\n            max_right = max(max_right, total - sum_left + (ulli)arr[i]);\n            max_left = max(max_left, sum_left);\n            gmax = max(gmax, lmax);\n        }\n        \n\n        if (k >= 2) {\n            vector<ulli> results{\n                total * k,\n                max_right + max((k - 2) * total, (ulli)0) + max_left,\n                gmax\n            };\n            \n            cout << results[0] << ' ' << results[1] << ' ' << results[2] << endl;\n            return (*max_element(results.begin(), results.end())) % M;\n        }\n        return gmax % M;\n        \n        // if (k >= 2)\n        //     // return max(total * k, max(max_right + max((k - 2) * total, 0) + max_left) + max_left, gmax); \n        //     return max((int)((total * k) % M) , max((int)(max_right + (max((k - 2) * total) % M), 0) + max_left, gmax)) % M;\n        // else \n        //     return gmax; \n    }\n};","compare_result":"10001100000000000000000000000000000000","title_slug":"k-concatenation-maximum-sum"}