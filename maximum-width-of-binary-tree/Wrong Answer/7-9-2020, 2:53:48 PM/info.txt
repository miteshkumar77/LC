{"id":364389063,"lang":"cpp","time":"1 year, 9 months","timestamp":1594320828,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/364389063/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    typedef unsigned int uint; \n    int widthOfBinaryTree(TreeNode* root) {\n        unordered_map<uint, array<uint, 2> > level_map; \n        dfs(root, level_map, 0, 0, 1); \n        uint ans = 0; \n        for (auto a : level_map) {\n            ans = max(ans, 1 + a.second[1] - a.second[0]); \n        }\n        return ans; \n    }\n    \n    \n    void dfs(TreeNode* root, unordered_map<uint, array<uint, 2> >& level_map, uint C, uint depth, uint power) {\n        if (!root) {\n            return; \n        }\n        // cout << C << ' ' << depth << ' ' << power << endl; \n        level_map.insert(make_pair(depth, array<uint, 2>{INT_MAX, 0}));\n        \n        level_map[depth][0] = min(level_map[depth][0], C); \n        level_map[depth][1] = max(level_map[depth][1], C); \n        dfs(root -> left, level_map, C , depth + 1, power * 2); \n        dfs(root -> right, level_map, C | power, depth + 1, power * 2);\n    }\n    \n    \n};","compare_result":"101010111111111101111111011111001010001101101111101101111001001011011100111101011111110100001100000000000000","title_slug":"maximum-width-of-binary-tree"}