{"id":364352433,"lang":"cpp","time":"1 year, 9 months","timestamp":1594314901,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/364352433/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        unordered_map<int, array<signed long long int, 2> > depth_width; \n        dfs(root, 0, depth_width, 0); \n        signed long long int ans = 0; \n        for (pair<int, array<signed long long int, 2>> a : depth_width) {\n            ans = max(ans, a.second[1] - a.second[0]); \n        }\n        return ans; \n    }\n    \n    void dfs(TreeNode* root, int depth, unordered_map<int, array<signed long long int, 2> >& depth_width, signed long long int C) {\n        if (!root) {\n            return; \n        }\n        \n        depth_width.insert(make_pair(depth, array<signed long long int, 2>{0, 0})); \n        depth_width[depth][0] = min(C, depth_width[depth][0]);\n        depth_width[depth][1] = max(C, depth_width[depth][1]); \n        dfs(root -> left, depth + 1, depth_width, C - 1); \n        dfs(root -> right, depth + 1, depth_width, C + 1); \n        \n    }\n};","compare_result":"111100011011100110111111110000000011110110111100111101100111101100000010011111100101111010010001000001000000","title_slug":"maximum-width-of-binary-tree"}