{"id":392847330,"lang":"cpp","time":"1 year, 7 months","timestamp":1599578736,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/392847330/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"16.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\npublic:\n    typedef TreeNode T; \n    int widthOfBinaryTree(TreeNode* root) {\n        if (!root) {\n            return 0; \n        }\n        vector<T*> lvl{root}; \n        vector<unsigned long long int> idx{0};\n        int ans = 0; \n        while(lvl.size() != 0) {\n            vector<T*> next; \n            vector<unsigned long long int> nextidx; \n            ans = max(ans, (signed int)(idx.back() + 1 - idx[0])); \n            for (int i = 0; i < lvl.size(); ++i) {\n                if (lvl[i] -> left) {\n                    next.push_back(lvl[i] -> left); \n                    nextidx.push_back(idx[i] * 2); \n                }\n                if (lvl[i] -> right) {\n                    next.push_back(lvl[i] -> right); \n                    nextidx.push_back(idx[i] * 2 + 1); \n                }\n            }\n            lvl.swap(next); \n            idx.swap(nextidx); \n        }\n        return ans; \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree"}