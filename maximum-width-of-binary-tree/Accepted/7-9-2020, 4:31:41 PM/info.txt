{"id":364422160,"lang":"cpp","time":"1 year, 9 months","timestamp":1594326701,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/364422160/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"20.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    typedef unsigned int uint; \n    int widthOfBinaryTree(TreeNode* root) {\n        unordered_map<int, array<unsigned int, 2> > depth_map; \n        dfs(root, depth_map, 0, 0); \n        unsigned int ans = 0; \n        for (auto a : depth_map) {\n            ans = max(a.second[1] - a.second[0], ans);\n        }  \n        \n        return 1 + ans; \n    }\n    \n    \n    \n    void dfs(TreeNode* root, unordered_map<int, array<unsigned int, 2> >& depth_map, unsigned int C, int D) {\n        if (!root) {\n            return; \n        }\n        \n        // cout << C << ' ' << D << endl; \n        depth_map.insert(make_pair(D, array<unsigned int, 2>{C, C}));\n        depth_map[D][0] = min(depth_map[D][0], C); \n        depth_map[D][1] = max(depth_map[D][1], C); \n        dfs(root -> left, depth_map, (C << 1), D + 1); \n        dfs(root -> right, depth_map, (C << 1) + 1, D + 1); \n    }\n    \n    \n    \n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree"}