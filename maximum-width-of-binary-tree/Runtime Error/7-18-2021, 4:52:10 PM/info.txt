{"id":524622469,"lang":"cpp","time":"9Â months","timestamp":1626641530,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/524622469/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        int ans = 0;\n        vector<pair<TreeNode*, int>> lvl;\n        if (root) lvl.push_back({root, 0});\n        while(!lvl.empty()) {\n            ans = max(ans, lvl.back().second - lvl[0].second + 1);\n            decltype(lvl) nxt;\n            for (auto p : lvl) {\n                if (p.first->left) {\n                    nxt.push_back({p.first->left, p.second * 2});\n                }\n                if (p.first->right) {\n                    nxt.push_back({p.first->right, p.second * 2 + 1});\n                }\n            }\n            lvl.swap(nxt);\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree"}