{"id":331230354,"lang":"cpp","time":"1 year, 11 months","timestamp":1588051696,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/331230354/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"36.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        return recurse(nums, 0, nums.size() - 1); \n    }\n    \n    \n    TreeNode* recurse(vector<int>& nums, int L, int R) {\n        if (L > R) {\n            return nullptr; \n        }\n        \n        int mid = max_i(nums, L, R); \n        \n        TreeNode* root = new TreeNode(nums[mid]); \n        \n        root -> right = recurse(nums, mid+1, R); \n        root -> left = recurse(nums, L, mid - 1); \n        return root; \n    }\n    \n    \n    int max_i(vector<int>& nums, int L, int R) {\n        int m = R; \n        for (int i = L; i < R; ++i) {\n            if (nums[i] > nums[m]) {\n                m = i; \n            }\n        }\n        \n        return m; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree"}