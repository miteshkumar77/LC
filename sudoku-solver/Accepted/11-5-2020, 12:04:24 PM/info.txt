{"id":417122571,"lang":"cpp","time":"1 year, 5 months","timestamp":1604595864,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/417122571/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"13.6 MB","code":"class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        bool solved = false;\n        int n = board.size();\n        const int lim = 9 * 9;\n        \n        vector<unordered_set<char>> row_occupied(n, unordered_set<char>());\n        vector<unordered_set<char>> col_occupied(n, unordered_set<char>());\n        vector<vector<unordered_set<char>>> square_occupied(3, vector<unordered_set<char>>(3, unordered_set<char>()));\n        \n        function<void(int,int,char)> insert = [&](int i, int j, char c) -> void {\n            row_occupied[i].insert(c);\n            col_occupied[j].insert(c);\n            square_occupied[i/3][j/3].insert(c);\n        };\n        \n         function<void(int,int,char)> erase = [&](int i, int j, char c) -> void {\n            row_occupied[i].erase(c);\n            col_occupied[j].erase(c);\n            square_occupied[i/3][j/3].erase(c);\n        };\n        \n        for (int i = 0; i < 9; ++i) {\n            for (int j = 0; j < 9; ++j) {\n                if (board[i][j] != '.') {\n                    insert(i, j, board[i][j]);\n                }\n            }\n        }\n        \n        \n        function<bool(int,int,char)> check = [&](int i, int j, char c) -> bool {\n            return row_occupied[i].find(c) == row_occupied[i].end() &&\n                col_occupied[j].find(c) == col_occupied[j].end() &&\n                square_occupied[i/3][j/3].find(c) == square_occupied[i/3][j/3].end();\n        };\n        \n        // cout << check(0, 2, '5') << endl;\n        \n        function<void(int)> bt = [&](int square) -> void {\n            if (solved) {\n                return;\n            }\n            if (square == lim) {\n                \n                solved = true;\n                return;\n            }\n            int row = square / n;\n            int col = square % n;\n\n            if (board[row][col] != '.') {\n                bt(square + 1);\n                return;\n            }\n            for (int i = 1; i <= n; ++i) {\n                if (check(row, col, (char)(i + '0'))) {\n                    board[row][col] = (char)(i + '0');\n                    insert(row, col, (char)(i + '0'));\n                    bt(square + 1);\n                    if (solved) {\n                        return;\n                    }\n                    board[row][col] = '.';\n                    erase(row, col, (char)(i + '0'));\n                }\n            }\n            \n        };\n        \n        bt(0);\n    }\n};","compare_result":"111111","title_slug":"sudoku-solver"}