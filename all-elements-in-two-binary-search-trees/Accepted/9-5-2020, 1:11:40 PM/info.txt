{"id":391420567,"lang":"cpp","time":"1 year, 7 months","timestamp":1599325900,"status_display":"Accepted","runtime":"232 ms","url":"/submissions/detail/391420567/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"84.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        stack<TreeNode*> i1; \n        stack<TreeNode*> i2; \n        vector<int> ans; \n        \n        function<TreeNode*()> getNextI1 = [&]() -> TreeNode* {\n            if (i1.empty() && !root1) {\n                return nullptr; \n            }\n            \n            while(root1) {\n                i1.push(root1); \n                root1 = root1 -> left; \n            }\n            \n            TreeNode* tmp = i1.top(); \n            i1.pop(); \n            root1 = tmp -> right; \n            return tmp; \n        };\n        \n        function<TreeNode*()> getNextI2 = [&]() -> TreeNode* {\n            if (i2.empty() && !root2) {\n                return nullptr; \n            }\n            \n            while(root2) {\n                i2.push(root2);\n                root2 = root2 -> left;\n            }\n            \n            TreeNode* tmp = i2.top(); i2.pop(); \n            root2 = tmp -> right; \n            return tmp; \n        };\n        \n        TreeNode* c1 = getNextI1(); \n        TreeNode* c2 = getNextI2(); \n        while(c1 || c2) {\n            if (!c1) {\n                ans.push_back(c2 -> val); \n                c2 = getNextI2(); \n            } else if (!c2) {\n                ans.push_back(c1 -> val); \n                c1 = getNextI1(); \n            } else {\n                if (c1 -> val <= c2 -> val) {\n                    ans.push_back(c1 -> val); \n                    c1 = getNextI1(); \n                } else {\n                    ans.push_back(c2 -> val); \n                    c2 = getNextI2(); \n                }\n            }\n        }\n        return ans; \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees"}