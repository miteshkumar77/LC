{"id":356673799,"lang":"cpp","time":"1 year, 10 months","timestamp":1592767755,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/356673799/","is_pending":"Not Pending","title":"Avoid Flood in The City","memory":"N/A","code":"class Solution {\npublic:\n    typedef pair<int, int> pii; \n    vector<int> avoidFlood(vector<int>& rains) {\n        unordered_set<int> full; \n        map<int, int> earliest; \n        vector<int> ans (rains.size(), -1); \n        for (int i = 0; i < rains.size(); ++i) {\n            if (rains[i] != 0) {\n                earliest[i] = rains[i]; \n            }\n        }\n        \n        for (int i = 0; i < rains.size(); ++i) {\n            if (rains[i] != 0) {\n                auto it = full.find(rains[i]); \n                if (it == full.end()) {\n                    full.insert(rains[i]); \n                    earliest.erase(i); \n                    ans[i] = -1; \n                } else {\n                    return vector<int>(); \n                }\n            } else {\n                auto it = earliest.begin(); \n                while(it != earliest.end() && full.find(it -> second) == full.end()) {\n                    ++it; \n                }\n                \n                if (it == earliest.end()) {\n                    ans[i] = 1; \n                } else {\n                    ans[i] = it -> second; \n                    full.erase(it -> second);  \n                    earliest.erase(it); \n                    \n                }\n            }\n        }\n        return ans; \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"avoid-flood-in-the-city"}