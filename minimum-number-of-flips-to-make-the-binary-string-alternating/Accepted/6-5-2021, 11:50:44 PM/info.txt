{"id":503673969,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1622951444,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/503673969/","is_pending":"Not Pending","title":"Minimum Number of Flips to Make the Binary String Alternating","memory":"34.6 MB","code":"class Solution {\npublic:\n    /*\n    111000\n    \n    1111000111   \n\n    */\n    int solve(string s) {\n        int n = s.length();\n        vector<array<int, 2>> dp(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            dp[i][0] = dp[i-1][1] + (s[i-1] != '0');\n            dp[i][1] = dp[i-1][0] + (s[i-1] != '1');\n        }\n        return min(dp.back()[0], dp.back()[1]);\n    }\n    \n    vector<int> slv(string s, int start) {\n        int n = s.length();\n        vector<int> dp(n + 1, 0);\n        for (int i = 0; i < n; ++i) {\n            dp[i+1] = dp[i] + ((start + '0') == s[i]);\n            start = (start+1) % 2;\n        }\n        return dp;\n    }\n    \n    void bf(string s) {\n        cout << s << ' ' << solve(s) << endl;\n        for (int i = 0; i < s.length(); ++i) {\n            s = s.substr(1, s.length() - 1) + s.substr(0,1);\n            cout << s << ' ' << solve(s) << endl;\n        }\n    }\n    \n    int minFlips(string s) {\n        int n = s.length();\n        auto pref0 = slv(s, 0);\n        auto pref1 = slv(s, 1);\n        reverse(s.begin(), s.end());\n        auto suff0 = slv(s, 0);\n        auto suff1 = slv(s, 1);\n        reverse(suff0.begin(), suff0.end());\n        reverse(suff1.begin(), suff1.end());\n        int ans = INT_MAX;\n        for (int i = 0; i < n; ++i) {\n            ans = min(ans, min(pref0[i] + suff1[i], pref1[i] + suff0[i]));\n        }\n        return ans;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-flips-to-make-the-binary-string-alternating"}