{"id":402900732,"lang":"python","time":"1Â year, 6Â months","timestamp":1601515167,"status_display":"Accepted","runtime":"460 ms","url":"/submissions/detail/402900732/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"35.5 MB","code":"class Solution(object):\n    def maxPerformance(self, n, speed, efficiency, k):\n        \"\"\"\n        :type n: int\n        :type speed: List[int]\n        :type efficiency: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        paired = [(efficiency[i], speed[i]) for i in range(n)]\n        paired.sort(key=lambda x: x[0])\n        \n        heap = []\n        s = 0\n        dp = [0 for i in range(n + 1)]\n        \n        for i in range(n - 1, 0, -1):\n            if k == 1:\n                continue\n            if len(heap) == k - 1:\n                if paired[i][1] > heap[0]:\n                    s += paired[i][1] - heap[0]\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, paired[i][1])\n            else:\n                s += paired[i][1]\n                heapq.heappush(heap, paired[i][1])\n            dp[i] = s\n        ans = 0\n        for i in range(n):\n            ans = max(ans, paired[i][0] * (dp[i + 1] + paired[i][1]))\n        return ans % (1000000007)\n        \n        ","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team"}