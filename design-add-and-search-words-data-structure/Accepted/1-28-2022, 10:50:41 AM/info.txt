{"id":629664327,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1643385041,"status_display":"Accepted","runtime":"358 ms","url":"/submissions/detail/629664327/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"79.8 MB","code":"class WordDictionary {\nprivate:\n    struct TN {\n        TN() {\n            fill(letters.begin(), letters.end(), nullptr);\n        }\n        bool isEnd{false};\n        array<TN*, 26> letters;    \n    };\n    \n    TN* root;\npublic:\n    WordDictionary() {\n        root = new TN();\n    }\n    \n    void addWord(string word) {\n        TN* cur = root;\n        for (char c : word) {\n            if (!(cur->letters)[c-'a']) {\n                (cur->letters)[c-'a'] = new TN();\n            }\n            cur = (cur->letters)[c-'a'];\n        }\n        cur->isEnd = true;\n    }\n    \n    bool search(string word) {\n        queue<pair<int,TN*>> q;\n        q.push({0, root});\n        while(!q.empty()) {\n            auto [n, cur] = q.front(); q.pop();\n            if (!cur) continue;\n            if (n == (int)word.length()) {\n                if (cur->isEnd) return true;\n            } else {\n                if (word[n] == '.') {\n                    for (int i = 0; i < 26; ++i) {\n                        q.push({n+1, (cur->letters)[i]});\n                    }\n                } else {\n                    q.push({n+1, (cur->letters)[word[n]-'a']});\n                }\n            }\n        }\n        return false;\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}