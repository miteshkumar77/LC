{"id":374619452,"lang":"cpp","time":"1 year, 8 months","timestamp":1596318675,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/374619452/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class WordDictionary {\n    \n    \n    \nprivate: \n    \n    \n    struct TNode {\n        array<TNode*, 26> letters; \n        bool isEnd; \n        \n        TNode() {\n            fill(letters.begin(), letters.end(), nullptr); \n            isEnd = false; \n        }\n    };\n    \n    TNode* head; \n    \n    \n    \n    bool search(int i, string& word, TNode* cur) {\n        \n        if (i >= word.length()) {\n            return cur -> isEnd; \n        }\n        if (word[i] == '.') {\n            for (int x = 0; x < 26; ++x) {\n                if ((cur -> letters)[x]) {\n                    if (search(i + 1, word, (cur -> letters)[x])) {\n                        return true; \n                    }\n                }\n            }\n        }\n        \n        \n        if (!(cur -> letters)[word[i] - 'a']) {\n            return false; \n        } else {\n            return search(i + 1, word, (cur -> letters)[word[i] - 'a']); \n        }\n        \n        \n    }\npublic:\n    /** Initialize your data structure here. */\n    WordDictionary() {\n        head = new TNode(); \n    }\n    \n    /** Adds a word into the data structure. */\n    void addWord(string word) {\n        TNode* cur = head; \n        for (char c : word) {\n            if (!(cur -> letters)[c - 'a']) {\n                (cur -> letters)[c - 'a'] = new TNode(); \n            }\n            cur = (cur -> letters)[c - 'a']; \n        }\n        cur -> isEnd = true; \n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    bool search(string word) {\n        return search(0, word, head); \n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"1111110000000","title_slug":"design-add-and-search-words-data-structure"}