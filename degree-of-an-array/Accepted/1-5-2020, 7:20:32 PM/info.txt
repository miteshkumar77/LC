{"id":291562023,"lang":"java","time":"2 years, 3 months","timestamp":1578270032,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/291562023/","is_pending":"Not Pending","title":"Degree of an Array","memory":"41.1 MB","code":"class Solution {\n    public int findShortestSubArray(int[] data) {\n        int max = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        Map<Integer, Integer> startIndex = new HashMap<>();\n        Map<Integer, Integer> endIndex = new HashMap<>();\n        for(int i = 0; i < data.length; i++){\n           int value = data[i];\n           if(map.containsKey(value)){\n              map.put(value, map.get(value) + 1);\n           }else{\n              startIndex.put(value, i);\n              map.put(value, 1);\n           }\n           endIndex.put(value, i);\n           max = Integer.max(max, map.get(value));//Calculate the degree of the array\n        }\n        int result = data.length;\n        for(int i : map.keySet()){\n           if(map.get(i) == max){\n              int len = endIndex.get(i) - startIndex.get(i) + 1;\n              result = Integer.min(result, len);\n           }\n        }\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array"}