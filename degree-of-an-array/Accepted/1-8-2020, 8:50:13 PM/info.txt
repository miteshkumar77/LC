{"id":292514541,"lang":"python","time":"2 years, 3 months","timestamp":1578534613,"status_display":"Accepted","runtime":"212 ms","url":"/submissions/detail/292514541/","is_pending":"Not Pending","title":"Degree of an Array","memory":"13.6 MB","code":"class Solution(object):\n    def findShortestSubArray(self, nums):\n        \n        occurrences = {}\n        modes = {}\n        first_occurrence = {}\n        max_occurrence = 0\n        min_length = len(nums)\n        \n        for j in range(len(nums)):\n            \n            i = nums[j]\n            if i in occurrences:\n                occurrences[i] += 1\n            else:\n                occurrences[i] = 0\n                first_occurrence[i] = j\n            \n            if occurrences[i] > max_occurrence:\n                max_occurrence = occurrences[i]\n                min_length = j - first_occurrence[i] + 1\n            elif occurrences[i] == max_occurrence:\n                if min_length > j - first_occurrence[i] + 1:\n                    min_length = j - first_occurrence[i] + 1\n            \n            \n        return min_length\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n# class Solution(object):\n#     def findShortestSubArray(self, nums):\n        \n#         \"\"\"\n#         :type nums: List[int]\n#         :rtype: int\n#         \"\"\"\n        \n#         modes = []\n#         max_occurrences  = 0\n#         occurrences = {}\n        \n#         for i in nums:\n#             if i in occurrences:\n#                 occurrences[i] += 1\n#             else:\n#                 occurrences[i] = 0\n            \n#             if occurrences[i] > max_occurrences:\n#                 max_occurrences = occurrences[i]\n#                 modes = []\n#                 modes.append(i)\n#             elif occurrences[i] == max_occurrences:\n#                 modes.append(i)\n#         max_reduce = 0\n#         for i in modes:\n#             curr_sum = 0\n#             for j in range(len(nums)):\n#                 if nums[j] == i:\n#                     curr_sum += j\n#                     break\n            \n            \n#             for j in range(1, len(nums) + 1):\n#                 if nums[len(nums) - j] == i:\n#                     curr_sum += j - 1\n#                     break\n#             if curr_sum > max_reduce:\n#                 max_reduce = curr_sum\n#         return len(nums) - max_reduce\n        \n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array"}