{"id":291560536,"lang":"python","time":"2 years, 3 months","timestamp":1578269710,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/291560536/","is_pending":"Not Pending","title":"Degree of an Array","memory":"N/A","code":"class Solution(object):\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        modes = []\n        max_occurrences  = 0\n        occurrences = {}\n        \n        for i in nums:\n            if i in occurrences:\n                occurrences[i] += 1\n            else:\n                occurrences[i] = 0\n            \n            if occurrences[i] > max_occurrences:\n                max_occurrences = occurrences[i]\n                modes = []\n                modes.append(i)\n            elif occurrences[i] == max_occurrences:\n                modes.append(i)\n        max_reduce = 0\n        for i in modes:\n            curr_sum = 0\n            for j in range(len(nums)):\n                if nums[j] == i:\n                    curr_sum += j\n                    break\n            \n            \n            for j in range(1, len(nums) + 1):\n                if nums[len(nums) - j] == i:\n                    curr_sum += j - 1\n                    break\n            if curr_sum > max_reduce:\n                max_reduce = curr_sum\n        return len(nums) - max_reduce\n        \n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111100","title_slug":"degree-of-an-array"}