{"id":488897099,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1620158783,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/488897099/","is_pending":"Not Pending","title":"Wiggle Subsequence","memory":"7.2 MB","code":"class Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        vector<array<int, 2>> dp(n, {1, 1});\n        \n        // dp[i][0]: end is a valley\n        // dp[i][1]: end is a peak\n        \n        for (int i = 1; i < n; ++i) {\n            if (nums[i] < nums[i - 1]) {\n                dp[i][0] = max(dp[i - 1][1] + 1, dp[i - 1][0]);\n                dp[i][1] = dp[i - 1][1];\n            } else if (nums[i] > nums[i - 1]) {\n                dp[i][0] = dp[i - 1][0];\n                dp[i][1] = max(dp[i - 1][0] + 1, dp[i - 1][1]);\n            } else {\n                dp[i] = dp[i - 1];\n            }\n        }\n        return max(dp[n - 1][0], dp[n - 1][1]);\n    }\n};","compare_result":"11111111111111111111111111","title_slug":"wiggle-subsequence"}