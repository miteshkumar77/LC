{"id":546921467,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1630365147,"status_display":"Accepted","runtime":"1058 ms","url":"/submissions/detail/546921467/","is_pending":"Not Pending","title":"Minimum Number of Work Sessions to Finish the Tasks","memory":"140.5 MB","code":"class Solution {\npublic:\n    int solve(int S, int k, vector<int>& tasks, int sessionTime, vector<vector<int>>& dp) {\n        if (S == 0) return 0;\n        if (k == 0) return -2;\n        if (dp[S][k] != -1) return dp[S][k];\n        int pow = 1;\n        int ans = -2;\n        for (int i = 0; i < tasks.size(); ++i, pow <<= 1) {\n            if (S & pow) {\n                S &= ~pow;\n                int a1 = solve(S, k-1, tasks, sessionTime, dp);\n                int a2 = solve(S, k, tasks, sessionTime, dp);\n                S |= pow;\n                if (a1 != -2) {\n                    if (ans == -2) {\n                        ans = tasks[i];\n                    } else {\n                        ans = min(ans, tasks[i]);\n                    }\n                } else if (a2 != -2 && a2 + tasks[i] <= sessionTime) {\n                    \n                    if (ans == -2) {\n                        ans = tasks[i] + a2;\n                    } else {\n                        ans = min(ans, tasks[i] + a2);\n                    }\n                }\n            }\n        }\n        dp[S][k] = ans;\n        return ans;\n    }\n    int minSessions(vector<int>& tasks, int sessionTime) {\n        int n = tasks.size();\n        vector<vector<int>> dp(2 << (n+1), vector<int>(n+1, -1));\n        int S = 0;\n        int pow = 1;\n        for (int i = 0; i < n; ++i, pow <<= 1) {\n            S |= pow;\n        }\n        for (int i = 1; i <= n; ++i) {\n            if (solve(S, i, tasks, sessionTime, dp) != -2) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-work-sessions-to-finish-the-tasks"}