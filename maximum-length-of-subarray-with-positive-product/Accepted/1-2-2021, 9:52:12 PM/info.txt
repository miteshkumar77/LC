{"id":437789099,"lang":"cpp","time":"1 year, 3 months","timestamp":1609642332,"status_display":"Accepted","runtime":"684 ms","url":"/submissions/detail/437789099/","is_pending":"Not Pending","title":"Maximum Length of Subarray With Positive Product","memory":"84.2 MB","code":"class Solution {\npublic:\n    int getMaxLen(vector<int>& nums) {\n        int s = 0;\n        int ans = 0;\n        for (int e = 0; e < nums.size(); ++e) {\n            if (nums[e] == 0) {\n                ans = max(ans, check(nums, s, e));\n                s = e + 1;\n            }\n        }\n        return max(ans, check(nums, s, nums.size()));\n    }\n    \n    int check(const vector<int>& sub, int s, int e) {\n        \n        int ans = 0;\n        unordered_map<int, int> seen;\n        seen[1] = s - 1;\n        int sign = 1;\n        for (int i = s; i < e; ++i) {\n            if (sub[i] < 0) sign = !sign;\n            \n            if (seen.find(sign) != seen.end()) {\n                ans = max(ans, i - seen[sign]);\n            }\n            seen.insert(make_pair(sign, i));\n        }\n        // for (auto p : seen) cout << p.first << ' ' << p.second << endl;\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-length-of-subarray-with-positive-product"}