{"id":547888306,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1630514150,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/547888306/","is_pending":"Not Pending","title":"Maximum Average Subtree","memory":"22 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    //    avg     total   sz\n    tuple<double, double, int> calc(TreeNode* root) {\n        if (!root) return {0.0, 0.0, 0};\n        auto l = calc(root->left); auto r = calc(root->right);\n        int sz = get<2>(l) + get<2>(r) + 1;\n        double total = (get<1>(l) + get<1>(r) + root->val);\n        double avg = total/(double)sz;\n        return {max(get<0>(l), max(get<0>(r), avg)), total, sz};\n    }\n    \n    double maximumAverageSubtree(TreeNode* root) {\n        return get<0>(calc(root));\n    }\n};","compare_result":"111111111111111111111111111111111","title_slug":"maximum-average-subtree"}