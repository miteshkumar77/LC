{"id":447265232,"lang":"cpp","time":"1 year, 2 months","timestamp":1611512325,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/447265232/","is_pending":"Not Pending","title":"Maximum Average Subtree","memory":"22 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    pair<int,int> helper(TreeNode* root, double& ans) {\n        if (!root) {\n            return {0, 0};\n        }\n        auto l = helper(root -> left, ans);\n        auto r = helper(root -> right, ans);\n        pair<int, int> c{l.first + r.first + root -> val,  l.second + r.second + 1};\n        ans = max(ans, (double)c.first/c.second); \n        return c;\n    }\n    double maximumAverageSubtree(TreeNode* root) {\n        double ret = 0;\n        helper(root, ret);\n        return ret;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"maximum-average-subtree"}