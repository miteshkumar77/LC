{"id":375469863,"lang":"cpp","time":"1 year, 8 months","timestamp":1596470758,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/375469863/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    BSTIterator(TreeNode* root) {\n        stk.push(root); \n        while(stk.top() -> left) {\n            stk.push(stk.top() -> left); \n        }\n    }\n    \n    /** @return the next smallest number */\n    int next() {\n        int val = stk.top() -> val; \n        TreeNode* r = stk.top() -> right; \n        stk.pop(); \n        if (r) {\n            stk.push(r); \n            while(stk.top() -> left) {\n                stk.push(stk.top() -> left); \n            }\n        }\n        return val; \n    }\n    \n    /** @return whether we have a next smallest number */\n    bool hasNext() {\n        return !stk.empty(); \n    }\n    \n    \n    stack<TreeNode*> stk; \n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"11111100000000000000000000000000000000000000000000000000000000","title_slug":"binary-search-tree-iterator"}