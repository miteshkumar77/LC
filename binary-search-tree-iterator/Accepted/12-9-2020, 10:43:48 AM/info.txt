{"id":428916150,"lang":"cpp","time":"1 year, 4 months","timestamp":1607528628,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/428916150/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    BSTIterator(TreeNode* root) {\n        this->cur = root;\n    }\n    \n    int next() {\n        while(cur) {\n            stk.push(cur);\n            cur = cur -> left;\n        }\n        TreeNode* ret = stk.top();\n        cur = stk.top() -> right;\n        stk.pop();\n        return ret -> val;\n    }\n    \n    bool hasNext() {\n        return !stk.empty() || cur;\n    }\nprivate:\n    stack<TreeNode*> stk;\n    TreeNode* cur;\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}