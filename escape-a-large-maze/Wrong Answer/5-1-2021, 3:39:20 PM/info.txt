{"id":487557076,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1619897960,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/487557076/","is_pending":"Not Pending","title":"Escape a Large Maze","memory":"N/A","code":"\nclass Solution {\npublic:\n    int maxx = 1e6;\n    set<array<int, 2>> mp;    \n    int sz;\n    array<int, 4> dx{0, 0, 1, -1};\n    array<int, 4> dy{1, -1, 0, 0};\n    bool bfs(array<int, 2> p) {\n        set<array<int, 2>> visited;\n        queue<array<int, 2>> q;\n        q.push(p);\n        while(!q.empty() && visited.size() < sz) {\n            auto t = q.front(); q.pop();\n            if (t[0] < 0 || t[0] >= maxx || t[1] < 0 || t[1] >= maxx || mp.count(t) || visited.count(t)) continue;\n            visited.insert(t);\n            for (int i = 0; i < 4; ++i) {\n                q.push({t[0] + dx[i], t[1] + dy[i]});\n            }\n        }\n        cout << visited.size() << endl;\n        return visited.size() >= sz;\n    }\n    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {\n        sz = 39800;\n        for (const auto& p : blocked) {\n            mp.insert({p[0], p[1]});\n        }\n        return bfs({source[0], source[1]}) && bfs({target[0], target[1]});\n        \n    }\n};","compare_result":"111111111111111111111111011111","title_slug":"escape-a-large-maze"}