{"id":427555081,"lang":"rust","time":"1 year, 4 months","timestamp":1607204461,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/427555081/","is_pending":"Not Pending","title":"Find the Most Competitive Subsequence","memory":"3.9 MB","code":"impl Solution {\n    pub fn most_competitive(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        let mut stk = Vec::new(); \n        for (index, val) in nums.iter().enumerate() {\n            let remaining = nums.len() - index;\n            // println!(\"stk.len()={} val={} remaining={} index={}\", stk.len(), val, remaining, index); \n            while stk.len() != 0 && val < stk.last().unwrap() && (remaining as i32) > (k - (stk.len() as i32)){\n                stk.pop();\n                // println!(\"stk.len()={} val={} remaining={} index={}\", stk.len(), val, remaining, index); \n            }\n            \n            if stk.len() < (k as usize) {\n                stk.push(*val)\n            }\n        }\n        \n        return stk\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-most-competitive-subsequence"}