{"id":493021704,"lang":"cpp","time":"11 months, 1 week","timestamp":1620992452,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/493021704/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    array<TreeNode*, 2> dfs(TreeNode* root) {\n        if (!root) return {nullptr, nullptr};\n        auto lr = dfs(root->left);\n        auto rr = dfs(root->right);\n        root->left = nullptr;\n        root->right = lr[0];\n        if (lr[1]) {\n            lr[1] -> right = rr[0];\n        } else {\n            root->right = rr[0];\n        }\n        return {root, (!rr[1]) ? root : rr[1]};\n    }\n    void flatten(TreeNode* root) {\n        dfs(root);\n    }\n};","compare_result":"111111011100111110111010100011110111010100111101100101001010010100000011101110101001111011001010010100101000000111101110101001111000000110011000010100101000000101001010000001010010001010000000000000000100001000010000000000100","title_slug":"flatten-binary-tree-to-linked-list"}