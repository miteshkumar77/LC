{"id":390110758,"lang":"cpp","time":"1Â year, 7Â months","timestamp":1599077513,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/390110758/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        helper(root); \n    }\n    \n    \n    TreeNode* helper(TreeNode* root) {\n        if (!root) {\n            return nullptr; \n        }\n        \n        TreeNode* lend = helper(root -> left); \n        TreeNode* rend = helper(root -> right); \n        TreeNode* l = root -> left; \n        TreeNode* r = root -> right; \n        root -> left = nullptr; \n        root -> right = l; \n        if (lend) {\n            lend -> right = r; \n        } else {\n            root -> right = r; \n        }\n        if (!rend) {\n            return root; \n        }\n        return rend; \n    }\n    \n    \n    \n    \n    \n};","compare_result":"111111011100111110111010100011110111010100111101100101001010010100000011101110101001111011001010010100101000000111101110101001111000000110011000010100101000000101001010000001010010001010000000000000000100001000010000000000100","title_slug":"flatten-binary-tree-to-linked-list"}