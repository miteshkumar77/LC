{"id":390114750,"lang":"cpp","time":"1 year, 7 months","timestamp":1599078145,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/390114750/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        if (!root) {\n            return; \n        }\n        TreeNode* prev = nullptr; \n        stack<TreeNode*> stk; \n        stk.push(root); \n        while(!stk.empty()) {\n            TreeNode* nxt = stk.top(); stk.pop(); \n            if (prev) {\n                prev -> right = nxt; \n            }\n            prev = nxt; \n            if (nxt -> right) {\n                stk.push(nxt -> right); \n            }\n            if (nxt -> left) {\n                stk.push(nxt -> left); \n            }\n            nxt -> left = nullptr; \n        }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}