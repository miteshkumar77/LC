{"id":343142013,"lang":"cpp","time":"1Â year, 11Â months","timestamp":1590168122,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/343142013/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        if (!root) {\n            return; \n        }\n        \n        TreeNode* tmp = root -> right; \n        \n        root -> right = root -> left;\n        root -> left = nullptr; \n        flatten(root -> right);\n        while(root -> right) {\n            root = root -> right; \n        }\n        root -> right = tmp; \n        flatten(tmp); \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}