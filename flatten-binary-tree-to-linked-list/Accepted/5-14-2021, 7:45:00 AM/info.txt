{"id":493022781,"lang":"cpp","time":"11 months, 1 week","timestamp":1620992700,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/493022781/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"12.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    array<TreeNode*, 2> dfs(TreeNode* root) {\n        if (!root) return {nullptr, nullptr};\n        auto lr = dfs(root->left);\n        auto rr = dfs(root->right);\n        root->left = nullptr;\n        root->right = lr[0];\n        TreeNode* retr = root;\n        if (lr[1]) {\n            lr[1] -> right = rr[0];\n            retr = lr[1];\n        } else {\n            root->right = rr[0];\n        }\n        return {root, rr[1] ? rr[1] : retr};\n    }\n    void flatten(TreeNode* root) {\n        dfs(root);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}