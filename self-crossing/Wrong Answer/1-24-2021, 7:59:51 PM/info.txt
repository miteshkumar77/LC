{"id":447403282,"lang":"cpp","time":"1 year, 2 months","timestamp":1611536391,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/447403282/","is_pending":"Not Pending","title":"Self Crossing","memory":"N/A","code":"class Solution {\npublic:\n    struct PLine {\n        PLine(int x1, int y1, int x2, int y2): x1(x1), y1(y1), x2(x2), y2(y2) {}\n        PLine(): x1(0), y1(0), x2(0), y2(0){}\n        int x1, y1, x2, y2;\n    };\n    \n    void printPt(const PLine& pt) {\n        printf(\"{(%d,%d),(%d,%d)}\", pt.x1, pt.y1, pt.x2, pt.y2); \n    }\n    \n    bool intersects(const PLine& l1, const PLine& l2) {\n        if ((l1.x1 == l1.x2 && l2.x1 == l2.x2) || (l1.y1 == l1.y2 && l2.y1 == l2.y2)) {\n            return false;\n        }\n        \n        int x_i;\n        int y_i;\n        \n        if (l1.x1 == l1.x2) {\n            if ((l2.y1 >= min(l1.y1, l1.y2) && l2.y1 <= max(l1.y1, l1.y2)) && \n                (l1.x1 >= min(l2.x1, l2.x2) && l1.x1 <= max(l2.x1, l2.x2))) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return intersects(l2, l1); \n        }\n    }\n    bool isSelfCrossing(vector<int>& x) {\n        vector<PLine> seen(8); \n        \n\n        int num = 0;\n        int curr = 0;\n        array<int, 5> dirs{0, 1, 0, -1, 0};\n        int dir = 0;\n        PLine p;\n        PLine lastPt;\n        for (int i = 0; i < x.size(); ++i) {\n            p.x1 = p.x2;\n            p.y1 = p.y2;\n            p.x2 += dirs[dir] * x[i];\n            p.y2 += dirs[dir + 1] * x[i];\n            dir = (dir + 1) % 4;\n            for (int z = 0; z < num; ++z) {\n                if (intersects(p, seen[z])) {\n                    // printPt(p);\n                    // cout << endl;\n                    // printPt(seen[z]);\n                    // cout << endl;\n                    return true;\n                }\n            }\n            \n            if (i != 0) {\n                seen[curr] = lastPt;\n                curr = (curr + 1) % 8;\n                num = min(8, num + 1); \n            }\n            lastPt = p;\n        }\n        return false;\n        \n    }\n};","compare_result":"11101111111111111111111111111","title_slug":"self-crossing"}