{"id":372884689,"lang":"cpp","time":"1 year, 8 months","timestamp":1595968587,"status_display":"Accepted","runtime":"1020 ms","url":"/submissions/detail/372884689/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"50.1 MB","code":"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        \n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return false; \n        }\n        \n        \n        \n        function<int(int,int,int,int)> binSearch = [&](int iL, int jL, int iR, int jR) -> int {\n            if (iL > iR || jL > jR) {\n                return false;\n            } else if (target < matrix[iL][jL] || target > matrix[iR][jR]) {\n                return false;\n            }\n            \n            \n            int jM = jL + (jR - jL)/2; \n            int row = iL; \n            while(row <= iR && matrix[row][jM] <= target) {\n                if (matrix[row][jM] == target) {\n                    return true; \n                }\n                ++row; \n            }\n            \n            return binSearch(iL, jM + 1, row - 1, jR) || binSearch(row, jL, iR, jM - 1);\n            \n        };\n        \n        \n        return binSearch(0, 0, matrix.size() - 1, matrix[0].size() - 1);\n    }\n    \n    \n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii"}