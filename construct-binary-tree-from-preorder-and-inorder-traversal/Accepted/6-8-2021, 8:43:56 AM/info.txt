{"id":504909680,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1623156236,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/504909680/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"25.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int n = inorder.size();\n        unordered_map<int,int> mp;\n        for (int i = 0; i < n; ++i) mp[inorder[i]] = i;\n        stack<TreeNode*> t;\n        TreeNode* root = nullptr;\n        for (int i : preorder) {\n            TreeNode* tn = new TreeNode(i);\n            if (t.empty()) {\n                t.push(tn); root = tn;\n            } else if (mp[i] < mp[t.top()->val]) {\n                t.top()->left = tn;\n                t.push(tn);\n            } else {\n                TreeNode* tmp;\n                while(!t.empty() && mp[t.top()->val] < mp[i]) {\n                    tmp = t.top();\n                    t.pop();\n                }\n                tmp->right = tn;\n                t.push(tn);\n            }\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}