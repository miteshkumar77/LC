{"id":380976070,"lang":"cpp","time":"1 year, 8 months","timestamp":1597445339,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/380976070/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"24.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        unordered_map<int, int> idx; \n        for (int i = 0; i < inorder.size(); ++i) {\n            idx[inorder[i]] = i; \n        }\n        \n        int pre_idx = 0; \n        function<TreeNode*(int,int)> solver = [&](int lo, int hi) -> TreeNode* {\n            if (lo > hi) {\n                return nullptr; \n            }\n            int mid = idx[preorder[pre_idx]]; \n            TreeNode* root = new TreeNode(preorder[pre_idx++]); \n            root -> left = solver(lo, mid - 1);\n            root -> right = solver(mid + 1, hi); \n            return root; \n        };\n        \n        return solver(0, preorder.size() - 1); \n    }\n    \n    \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}