{"id":540942809,"lang":"cpp","time":"8Â months","timestamp":1629380527,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/540942809/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sum(TreeNode* root) {\n        return root ? root->val + sum(root->left) + sum(root->right) : 0;\n    }\n    \n    int solve(TreeNode* root, int& ans, int sum) {\n        if (!root) return 0;\n        int r = root->val + solve(root->left, ans, sum) + solve(root->right, ans, sum);\n        ans = max(ans, (sum-r) * r);\n        return r;\n    }    \n    int maxProduct(TreeNode* root) {\n        int ans = 0;\n        solve(root, ans, sum(root));\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111110000000000000000000000","title_slug":"maximum-product-of-splitted-binary-tree"}