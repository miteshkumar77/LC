{"id":384785056,"lang":"cpp","time":"1 year, 7 months","timestamp":1598123340,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/384785056/","is_pending":"Not Pending","title":"Random Point in Non-overlapping Rectangles","memory":"N/A","code":"class Solution {\npublic:\n    \n    \n    \n    struct pair_hash {\n        template <class T1, class T2>\n        std::size_t operator () (std::pair<T1, T2> const &pair) const\n        {\n            std::size_t h1 = std::hash<T1>()(pair.first);\n            std::size_t h2 = std::hash<T2>()(pair.second);\n\n            return h1 ^ h2;\n        }\n    };\n    \n    Solution(vector<vector<int>>& rects) {\n        unordered_set<pair<int, int>, pair_hash> mp; \n        \n        for (vector<int> rect : rects) {\n            for (int x = rect[0]; x <= rect[2]; ++x) {\n                for (int y = rect[1]; y <= rect[3]; ++y) {\n                    mp.insert(make_pair(x, y)); \n                }\n            }\n        }\n        \n        allpts = vector<pair<int, int>>(mp.begin(), mp.end()); \n    }\n    \n    vector<int> pick() {\n        auto p = allpts[rand() % allpts.size()]; \n        \n        return vector<int>{p.first, p.second}; \n    }\n    \nprivate: \n    vector<pair<int, int>> allpts; \n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(rects);\n * vector<int> param_1 = obj->pick();\n */","compare_result":"11000000000000000000000000000000000","title_slug":"random-point-in-non-overlapping-rectangles"}