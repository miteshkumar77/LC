{"id":384802851,"lang":"cpp","time":"1 year, 7 months","timestamp":1598125980,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/384802851/","is_pending":"Not Pending","title":"Random Point in Non-overlapping Rectangles","memory":"N/A","code":"class Solution {\npublic:\n    \n    Solution(vector<vector<int>>& rects) {\n        mrects.swap(rects); \n    \n        csum = vector<int>(mrects.size()); \n        csum[0] = getArea(mrects[0]); \n        for (int i = 1; i < mrects.size(); ++i) {\n            csum[i] = csum[i - 1] + getArea(mrects[i]); \n        }\n        \n        \n    }\n    \n    vector<int> pick() {\n        \n        int L = 0; \n        int R = mrects.size() - 1; \n        \n        int r = rand() % csum.back(); \n        int ans = -1; \n        while(L <= R) {\n            int mid = L + (R - L)/2; \n            if (csum[mid] > r) {\n                ans = mid; \n                R = mid - 1; \n            } else {\n                L = mid + 1; \n            }\n        }\n        if (ans != 0) {\n            r -= csum[ans - 1]; \n        }\n        int rx = r % (mrects[ans][2] - mrects[ans][0]) + mrects[ans][0]; \n        int ry = r / (mrects[ans][2] - mrects[ans][0]) + mrects[ans][1]; \n        \n        return vector<int>{rx, ry}; \n    }\n    \nprivate: \n    \n    int getArea(const vector<int>& rect) {\n        return (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1); \n    }\n    \n    vector<vector<int>> mrects; \n    vector<int> csum; \n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(rects);\n * vector<int> param_1 = obj->pick();\n */","compare_result":"10101110011111111101110001010111111","title_slug":"random-point-in-non-overlapping-rectangles"}