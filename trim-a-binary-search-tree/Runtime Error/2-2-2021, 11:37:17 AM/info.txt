{"id":451093114,"lang":"cpp","time":"1 year, 2 months","timestamp":1612283837,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/451093114/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteTree(TreeNode* root) {\n        if (!root) return;\n        deleteTree(root -> left);\n        deleteTree(root -> right); \n        delete root;\n    }\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        if (!root) return nullptr;\n        \n        if (root -> val < low) {\n            TreeNode* r = root -> right;\n            root -> right = nullptr;\n            deleteTree(root);\n            return trimBST(r, low, high); \n        } else if (root -> val > high) {\n            TreeNode * l = root -> left;\n            root -> left = nullptr;\n            deleteTree(root);\n            return trimBST(l, low, high);\n        }\n        root -> left = trimBST(root -> left, low, high);\n        root -> right = trimBST(root -> right, low, high);\n        return root;\n    }\n};","compare_result":"11110000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"trim-a-binary-search-tree"}