{"id":422844815,"lang":"cpp","time":"1 year, 4 months","timestamp":1606021029,"status_display":"Accepted","runtime":"192 ms","url":"/submissions/detail/422844815/","is_pending":"Not Pending","title":"Correct a Binary Tree","memory":"75.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* correctBinaryTree(TreeNode* root) {\n        unordered_set<TreeNode*> visited;\n        queue<pair<TreeNode*, TreeNode*>> bfsq;\n        bfsq.push(make_pair(nullptr, root));\n        while(!bfsq.empty()) {\n            auto p = bfsq.front();\n            TreeNode* parent = p.first;\n            TreeNode* top = p.second;\n            visited.insert(top);\n            bfsq.pop(); \n            if (top -> right) {\n                if (visited.find(top -> right) != visited.end()) {\n                    if (parent -> right == top) {\n                        parent -> right = nullptr;\n                    } else {\n                        parent -> left = nullptr;\n                    }\n                    return root;\n                }\n                bfsq.push(make_pair(top, top -> right)); \n            }\n            if (top -> left) {\n                bfsq.push(make_pair(top, top -> left));\n            }\n        }\n        return nullptr;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"correct-a-binary-tree"}