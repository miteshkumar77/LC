{"id":397646301,"lang":"cpp","time":"1 year, 7 months","timestamp":1600473576,"status_display":"Accepted","runtime":"272 ms","url":"/submissions/detail/397646301/","is_pending":"Not Pending","title":"Frog Jump","memory":"42.9 MB","code":"class Solution {\npublic:\n    bool canCross(vector<int>& stones) {\n         \n        unordered_map<int, unordered_set<int>> jumps; \n        for (auto stone : stones) {\n            jumps[stone] = unordered_set<int>(); \n        }\n        \n        jumps[0].insert(1); \n        \n        for (int i = 0; i < stones.size() - 1; ++i) {\n            int cstone = stones[i]; \n\n            for (auto jumpVal : jumps[cstone]) {\n                auto it = jumps.find(cstone + jumpVal); \n                if (it != jumps.end()) {\n                    (it -> second).insert(jumpVal + 1); \n                    (it -> second).insert(jumpVal); \n                    if (jumpVal != 1) {\n                        (it -> second).insert(jumpVal - 1); \n                    }\n                    \n                }\n            }\n        }\n        \n        // for (int st : stones) {\n        //     cout << st << \": \";\n        //     for (auto j : jumps[st]) {\n        //         cout << j << ' ';\n        //     }\n        //     cout << endl; \n        // }\n        return jumps[stones.back()].size() != 0; \n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"frog-jump"}