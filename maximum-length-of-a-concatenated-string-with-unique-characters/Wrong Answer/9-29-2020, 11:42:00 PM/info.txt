{"id":402515616,"lang":"cpp","time":"1 year, 6 months","timestamp":1601437320,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/402515616/","is_pending":"Not Pending","title":"Maximum Length of a Concatenated String with Unique Characters","memory":"N/A","code":"class Solution {\npublic:\n    \n    bool intersec(unordered_set<char> u1, unordered_set<char> u2) {\n        for (char c : u1) {\n            if (u2.find(c) != u2.end()) {\n                return false;\n            }\n        }\n        \n        return true; \n    }\n    \n    unordered_set<char> onion(unordered_set<char> u1, unordered_set<char> u2) {\n        unordered_set<char> ans;\n        for (char c : u1) ans.insert(c);\n        for (char c : u2) ans.insert(c);\n        return ans;\n    }\n    \n    int maxLength(vector<string>& arr) {\n        int n = arr.size();\n        vector<unordered_set<char>> dp(arr.size());\n        \n        int ans = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            unordered_set<char> d(arr[i].begin(), arr[i].end());\n            if (d.size() == arr[i].length()) {\n                dp[i] = d;\n            }\n            if (dp[i].size() != 0) {\n                for (int j = 0; j < i; ++j) {\n                    if (dp[j].size() != 0 && intersec(d, dp[j])) {\n                        auto st = onion(d, dp[j]);\n                        if (st.size() > dp[i].size()) {\n                            dp[i] = st;\n                        }\n                    }\n                }\n                ans = max(ans, (int)dp[i].size());\n            }\n        }\n        return ans;\n        \n    }\n};","compare_result":"1111111111111011111111111111111111111111111111111111111111101111111111111111111110111","title_slug":"maximum-length-of-a-concatenated-string-with-unique-characters"}