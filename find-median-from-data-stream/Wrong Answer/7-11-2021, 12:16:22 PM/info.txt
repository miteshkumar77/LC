{"id":520866404,"lang":"cpp","time":"9 months, 1 week","timestamp":1626020182,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/520866404/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"N/A","code":"class MedianFinder {\npublic:\n    /** initialize your data structure here. */\n    priority_queue<int, vector<int>, greater<int>> left;\n    priority_queue<int, vector<int>, less<int>> right;\n    MedianFinder() {\n        \n    }\n    void balance() {\n        while(abs((int)(left.size() - (int)right.size())) > 1) {\n            if (left.size() > right.size()) {\n                right.push(left.top()); left.pop();\n            } else {\n                left.push(right.top()); right.pop();\n            }\n        }\n        if (left.size() < right.size()) { left.push(right.top()); right.pop(); }\n    }\n    void addNum(int num) {\n        left.push(num);\n        balance();\n    }\n    \n    double findMedian() {\n        // cout << left.size() << ' ' << right.size() << ' ' << left.top() << ' ' << (right.size() ? right.top() : 0) << endl;\n        if (left.size() > right.size()) {\n            return left.top();\n        } else {\n            return ((double)left.top() + (double)right.top())/2;\n        }\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111101000000000000","title_slug":"find-median-from-data-stream"}