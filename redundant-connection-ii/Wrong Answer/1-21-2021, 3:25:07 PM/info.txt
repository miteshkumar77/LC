{"id":446025145,"lang":"cpp","time":"1 year, 2 months","timestamp":1611260707,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/446025145/","is_pending":"Not Pending","title":"Redundant Connection II","memory":"N/A","code":"class Solution {\npublic:\n    \n    bool isTree(vector<unordered_set<int>>& graph, int root, vector<bool>& visited, int& num_visited) {\n        if (visited[root]) {\n            return false;\n        }\n        visited[root] = true;\n        ++num_visited;\n        for (int neighbor: graph[root]) {\n            if (!isTree(graph, neighbor, visited, num_visited)) {\n                return false;\n            }\n        }\n        return true;\n        \n    }\n    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<unordered_set<int>> graph(n + 1, unordered_set<int>()); \n        vector<int> indegree(n + 1, 0);\n        for (auto& e : edges) {\n            graph[e[0]].insert(e[1]);\n            ++indegree[e[1]];\n        }\n        \n        for (int edgeidx = n - 1; edgeidx > 0; --edgeidx) {\n            auto e = edges[edgeidx];\n            vector<bool> visited(n + 1, false);\n            int num_visited = 0;\n            int root = 0;\n            graph[e[0]].erase(e[1]);\n            --indegree[e[1]];\n            for (int i = 1; i <= n; ++i) {\n                if (indegree[i] == 0) {\n                    root = i;\n                    break;\n                }\n            }\n            // cout << e[0] << ' ' << e[1] << ' ' << root << endl;\n            if (isTree(graph, root, visited, num_visited) && num_visited == n) {\n                return e;\n            }\n            graph[e[0]].insert(e[1]);\n            ++indegree[e[1]];\n        }\n        return vector<int>(); \n        \n        \n        \n    \n    }\n};","compare_result":"110110111111111111111111111111111111111111111111111111","title_slug":"redundant-connection-ii"}