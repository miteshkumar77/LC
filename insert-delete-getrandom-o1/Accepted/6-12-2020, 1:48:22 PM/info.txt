{"id":352730991,"lang":"cpp","time":"1 year, 10 months","timestamp":1591984102,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/352730991/","is_pending":"Not Pending","title":"Insert Delete GetRandom O(1)","memory":"22.9 MB","code":"class RandomizedSet {\n    \n    \nprivate: \n    vector<int> rset; \n    unordered_map<int, int> qset; \npublic:\n    /** Initialize your data structure here. */\n    RandomizedSet() {\n        rset = vector<int>(); \n        qset = unordered_map<int, int>(); \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    bool insert(int val) {\n        if (qset.find(val) != qset.end()) {\n            return false; \n        }\n        \n        rset.push_back(val); \n        qset.insert(make_pair(val, rset.size() - 1)); \n        return true; \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    bool remove(int val) {\n        auto it = qset.find(val); \n        if (it == qset.end()) {\n            return false; \n        }\n        qset[rset.back()] = it -> second; \n        swap(rset[rset.size() - 1], rset[it -> second]); \n        rset.pop_back(); \n        qset.erase(it); \n        return true; \n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n        return rset[rand() % rset.size()]; \n    }\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */","compare_result":"111111111111111111","title_slug":"insert-delete-getrandom-o1"}