{"id":377601104,"lang":"cpp","time":"1Â year, 8Â months","timestamp":1596836187,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/377601104/","is_pending":"Not Pending","title":"Insert Delete GetRandom O(1)","memory":"23.1 MB","code":"class RandomizedSet {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedSet() {\n        \n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    bool insert(int val) {\n        if (rmap.find(val) == rmap.end()) {\n            rmap.insert(make_pair(val, rset.size())); \n            rset.push_back(val); \n            return true; \n        }\n        return false; \n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    bool remove(int val) {\n        bool ans = false; \n        auto it = rmap.find(val); \n        if (it != rmap.end()) {\n            ans = true; \n            rmap[rset.back()] = it -> second; \n            rset[it -> second] = rset.back(); \n            rset.pop_back(); \n            rmap.erase(val); \n        }\n        return ans; \n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n        return rset[rand() % rset.size()]; \n    }\n    \nprivate: \n    unordered_map<int, int> rmap; \n    vector<int> rset; \n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */","compare_result":"111111111111111111","title_slug":"insert-delete-getrandom-o1"}