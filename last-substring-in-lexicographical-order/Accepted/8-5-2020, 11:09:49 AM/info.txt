{"id":376510585,"lang":"cpp","time":"1 year, 8 months","timestamp":1596640189,"status_display":"Accepted","runtime":"1612 ms","url":"/submissions/detail/376510585/","is_pending":"Not Pending","title":"Last Substring in Lexicographical Order","memory":"38.4 MB","code":"class Solution {\npublic:\n    \n    \n    vector<int> sort_cyclic_shifts(string const& s) {\n        int n = s.size();\n        const int alphabet = 256;\n\n        vector<int> p(n), c(n), cnt(max(alphabet, n), 0);\n        for (int i = 0; i < n; i++)\n            cnt[s[i]]++;\n        for (int i = 1; i < alphabet; i++)\n            cnt[i] += cnt[i-1];\n        for (int i = 0; i < n; i++)\n            p[--cnt[s[i]]] = i;\n        c[p[0]] = 0;\n        int classes = 1;\n        for (int i = 1; i < n; i++) {\n            if (s[p[i]] != s[p[i-1]])\n                classes++;\n            c[p[i]] = classes - 1;\n        }\n        vector<int> pn(n), cn(n);\n        for (int h = 0; (1 << h) < n; ++h) {\n            for (int i = 0; i < n; i++) {\n                pn[i] = p[i] - (1 << h);\n                if (pn[i] < 0)\n                    pn[i] += n;\n            }\n            fill(cnt.begin(), cnt.begin() + classes, 0);\n            for (int i = 0; i < n; i++)\n                cnt[c[pn[i]]]++;\n            for (int i = 1; i < classes; i++)\n                cnt[i] += cnt[i-1];\n            for (int i = n-1; i >= 0; i--)\n                p[--cnt[c[pn[i]]]] = pn[i];\n            cn[p[0]] = 0;\n            classes = 1;\n            for (int i = 1; i < n; i++) {\n                pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};\n                pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};\n                if (cur != prev)\n                    ++classes;\n                cn[p[i]] = classes - 1;\n            }\n            c.swap(cn);\n        }\n        return p;\n    }\n\n    vector<int> suffix_array(string s) {\n        s += '$'; \n        vector<int> sorted_shifts = sort_cyclic_shifts(s); \n        sorted_shifts.erase(sorted_shifts.begin()); \n        return sorted_shifts; \n    }\n    \n    \n    string lastSubstring(string s) {\n        return s.substr(suffix_array(s).back()); \n    }\n};","compare_result":"111111111111111111111111","title_slug":"last-substring-in-lexicographical-order"}