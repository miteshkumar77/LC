{"id":440031891,"lang":"cpp","time":"1 year, 3 months","timestamp":1610066763,"status_display":"Accepted","runtime":"820 ms","url":"/submissions/detail/440031891/","is_pending":"Not Pending","title":"Find Two Non-overlapping Sub-arrays Each With Target Sum","memory":"120.7 MB","code":"class Solution {\npublic:\n    int minSumOfLengths(vector<int>& arr, int T) {\n        int n = arr.size();\n        int prefix = 0;\n        unordered_map<int,int> seen;\n        seen[0] = -1;\n        vector<int> dp(n, INT_MAX);\n        int ans = INT_MAX;\n        for (int i = 0; i < arr.size(); ++i) {\n            prefix += arr[i];\n            if (seen.find(prefix - T) != seen.end()) {\n                int lastIdx = seen[prefix - T];\n                int len = i - lastIdx;\n                \n                dp[i] = min(i >= 1?dp[i - 1]:INT_MAX, len);\n                if (lastIdx >= 0) {\n                    ans = min(ans, dp[lastIdx] == INT_MAX?INT_MAX:len + dp[lastIdx]);\n                }\n            } else {\n                dp[i] = i >= 1?dp[i - 1]:INT_MAX;\n            }\n            seen[prefix] = i;\n        }\n        \n        return ans == INT_MAX?-1:ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"find-two-non-overlapping-sub-arrays-each-with-target-sum"}