{"id":433872126,"lang":"cpp","time":"1 year, 3 months","timestamp":1608766358,"status_display":"Accepted","runtime":"1012 ms","url":"/submissions/detail/433872126/","is_pending":"Not Pending","title":"Find Two Non-overlapping Sub-arrays Each With Target Sum","memory":"166.8 MB","code":"class Solution {\npublic:\n    int minSumOfLengths(vector<int>& arr, int T) {\n        int n = arr.size();\n        // i > j\n        // p[i] - p[j] = T\n        // p[j] = p[i] - T\n        vector<int> dp(n, INT_MAX);\n        int prev = INT_MAX;\n        unordered_map<int,int> seen;\n        seen[0] = -1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); ++i) {\n            sum += arr[i];\n            if (seen.find(sum - T) != seen.end()) {\n                dp[i] = min(prev, i - seen[sum - T]); \n            } else {\n                dp[i] = prev;\n            }\n            prev = dp[i];\n            seen[sum] = i;\n        }\n        \n        // for (int i : dp) cout << i << ' ';\n        // cout << endl;\n        \n        seen = unordered_map<int,int>();\n        int ans = INT_MAX;\n        sum = 0;\n        for (int i = 0; i < arr.size(); ++i) {\n            sum += arr[i];\n            if (seen.find(sum - T) != seen.end()) {\n                int sz2 = dp[seen[sum - T]];\n                if (sz2 != INT_MAX) {\n                    ans = min(ans, sz2 + i - seen[sum - T]); \n                }\n            }\n            seen[sum] = i;\n        }\n        \n        return ans == INT_MAX?-1:ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"find-two-non-overlapping-sub-arrays-each-with-target-sum"}