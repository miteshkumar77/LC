{"id":487309174,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1619851031,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/487309174/","is_pending":"Not Pending","title":"Number of Good Leaf Nodes Pairs","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int d;\n    int ans = 0;\n    int countPairs(TreeNode* root, int distance) {\n        d = distance;\n        dfs(root);\n        return ans;\n    }\n    \n    vector<int> dfs(TreeNode* root) {\n        if (!root) {\n            return vector<int>();\n        }\n        \n        if (root -> left == nullptr && root -> right == nullptr) {\n            return vector<int>{1};\n        }\n        \n        auto l = dfs(root -> left);\n        auto r = dfs(root -> right);\n        \n        for (int i : l) {\n            for (int j : r) {\n                if (i + j < d) {\n                    ++ans;    \n                }\n            }\n        }\n        vector<int> ret;\n        ret.reserve(l.size() + r.size());\n        for (int i : l) ret.push_back(i + 1);\n        for (int i : r) ret.push_back(i + 1);\n        return ret;\n    }\n};","compare_result":"01010110010101111100001001001111000001000100000100000011000111000000001000100000001100000000100010010100000000110","title_slug":"number-of-good-leaf-nodes-pairs"}