{"id":665078553,"lang":"cpp","time":"3 weeks, 6 days","timestamp":1647959366,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/665078553/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"8.1 MB","code":"class Solution {\npublic:\n    int minKnightMoves(int x, int y) {\n        \n        auto compare = [&] (pair<array<int, 2>, int>& a, pair<array<int, 2>, int>& b) -> bool {\n            int dista = (a.first[0] - x) * (a.first[0] - x) + (a.first[1] - y) * (a.first[1] - y); \n            int distb = (b.first[0] - x) * (b.first[0] - x) + (b.first[1] - y) * (b.first[1] - y); \n            \n            if (dista <= 10 && distb <= 10) {\n                return a.second > b.second; \n            } else {\n                return dista > distb; \n            }\n        };\n        \n        array<int, 8> dx{1, 1, 2, 2, -1, -1, -2, -2}; \n        array<int, 8> dy{2, -2, 1, -1, 2, -2, 1, -1};\n        priority_queue<pair<array<int, 2>, int>, vector<pair<array<int, 2>, int>>, decltype(compare)> q(compare); \n        // queue<pair<array<int, 2>, int>> q; \n        unordered_map<int, unordered_set<int>> visited; \n        q.push(make_pair(array<int, 2>{0, 0}, 0)); \n        \n        while(!q.empty()) {\n            auto [pos, dist] = q.top(); q.pop(); \n            \n            if (visited.find(pos[0]) == visited.end() || visited[pos[0]].find(pos[1]) == visited[pos[0]].end()) {\n                if (pos[0] == x && pos[1] == y) {\n                    return dist;\n                }\n                visited[pos[0]].insert(pos[1]); \n                for (int i = 0; i < 8; ++i) {\n                    q.push(make_pair(array<int, 2>{pos[0] + dx[i], pos[1] + dy[i]}, dist + 1)); \n                }\n            }\n        }\n        return 0; \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"minimum-knight-moves"}