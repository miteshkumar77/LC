{"id":381035755,"lang":"cpp","time":"1 year, 8 months","timestamp":1597459571,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/381035755/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"12.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> verticalOrder(TreeNode* root) {\n        if (!root) {\n            return vector<vector<int>>(); \n        }\n        unordered_map<int, vector<int>> ans; \n        int minidx = 0; \n        int maxidx = 0; \n//         function<void(TreeNode*,int)> vorder = [&] (TreeNode* root, int i) -> void {\n//             if (!root) {\n//                 return; \n//             }\n//             minidx = min(i, minidx); \n//             maxidx = max(i, maxidx); \n//             ans[i].push_back(root -> val); \n//             vorder(root -> left, i - 1); \n//             vorder(root -> right, i + 1); \n//         };\n        \n//         vorder(root, 0); \n        \n        \n        queue<pair<TreeNode*, int> > q; \n        q.push(make_pair(root, 0)); \n        \n        while(!q.empty()) {\n            TreeNode* rtop = q.front().first;\n            int ltop = q.front().second; \n            q.pop(); \n            minidx = min(ltop, minidx);\n            maxidx = max(ltop, maxidx); \n            ans[ltop].push_back(rtop -> val); \n            if (rtop -> left) {\n                q.push(make_pair(rtop -> left, ltop - 1));\n            }\n            if (rtop -> right) {\n                q.push(make_pair(rtop -> right, ltop + 1)); \n            }\n            \n        }\n        vector<vector<int>> ansv; \n        for (int i = minidx; i <= maxidx; ++i) {\n            ansv.push_back(ans[i]); \n        }\n        return ansv; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-vertical-order-traversal"}