{"id":373335270,"lang":"cpp","time":"1 year, 8 months","timestamp":1596056815,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/373335270/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"N/A","code":"class Solution {\npublic:\n    string minWindow(string s, string t) {\n         \n        int ref_size = t.length(); \n        int window_size = 0; \n        unordered_map<char, int> ref;\n        unordered_map<char, int> window; \n        for (char c : t) {\n            ++ref[c]; \n        }\n        \n        int j = 0; \n        bool exists = false; \n        int min_len = INT_MAX; \n        int min_j;\n        \n        for (int i = 0; i < s.length(); ++i) {\n            ++window[s[i]];\n            if (window[s[i]] <= ref[s[i]]) {\n                ++window_size;\n            }\n            \n            while(j <= i && window_size >= ref_size) {\n                exists = true; \n                if (i - j + 1 < min_len) {\n                    min_len = i - j + 1;\n                    min_j = j; \n                }\n                --window[s[j]];\n                if (window[s[j]] < ref[s[j]]) {\n                    --window_size;\n                }\n            }\n        }\n        \n        \n        if (exists) {\n            return s.substr(min_j, min_len);\n        } else {\n            return \"\"; \n        }\n        \n        \n        \n\n        \n        \n    }\n};","compare_result":"0111110111100101111100000000000000011011000000010011111111111100111110011000100001111111011110011111110100001000011010100111101111111111111111111111111011111111110110111010000111000001000000110010100000000110000010000000000000000000000000000000000000000000001000000000","title_slug":"minimum-window-substring"}