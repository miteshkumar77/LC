{"id":364912490,"lang":"cpp","time":"1Â year, 9Â months","timestamp":1594429854,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/364912490/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"7.5 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n        helper(head); \n        return head; \n    }\n    \n    Node* helper(Node* head) {\n        if (!head) {\n            return nullptr; \n        }\n        \n        Node* tmp = head; \n        while(tmp -> next) {\n            if (tmp -> child) {\n                Node* nxt = tmp -> next; \n                Node* splice = helper(tmp -> child); \n                tmp -> next = tmp -> child; \n                tmp -> child -> prev = tmp; \n                tmp -> child = nullptr; \n                splice -> next = nxt; \n                nxt -> prev = splice; \n                tmp = nxt; \n            } else {\n                tmp = tmp -> next; \n            }\n        }\n        \n        \n        if (tmp -> child) {\n            Node* splice = flatten(tmp -> child); \n            tmp -> next = tmp -> child; \n            tmp -> child -> prev = tmp; \n            tmp -> child = nullptr; \n            return splice; \n        } else {\n            return tmp; \n        }\n    }\n};","compare_result":"1111111111111111111111","title_slug":"flatten-a-multilevel-doubly-linked-list"}