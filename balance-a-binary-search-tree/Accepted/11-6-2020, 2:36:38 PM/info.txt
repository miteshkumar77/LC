{"id":417502645,"lang":"cpp","time":"1 year, 5 months","timestamp":1604691398,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/417502645/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"48.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* balanceBST(TreeNode* root) {\n        vector<TreeNode*> vec;\n        function<void(TreeNode*)> dfs = [&](TreeNode* tn) -> void {\n            if (!tn) return;\n            dfs(tn -> left);\n            vec.push_back(tn);\n            dfs(tn -> right);\n            tn -> left = nullptr;\n            tn -> right = nullptr;\n        };\n        \n        dfs(root);\n        \n        function<TreeNode*(int,int)> buildTree = [&](int l, int r) -> TreeNode* {\n\n            if (l > r) {\n                \n                return nullptr;\n            }\n            \n            if (l == r) {\n                return vec[l];\n            }\n            \n            int mid = l + (r - l)/2;\n            \n            vec[mid] -> left = buildTree(l, mid - 1);\n            vec[mid] -> right = buildTree(mid + 1, r);\n            return vec[mid];\n        };\n        \n        return buildTree(0, vec.size() - 1);\n    }\n};","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree"}