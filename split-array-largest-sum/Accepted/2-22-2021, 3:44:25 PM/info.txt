{"id":459381783,"lang":"cpp","time":"1 year, 1 month","timestamp":1614026665,"status_display":"Accepted","runtime":"412 ms","url":"/submissions/detail/459381783/","is_pending":"Not Pending","title":"Split Array Largest Sum","memory":"7.2 MB","code":"class Solution {\npublic:\n    \n    /*\n        \n        dp[i][k] = minimum cost from splitting nums[0:i+1] into k subarrays\n\n    */\n    int splitArray(vector<int>& nums, int m) {\n        int n = nums.size(); \n        vector<int> dp(n, 0); \n        dp[0] = nums[0];\n        for (int i = 1; i < n; ++i) {\n            dp[i] = dp[i - 1] + nums[i];\n        }\n        int total = dp.back(); \n        int ktotal;\n        int itotal;\n        for (int k = 2; k <= m; ++k) {\n            ktotal = total;\n            for (int i = n - 1; i >= 0; --i) {\n                dp[i] = INT_MAX;\n                itotal = 0; \n                for (int j = i - 1; j + 2 >= k; --j) {\n                    itotal += nums[j + 1]; \n                    dp[i] = min(dp[i], max(dp[j], itotal)); \n                }\n            }\n        }\n        return dp.back(); \n    }\n};","compare_result":"1111111111111111111111111111","title_slug":"split-array-largest-sum"}