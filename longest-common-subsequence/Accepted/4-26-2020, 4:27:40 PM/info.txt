{"id":330575487,"lang":"cpp","time":"1 year, 11 months","timestamp":1587932860,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/330575487/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"7.3 MB","code":"class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        // LCS -> LIS\n        vector<int> alph[128];  // record text1's alphabet in text2 pos.\n        int maps[128];\n        memset(maps, 0, sizeof(maps));\n        for(int i = 0; i < text1.size(); i++) maps[text1[i]] = 1;\n        \n        for(int j = text2.size(); j > -1; j--) if(maps[text2[j]] == 1) alph[text2[j]].push_back(j);\n        vector<int> nums;\n        for(int i = 0; i < text1.size(); i++) {\n            if(alph[text1[i]].size() > 0) nums.insert(nums.end(), alph[text1[i]].begin(), alph[text1[i]].end());\n        }\n        \n        // get LIS's length by monotone stack method : O(nlogn)\n        vector<int> pool;\n        for(int i = 0; i < nums.size(); i++) {\n            if(i == 0 || nums[i] > pool.back() ) {\n                pool.push_back(nums[i]);\n            } else if(nums[i] == pool.back()) {\n                continue;\n            } else {\n                int s = 0, e = pool.size() - 1, mid = 0;\n                while(s < e) {\n                    mid = (s + e)/2;\n                    if(pool[mid] < nums[i]) s = mid + 1;\n                    else e = mid;\n                }\n                pool[e] = nums[i];\n            }\n        }\n        \n        return pool.size();\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"longest-common-subsequence"}