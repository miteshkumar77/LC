{"id":406589289,"lang":"cpp","time":"1 year, 6 months","timestamp":1602256905,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/406589289/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"27.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\n    \n    \nprivate:\n    vector<int> split(string& s) {\n        int prev = 0;\n        vector<int> ans;\n        for (int i = 0; i < s.length(); ++i) {\n            if (s[i] == ',') {\n                ans.push_back(stoi(s.substr(prev, i - prev)));\n                prev = i + 1;\n            }\n        }\n        return ans;\n    }\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if (!root) {\n            return \"\";\n        }\n        return to_string(root -> val) + \",\" + serialize(root -> left) + serialize(root -> right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        if (data == \"\") {\n            return nullptr;\n        }\n        vector<int> preorder = split(data);\n        \n        stack<TreeNode*> stk;\n        TreeNode* root = new TreeNode(preorder[0]);\n        stk.push(root);\n        for (int i = 1; i < preorder.size(); ++i) {\n            if (preorder[i] < stk.top() -> val) {\n                stk.top() -> left = new TreeNode(preorder[i]);\n                stk.push(stk.top() -> left);\n            } else {\n                TreeNode* tmp = nullptr;\n                while(!stk.empty() && preorder[i] > stk.top() -> val) {\n                    tmp = stk.top();\n                    stk.pop();\n                }\n                tmp -> right = new TreeNode(preorder[i]);\n                stk.push(tmp -> right);\n            }\n        }\n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.deserialize(codec.serialize(root));","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst"}