{"id":416883014,"lang":"cpp","time":"1 year, 5 months","timestamp":1604537953,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/416883014/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        unordered_map<int, unordered_set<int>> graph;\n        for (auto e : edges) {\n            graph[e[0]].insert(e[1]);\n            graph[e[1]].insert(e[0]);\n        }\n        \n        unordered_set<int> ans;\n        unordered_set<int> cur;\n        \n        for (int i = 0; i < n; ++i) {\n            if (graph[i].size() == 1) {\n                cur.insert(i);\n            }\n        }\n        \n        while(cur.size() >= 2) {\n            // for (int i : cur) cout << i << ' ';\n            // cout << endl;\n            ans = unordered_set<int>();\n            unordered_set<int> tmp;\n            cur.swap(ans);\n            for (int i : ans) {\n                tmp.insert(*graph[i].begin());\n            }\n            \n            for (int i : ans) {\n                graph[*graph[i].begin()].erase(i);\n                graph.erase(i);\n            }\n            \n            for (int i : tmp) {\n                if (graph[i].size() <= 1) {\n                    cur.insert(i);\n                }\n            }\n            // for (int i : cur) cout << i << ' ';\n            // cout << endl;\n            \n        }\n        \n        return vector<int>(cur.begin(), cur.end());\n        \n    }\n};","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000","title_slug":"minimum-height-trees"}