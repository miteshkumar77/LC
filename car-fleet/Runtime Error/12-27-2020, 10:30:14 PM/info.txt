{"id":435397450,"lang":"cpp","time":"1 year, 3 months","timestamp":1609126214,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/435397450/","is_pending":"Not Pending","title":"Car Fleet","memory":"N/A","code":"class Solution {\npublic:\n    bool willCollideBefore(const array<int,2>& before, const array<int, 2>& after, int target) {\n        return ((double)target - before[0])/before[1] <= ((double)target - after[0])/after[1];\n    }\n    int carFleet(int target, vector<int>& position, vector<int>& speed) {\n        int n = speed.size();\n        vector<array<int,2>> pairs;\n        for (int i = 0; i < n; ++i) {\n            pairs.push_back({position[i], speed[i]}); \n        }\n        \n        sort(pairs.begin(), pairs.end(), [](const array<int, 2>& a, const array<int,2>& b) -> bool {\n            return a[0] > b[0];\n        });\n        \n        int ans = 1;\n        \n        array<int, 2> after = pairs[0];\n        \n        for (int i = 1; i < n; ++i) {\n            if (!willCollideBefore(pairs[i], after, target)) {\n                ++ans;\n                after = pairs[i];\n            }\n        }\n        return ans;\n    }\n    \n    \n};","compare_result":"10000000000000000000000000000000000000000000","title_slug":"car-fleet"}