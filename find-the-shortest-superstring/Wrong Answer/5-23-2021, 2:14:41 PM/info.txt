{"id":497246012,"lang":"cpp","time":"11Â months","timestamp":1621793681,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/497246012/","is_pending":"Not Pending","title":"Find the Shortest Superstring","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<string>> dp;\n    vector<vector<int>> lcps;\n    vector<string> words;\n    unordered_set<int> two_powers;\n    int n;\n    string shortestSuperstring(vector<string>& words) {\n        /*\n            dp[i][j]: shortest superstring for subset with bitmask i if\n            words[j] is the last string\n        */\n        /*\n            lcps[i][j]: longest prefix of word j that is a suffix of word i\n        */\n        this->words = words;\n        n = words.size();\n        for (int i = 0; i <= n; ++i) {\n            // cout << (1<<i) << endl;\n            two_powers.insert(1<<i);\n            \n        }\n        \n        dp = vector<vector<string>> (1<<(n), vector<string>(n, \"\"));\n        lcps = vector<vector<int>> (n, vector<int>(n, 0));\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i == j) {\n                    lcps[i][j] = words[i].length();\n                    continue;\n                }\n                for (int k = 0; k < min(words[j].length(), words[i].length()); ++k) {\n                    if (words[j].substr(0, k + 1) == words[i].substr(words[i].length() - k - 1, k + 1)) {\n                        lcps[i][j] = k + 1;\n                    }\n                }\n            }\n        }\n        int len = INT_MAX;\n        int ans = -1;   \n        int pw = 0;\n        for (int i = 0; i < n; ++i) {\n            pw |= (1<<i);\n        }\n        for (int i = 0; i < n; ++i) {\n            auto a = td(pw, i);\n            // cout << words[i] << ' ' << a << endl;\n            if (a.length() < len) {\n                ans = i;\n                len = a.length();\n            }\n        }\n        return dp[pw][ans];\n    }\n    \n    string td(int i, int j) {\n        // cout << i << endl;\n        if (two_powers.count(i)) {\n            return words[j];\n        }\n        int pow = 1;\n        int ni = i&(~(1<<j));\n        int len = INT_MAX;\n        for (int idx = 0; idx < n; ++idx, pow<<=1) {\n            if (ni&pow) {\n                auto a = td(ni, idx) + words[j].substr(lcps[idx][j], words[j].length());\n                // cout << a << endl;\n                if (a.length() < len) {\n                    len = a.length();\n                    dp[i][j] = a;\n                }\n            }\n        }\n        return dp[i][j];\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","compare_result":"11011111111111111111111111111111111111111111111111111111111000000000000000000000000","title_slug":"find-the-shortest-superstring"}