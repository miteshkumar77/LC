{"id":356722117,"lang":"cpp","time":"1 year, 10 months","timestamp":1592776362,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/356722117/","is_pending":"Not Pending","title":"Contains Duplicate III","memory":"15.1 MB","code":"class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n        unordered_map<int, set<unsigned long long int>::iterator> imap; \n        set<unsigned long long int> vset; \n        for (int i = 0; i < nums.size(); ++i) {\n            if (imap.find(i - k - 1) != imap.end()) {\n                vset.erase(imap[i - k - 1]); \n                imap.erase(i - k - 1); \n            }\n            \n            // for (auto it = vset.begin(); it != vset.end(); ++it) {\n            //     cout << (*it) << ' '; \n            // }cout << endl; \n            auto lb = vset.lower_bound(nums[i]); \n            vector<set<unsigned long long int>::iterator> vec{lb}; \n            if (lb != vset.begin()) {\n                vec.push_back(prev(lb)); \n            }\n            for (auto it : vec) {\n                \n                if (it != vset.end() && labs((unsigned long long int)nums[i] - (unsigned long long int)(*it)) <= t) {\n                    return true; \n                }\n            }\n            imap[i] = vset.insert(nums[i]).first; \n        }\n        return false; \n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"contains-duplicate-iii"}