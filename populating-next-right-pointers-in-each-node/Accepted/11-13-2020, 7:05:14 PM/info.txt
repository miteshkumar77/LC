{"id":420026029,"lang":"cpp","time":"1 year, 5 months","timestamp":1605312314,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/420026029/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"18.6 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        queue<pair<Node*, int>> bfsq;\n        bfsq.push(make_pair(root, 0));\n        int cd = -1;\n        Node* cn = nullptr;\n        while(!bfsq.empty()) {\n            auto t = bfsq.front(); \n            bfsq.pop(); \n            if (!t.first) continue;\n            bfsq.push(make_pair(t.first -> left, t.second + 1));\n            bfsq.push(make_pair(t.first -> right, t.second + 1)); \n            if (t.second == cd) {\n                cn -> next = t.first;\n            } else {\n                cd = t.second;\n            }\n            cn = t.first;\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node"}