{"id":524049877,"lang":"cpp","time":"9Â months","timestamp":1626549204,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/524049877/","is_pending":"Not Pending","title":"Three Equal Parts","memory":"40.3 MB","code":"class Solution {\npublic:\n    bool eq(vector<int>& a, vector<int>& b, vector<int>& c) {\n        int i = a.size(); int j = b.size(); int k = c.size();\n        if (i == 0 || j == 0 || k == 0) return 0;\n        --i; --j; --k;\n        while(i >= 0 || j >= 0 || k >= 0) {\n            int ival = i < 0 ? 0 : a[i--];\n            int jval = j < 0 ? 0 : b[j--];\n            int kval = k < 0 ? 0 : c[k--];\n            if (ival != jval || jval != kval) return false;\n        }\n        return true;\n    }\n    \n    vector<int> threeEqualParts(vector<int>& arr) {\n        int n = arr.size();\n        int ones = accumulate(arr.begin(), arr.end(), 0);\n        if (ones % 3 != 0) return {-1, -1};\n        if (ones == 0) {\n            int s = arr.size();\n            // if (s % 3 != 0) return {-1,-1};\n            return {s/3 - 1, 2 * (s/3)};\n        }\n        int end_z = 0;\n        for (int i = n-1; i >= 0 && arr[i] == 0;--i, ++end_z);\n        int o_ct = 0;\n        int l_z = 0;\n        for (int i = 0; i < n; ++i) {\n            o_ct += arr[i];\n            l_z = (arr[i] ? 0 : l_z + 1);\n            if (l_z == end_z && o_ct == ones/3) {\n                l_z = 0;\n                o_ct = 0;\n                for (int j = i+1; j < n; ++j) {\n                    o_ct += arr[j];\n                    l_z = (arr[j] ? 0 : l_z + 1);\n                    if (o_ct == ones/3 && l_z == end_z) {\n                        vector<int> a(arr.begin(), arr.begin() + i + 1);\n                        vector<int> b(arr.begin() + i + 1, arr.begin() + j + 1);\n                        vector<int> c(arr.begin() + j + 1, arr.end());\n                        if (eq(a, b, c)) {\n                            return {i, j+1};\n                        } else {\n                            return {-1, -1};\n                        }\n                    }\n                }\n            }\n        }\n        \n        return {-1, -1};\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"three-equal-parts"}