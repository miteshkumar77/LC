{"id":379592850,"lang":"cpp","time":"1 year, 8 months","timestamp":1597189123,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/379592850/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"14.3 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    NestedIterator(vector<NestedInteger> &nestedList) {\n        stk.push(make_pair(nestedList, 0)); \n    }\n    \n    \n    void shuffle() {\n        if (stk.empty()) {\n            return; \n        } else if (stk.top().first.size() == stk.top().second) {\n            stk.pop(); \n        } else if (!stk.top().first[stk.top().second].isInteger()) {\n            stk.push(make_pair(stk.top().first[stk.top().second++].getList(), 0)); \n        } else if (stk.top().first[stk.top().second].isInteger()) {\n            return; \n        }\n        shuffle(); \n        \n    }\n    \n    int next() {\n        shuffle(); \n        int ans = stk.top().first[stk.top().second++].getInteger();\n        return ans; \n    }\n    \n    bool hasNext() {\n        shuffle(); \n        return !stk.empty(); \n    }\n    \n    \nprivate: \n    stack<pair<vector<NestedInteger>, int>> stk; \n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */","compare_result":"11111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}