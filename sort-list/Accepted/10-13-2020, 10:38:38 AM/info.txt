{"id":408249100,"lang":"cpp","time":"1 year, 6 months","timestamp":1602599918,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/408249100/","is_pending":"Not Pending","title":"Sort List","memory":"15.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    \n    ListNode* merge(ListNode* h1, ListNode* h2) {\n        ListNode* head = nullptr;\n        ListNode* curr = nullptr;\n        \n        while(h1 || h2) {\n            ListNode* nxt = nullptr;\n            if (h1 && (!h2 || h2 -> val > h1 -> val)) {\n                nxt = h1;\n                h1 = h1 -> next;\n            } else {\n                nxt = h2;\n                h2 = h2 -> next;\n            }\n            nxt -> next = nullptr;\n            if (curr) {\n                curr -> next = nxt;\n            } else {\n                head = nxt;\n            }\n            curr = nxt;\n        }\n        return head;\n    }\n    \n    pair<ListNode*, ListNode*> split(ListNode* head) {\n        ListNode* h1 = nullptr;\n        ListNode* c1 = nullptr;\n        ListNode* c2 = nullptr;\n        ListNode* h2 = nullptr;\n        \n        bool h = false;\n        while(head) {\n            if (h) {\n                if (c1) {\n                    c1 -> next = head;\n                } else {\n                    h1 = head;\n                }\n                c1 = head;\n            } else {\n                if (c2) {\n                    c2 -> next = head;\n                } else {\n                    h2 = head;\n                }\n                c2 = head;\n            }\n            h = !h;\n            head = head -> next;\n        }\n        c1 -> next = nullptr;\n        c2 -> next = nullptr;\n        return make_pair(h1, h2);\n    }\n    \n    ListNode* sortList(ListNode* head) {\n        if (!head || !head -> next) {\n            return head;\n        }\n        \n        // ListNode* tmp = new ListNode(4);\n        // tmp -> next = new ListNode(1);\n        \n        \n        \n        // auto p = split(tmp);\n//         auto p = make_pair(tmp, nullptr);\n//         p.first = merge(p.first, p.second);\n//         while(p.first) {\n//             cout << p.first -> val << ' ';\n//             p.first = p.first -> next;\n//         }\n//         cout << endl;\n        \n//         // while(p.second) {\n//         //     cout << p.second -> val << ' ';\n//         //     p.second = p.second -> next;\n//         // }\n        \n//         return p.second;\n        // ListNode* a = new ListNode(4);\n        // ListNode* b = new ListNode(5);\n        // a -> next = new ListNode(6);\n        // return merge(a, b);\n        \n        auto p = split(head);\n        p.first = sortList(p.first);\n        p.second = sortList(p.second);\n        return merge(p.first, p.second);\n        \n    }\n};","compare_result":"1111111111111111","title_slug":"sort-list"}