{"id":414925626,"lang":"cpp","time":"1 year, 5 months","timestamp":1604070797,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/414925626/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"13.6 MB","code":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        vector<int> dp(nums.size(), 1);\n        vector<int> ct(nums.size(), 1);\n        for (int i = 1; i < nums.size(); ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j]) {\n                    int nxt = dp[j] + 1;\n                    if (nxt > dp[i]) {\n                        dp[i] = nxt;\n                        ct[i] = ct[j];\n                    } else if (nxt == dp[i]) {\n                        ct[i] += ct[j];\n                    }\n                }    \n            }\n        }\n        // for (int i : dp) cout << i << ' ';\n        // cout << endl;\n        // for (int i : ct) cout << i << ' ';\n        // cout << endl;\n        \n        int ans = 0;\n        int len = 0;\n        for (int i = 0; i < dp.size(); ++i) {\n            if (dp[i] > len) {\n                ans = ct[i];\n                len = dp[i];\n            } else if (dp[i] == len) {\n                ans += ct[i];\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence"}