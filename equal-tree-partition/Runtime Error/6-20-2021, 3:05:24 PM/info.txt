{"id":510758195,"lang":"cpp","time":"10Â months","timestamp":1624215924,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/510758195/","is_pending":"Not Pending","title":"Equal Tree Partition","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int T;\n    int total(TreeNode* root) {\n        if (!root) return 0;\n        return total(root->left) + total(root->right) + root->val;\n    }\n    \n    bool check(TreeNode* root, int sum) {\n        sum += root->val;\n        if (sum * 2 == T) return true;\n        return check(root->left, sum) || check(root->right, sum);\n    }\n    \n    bool checkEqualTree(TreeNode* root) {\n        T = total(root);\n        if (!root->left && !root->right) return false;\n        return check(root, 0);\n    }\n};","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"equal-tree-partition"}