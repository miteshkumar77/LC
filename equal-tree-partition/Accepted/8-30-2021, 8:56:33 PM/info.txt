{"id":546954312,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1630371393,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/546954312/","is_pending":"Not Pending","title":"Equal Tree Partition","memory":"32.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int T;\n    int total(TreeNode* root) {\n        if (!root) return 0;\n        return total(root->left) + total(root->right) + root->val;\n    }\n    \n    pair<int,bool> check(TreeNode* root) {\n        if (!root) return {0, false};\n        auto lr = check(root->left);\n        auto rr = check(root->right);\n        pair<int, bool> ret = {lr.first + rr.first + root->val, lr.second || rr.second};\n        ret.second = ret.second || ret.first * 2 == T;\n        return ret;\n    }\n    \n    bool checkEqualTree(TreeNode* root) {\n        T = total(root);\n        return check(root->left).second || check(root->right).second;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"equal-tree-partition"}