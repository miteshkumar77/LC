{"id":344256570,"lang":"cpp","time":"1 year, 10 months","timestamp":1590372822,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/344256570/","is_pending":"Not Pending","title":"Squares of a Sorted Array","memory":"26.1 MB","code":"class Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& A) {\n        vector<int> ans; ans.reserve(A.size()); \n        int center = 0; \n        for (int i = 1; i < A.size(); ++i) {\n            if (abs(A[i]) <= abs(A[center])) {\n                center = i; \n            } else {\n                break;\n            }\n            \n        }\n        \n        cout << center << endl; \n        int left_ptr = center - 1; \n        int right_ptr = center + 1; \n        ans.push_back(A[center] * A[center]); \n        while(left_ptr >= 0 || right_ptr < A.size()) {\n            if (left_ptr >= 0 && (right_ptr >= A.size() || abs(A[left_ptr]) <= abs(A[right_ptr]))) {\n                ans.push_back(A[left_ptr]*A[left_ptr--]);\n            }\n            \n            if (right_ptr < A.size() && (left_ptr < 0 || abs(A[left_ptr]) >= abs(A[right_ptr]))) {\n                ans.push_back(A[right_ptr]*A[right_ptr++]);\n            }\n        }\n        \n        return ans; \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"squares-of-a-sorted-array"}