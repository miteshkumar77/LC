{"id":379013315,"lang":"cpp","time":"1 year, 8 months","timestamp":1597090170,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/379013315/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"16.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* ans = nullptr; \n        \n        function<int(TreeNode*)> lca = [&] (TreeNode* r) -> int {\n            \n            if (ans || !r) {\n                return 0; \n            }\n            \n            \n            int ansn = 0; \n            if (r == p || r == q) {\n                ++ansn; \n            }\n            \n            ansn += lca(r -> left); \n            ansn += lca(r -> right); \n            \n            if (ansn == 2 && !ans) {\n                ans = r; \n            }\n            return ansn; \n        };\n        \n        lca(root); \n        return ans; \n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}