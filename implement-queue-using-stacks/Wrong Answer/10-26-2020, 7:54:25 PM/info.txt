{"id":413542812,"lang":"cpp","time":"1 year, 5 months","timestamp":1603756465,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/413542812/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"N/A","code":"class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        stk.push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        \n        int ret = peek();\n        rstk.pop();\n        return ret;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        if (rstk.empty()) {\n            fill();\n        }\n        return rstk.top();\n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return rstk.empty();\n    }\n    \nprivate:\n    \n    \n    void fill() {\n        while(!stk.empty()) {\n            rstk.push(stk.top());\n            stk.pop();\n        }\n    }\n    stack<int> stk;\n    stack<int> rstk;\n    \n    \n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11011111111111111111","title_slug":"implement-queue-using-stacks"}