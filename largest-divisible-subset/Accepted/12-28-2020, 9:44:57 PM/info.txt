{"id":435801920,"lang":"cpp","time":"1 year, 3 months","timestamp":1609209897,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/435801920/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"10.9 MB","code":"class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\n\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        int ansidx = 0;\n        vector<vector<int>> dp(n + 1, vector<int>());\n        dp[0] = vector<int>();\n        \n        for (int i = 1; i <= n; ++i) {\n            int maxidx = 0;\n            for (int j = 1; j < i; ++j) {\n                if (nums[i - 1] % dp[j].back() == 0 && dp[maxidx].size() < dp[j].size()) {\n                    maxidx = j;\n                }\n            }\n            \n            dp[i] = vector<int>(dp[maxidx].begin(), dp[maxidx].end());\n            dp[i].push_back(nums[i - 1]);\n            if (dp[i].size() > dp[ansidx].size()) {\n                ansidx = i;\n            }\n        }\n        \n        return dp[ansidx];\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset"}