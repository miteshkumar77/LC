{"id":454551761,"lang":"cpp","time":"1 year, 2 months","timestamp":1612988257,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/454551761/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"11.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n    \n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if (!head) return nullptr;\n        int n = 0;\n        Node* curr = head;\n        while(curr) {\n            ++n;\n            curr = curr -> next;\n        }\n        curr = head;\n        void* v = operator new[](n * sizeof(Node)); \n        \n        Node* nodes = static_cast<Node*>(v);\n        \n        for (int i = 0; i < n; ++i) {\n            // cout << curr -> val << ' ';\n            new (nodes + i) Node(curr -> val); \n            (nodes + i) -> next = curr -> next;\n            curr -> next = (nodes + i);\n            curr = (nodes + i) -> next;\n        }\n        // cout << endl;\n        curr = head;\n        for (int i = 0; i < n; ++i) {\n            (nodes + i) -> random = curr -> random?curr -> random -> next:nullptr;\n            curr = (nodes + i) -> next;\n        }\n        curr = head;\n        for (int i = 0; i < n; ++i) {\n            curr -> next = (nodes + i) -> next;\n            curr = curr -> next;\n            if (i < n - 1) {\n                (nodes + i) -> next = (nodes + i + 1);\n            } else {\n                (nodes + i) -> next = nullptr;\n            }\n        }\n        curr = head;\n        while(curr) {\n            cout << curr -> val << \", \";\n            cout << ((curr -> random)?(curr->random->val):-1) << \" \";\n            curr = curr -> next;\n        }\n        return nodes;\n    }\n};","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer"}