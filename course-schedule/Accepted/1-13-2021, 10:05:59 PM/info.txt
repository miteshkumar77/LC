{"id":442703148,"lang":"cpp","time":"1 year, 3 months","timestamp":1610593559,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/442703148/","is_pending":"Not Pending","title":"Course Schedule","memory":"14.3 MB","code":"class Solution {\npublic:\n    \n    bool isCycle(const vector<vector<int>>& graph, vector<bool>& exploring, vector<bool>& explored, int node) {\n        if (explored[node]) return false;\n        if (exploring[node] && !explored[node]) return true;\n        exploring[node] = true;\n        for (int neighbor : graph[node]) {\n            if (isCycle(graph, exploring, explored, neighbor)) {\n                return true;\n            }\n        }\n        explored[node] = true;\n        return false;\n    }\n    \n    \n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<bool> exploring(numCourses, false);\n        vector<bool> explored(numCourses, false);\n        \n        vector<vector<int>> graph(numCourses, vector<int>());\n        for (auto v : prerequisites) {\n            graph[v[0]].push_back(v[1]);\n        }\n        \n        for (int i = 0; i < numCourses; ++i) {\n            if (isCycle(graph, exploring, explored, i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"course-schedule"}